{"version":3,"sources":["components/common/Preloader/Preloader.module.css","redux/profile-reducer.ts","api/api.ts","components/hoc/hoc.tsx","assets/images/kuscherenko.jpg","assets/images/lyubov.jpg","components/Dialogs/Message/Message.module.css","components/common/Preloader/preloader.svg","assets/startPage/logo2.jpg","components/Login/Login.module.css","components/Navbar/Navbar.module.css","components/Users/User/User.module.css","serviceWorker.js","redux/authMe.ts","redux/messages-reducer.ts","redux/sideBar-reducer.ts","redux/users-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Form/SendMessageRedux.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","components/Users/FormType.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/common/Pagination/Pagination.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/Validators/Validators.tsx","components/Header/Header.module.css","components/common/InputChecker/InputChecker.tsx","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","components/common/InputChecker/InputChecker.module.css","components/common/Preloader/Preloader.jsx","assets/images/zorro.jpg","components/Dialogs/Dialog/Dialog.module.css","components/Navbar/Friends/Friends.module.css","components/common/Pagination/Pagination.module.css"],"names":["module","exports","SETPROF","POSTF","initialState","postsData","id","message","likes","profile","status","actions","setProfile","type","updateStatusAC","postForm","content","uploadPhoto","image","setProfileThunk","userID","dispatch","a","userProfile","showProfile","data","setStatusThunk","updateStatus","resultCode","ResultCodeType","Success","getStatusThunk","getStatus","uploadPhotoThunk","photos","updateProfileThunk","getState","updateProfile","authMe","messages","length","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","then","response","changeCurPage","page","unFollowDeleteRequest","delete","followPostRequest","post","authAPI","isAuthMe","isLogin","email","login","password","rememberMe","checkbox","captcha","symbols","isLogout","put","file","formData","FormData","append","securityAPI","getCaptchaURL","withAuthMe","Component","this","props","restProps","to","React","Boolean","window","location","hostname","match","IS_AUTH_ME","CAPTCHA","authMeSuccessThunk","setUserData","setAuthMe","getCaptchaThunk","setCaptcha","url","messagesData","dialogsUsersData","name","ava","zorroAva","lyubovAva","kuscherenkoAva","idNum","sendMessage","newMessageText","messagesReducer","friendsList","sideBarReducer","FOLLOW","UNFOLLOW","DATA","CURPAGE","SET_FILTER","usersData","totalCount","isFetching","followingInProgress","filter","followingTF","userId","usersReducer","map","u","followed","state02","push","SET_INIT","initialized","appInitialization","require","createStore","combineReducers","applyMiddleware","store","profilePage","messagesPage","sideBar","usersPage","appInit","form","formReducer","composeWithDevTools","thunkMiddleware","ActionLink","href","onClick","console","log","News","Music","Settings","Dialog","path","className","cl","dialog","avatar","src","alt","activeClassName","active","SendMessageRedux","reduxForm","onSubmit","handleSubmit","Field","validate","required","maxLength10","component","InputComp","maxLengthC","Message","Dialogs","dialogsGenerate","d","key","messagesGenerate","m","dialogs","dialogsItems","reset","DialogsContainer","compose","connect","DialogsContainerHOC","Friends","Navbar","friendsListComp","fff","nav","item","friendsNav","NavbarContainer","SearchForm","initialValuesForForm","initialValues","values","setSubmitting","valuesConverted","onFilterChange","isSubmitting","as","value","disabled","User","userItem","user","small","avaDefault","country","off","on","stars","lastMessage","some","doUnfollow","statusFollow","doFollow","Users","usersItem","usersGenerate","getUsersPage","getUsersData","createSelector","getCurrentPage","getTotalCount","getPageSize","getIsFetching","getFollowingInProgress","getFilter","Pagination","pagesQuantity","Math","ceil","pA","i","useState","currentPortion","setCurrentPortion","portionNumber","leftBorder","rightBorder","cn","pages","pageSelected","UsersContainerClass","setCurPage","setUsers","title","userPage","preloader","Preloader","pagination","items","Header","header","loginPhrase","logout","userLogin","logIn","logo","HeaderContainer","dataR","maxLength30","placeholder","error","checker","commonError","LoginFormContainer","catchError","starter","ProfileContainer","lazy","App","catchAllUnhandledErrors","e","alert","PostsComp","fallback","DialogsMessagesComp","UsersComp","UsersContainer","LoginFormContainerCom","setInitialize","addEventListener","removeEventListener","render","NoMatch","useLocation","pathname","AppMain","withRouter","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","undefined","maxLen","input","meta","visited","messageError","divPreloader"],"mappings":"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","file":"static/js/main.c91c93a7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__UMRl1\",\"divPreloader\":\"Preloader_divPreloader__3iYxB\"};","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ResultCodeType, userProfile } from \"../api/api\";\r\nimport { ProfileType } from \"../types/types\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SETPROF = 'SN/PROFILE/SET-PROFILE';\r\nconst UPDATESTATUS = 'SN/PROFILE/SET-STATUS';\r\nconst POSTF = 'SN/PROFILE/POST-FORM-newPostText';\r\nconst UPLOAD_PHOTO = 'SN/PROFILE/UPLOAD-PHOTO';\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        { id: 1, message: 'Hello', likes: 15 },\r\n        { id: 2, message: 'Bonjour', likes: 30 },\r\n        { id: 3, message: 'Привет', likes: 15000 },\r\n    ] as Array<PostsDataType>,\r\n    // newPostText: '',\r\n    profile: null as object | null,\r\n    status: 'no status' \r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POSTF:\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.content,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case SETPROF:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case UPLOAD_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.image }\r\n            }\r\n        case UPDATESTATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType) => ({ type: SETPROF, profile } as const),\r\n    updateStatusAC: (status: string) => ({ type: UPDATESTATUS, status } as const),\r\n    postForm: (content: string) => ({ type: POSTF, content } as const),\r\n    uploadPhoto: (image: string) => ({ type: UPLOAD_PHOTO, image } as const)\r\n}\r\n\r\nexport const setProfileThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.showProfile(userID);\r\n    dispatch(actions.setProfile(data));\r\n}\r\n\r\nexport const setStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n    //обработка ошибок\r\n    // try\r\n    // {\r\n        let data = await userProfile.updateStatus(status);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.updateStatusAC(status))\r\n    // }\r\n    // catch(error)\r\n    // {\r\n    //     alert(error)\r\n    // }\r\n    \r\n\r\n}\r\nexport const getStatusThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.getStatus(userID)\r\n    dispatch(actions.updateStatusAC(data));\r\n}\r\n\r\nexport const uploadPhotoThunk = (image: File): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.uploadPhoto(image);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.uploadPhoto(data.data.photos));\r\n}\r\n\r\nexport const updateProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await userProfile.updateProfile(profile);\r\n    if (data.resultCode === 0) dispatch(setProfileThunk(getState().authMe.id))\r\n    else {\r\n        if (data.messages.length > 0) {\r\n            dispatch(stopSubmit('editProfile', { _error: data.messages }))\r\n            return Promise.reject(data.messages)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n//types \r\nexport type PostsDataType = {\r\n    id?: number\r\n    message: string\r\n    likes: number\r\n}\r\n\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>","import { ProfileType, UsersDataType } from './../types/types';\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"30bffa88-490b-405c-83b6-e6b58d235873\"\r\n    }\r\n});\r\n\r\nexport type UsersAPIResponseType = {\r\n    items: Array<UsersDataType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type FollowUnfollowResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string , friend: null | boolean) {\r\n        debugger\r\n        return instance.get<UsersAPIResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}${friend === null? '' : '&friend=' + friend}` )\r\n            .then(response => response.data);\r\n    },\r\n    changeCurPage(page: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    unFollowDeleteRequest(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data) as Promise<FollowUnfollowResponseType>\r\n    },\r\n    followPostRequest(id: number) {\r\n        return instance.post<FollowUnfollowResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n\r\nexport type DataIsAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type DataIsLoginType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodeType {\r\n    Success = 0,\r\n    Error = 10\r\n}\r\n\r\nexport type AuthAPIResponseType<dataType, ResultCodeType> = {\r\n    data: dataType\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\ntype dataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    isAuthMe() {\r\n        return instance.get<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    isLogin(data: dataIsLoginType) {\r\n        return instance.post<AuthAPIResponseType<DataIsLoginType, ResultCodeType>>\r\n            (`auth/login`, {\r\n                email: data.login,\r\n                password: data.password,\r\n                rememberMe: data.checkbox,\r\n                captcha: data.symbols\r\n            })\r\n            .then(response => { return response.data })\r\n    },\r\n    isLogout() {\r\n        return instance.delete<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/login`)\r\n            .then(response => { return response.data })\r\n    }\r\n}\r\n\r\n\r\nexport const userProfile = {\r\n    showProfile(userID: number) {\r\n        return instance.get<ProfileType>(`profile/${userID}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile/status`, { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`/profile/status/${userID}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    uploadPhoto(file: File) {\r\n        let formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<AuthAPIResponseType<{photos: string}, ResultCodeType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    updateProfile(profile: ProfileType ) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile`, profile)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n            .then(response => response.data);\r\n    }\r\n}","import React, { Suspense } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/authMe';\r\n\r\n\r\nexport let withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n    return class WrappedContainer extends React.Component<P & initialStateType> {\r\n        render() {\r\n            let {isAuthMe, ...restProps} = this.props;\r\n            if (this.props.isAuthMe) return <Component {...restProps as P} />\r\n            else return <Redirect to='/login'></Redirect>\r\n        }\r\n    }\r\n}\r\n\r\nexport function withSuspense <WCP>(Component: React.ComponentType<WCP>){\r\n    return  (props: WCP) => {\r\n    return (<Suspense fallback={<h1>Still Loading…</h1>}>\r\n        <Component {...props} />\r\n    </Suspense>\r\n    )\r\n\r\n}} ","module.exports = __webpack_public_path__ + \"static/media/kuscherenko.7bc7e317.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lyubov.fc2a1a49.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__xSb92\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.c04e3ad7.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo2.623bb4d9.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starter\":\"Login_starter__1tZcA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__kBj7q\",\"item\":\"Navbar_item__3Pa_F\",\"active\":\"Navbar_active__28OkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"User_userItem__4zQnk\",\"avatar\":\"User_avatar__39gSA\",\"lastMessage\":\"User_lastMessage__1hlgj\",\"name\":\"User_name__2R3Cl\",\"off\":\"User_off__XjvUl\",\"on\":\"User_on__1XQfw\",\"country\":\"User_country__2T7Tr\",\"stars\":\"User_stars__3aZm4\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ResultCodeType } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = 'SN/AUTHME/SET-USER-DATA';\r\nconst IS_AUTH_ME = 'SN/AUTHME/IS-AUTH-ME';\r\nconst CAPTCHA = 'SN/AUTHME/CAPTCHA-SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuthMe: false as boolean | undefined,\r\n    checkbox: false,\r\n    captcha: null as string | null\r\n};\r\n\r\n\r\nconst authMe = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case IS_AUTH_ME:\r\n            return {\r\n                ...state,\r\n                isAuthMe: action.isAuthMe\r\n            }\r\n        case CAPTCHA: {\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMeSuccessThunk = (): ThunkType => async dispatch => {\r\n    let data = await authAPI.isAuthMe()\r\n    dispatch(actions.setUserData({ ...data.data }));\r\n    (data.resultCode === ResultCodeType.Success) && dispatch(actions.setAuthMe(true));\r\n}\r\n\r\n\r\nexport const putLoginPasswordThunk = (data: DataIsLoginType): ThunkType => async dispatch => {\r\n    let dataR = await authAPI.isLogin(data);\r\n    if (dataR.resultCode === 0) dispatch(authMeSuccessThunk());\r\n    else {\r\n        if (dataR.resultCode === 10) { dispatch(getCaptchaThunk()) }\r\n        let catchError = dataR.messages.length > 0 ? dataR.messages[0] : 'Some errors';\r\n        dispatch(stopSubmit('login', { _error: catchError }));\r\n    }\r\n\r\n}\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n    let dataR = await authAPI.isLogout();\r\n    (dataR.resultCode === 0) &&\r\n        dispatch(actions.setAuthMe(false));\r\n    dispatch(actions.setUserData({ ...dataR.data }));\r\n}\r\nconst getCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaURL();\r\n    dispatch(actions.setCaptcha(data.url))\r\n}\r\n\r\n\r\nexport default authMe;\r\n\r\n//types\r\ntype DataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuthMe?: boolean | undefined\r\n    captcha?: string | null\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\nexport type initialStateType = typeof initialState;\r\nexport const actions = {\r\n    setUserData: ({ id, login, email, isAuthMe, captcha = null }: DataType) => ({ type: SET_USER_DATA, data: { id, login, email, isAuthMe, captcha } } as const),\r\n    setAuthMe: (isAuthMe: boolean) => ({ type: IS_AUTH_ME, isAuthMe } as const),\r\n    setCaptcha: (captcha: string) => ({ type: CAPTCHA, captcha } as const)\r\n\r\n}\r\nexport type DataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\n\r\n","import zorroAva from './../assets/images/zorro.jpg';\r\nimport kuscherenkoAva from './../assets/images/kuscherenko.jpg';\r\nimport lyubovAva from './../assets/images/lyubov.jpg';\r\nimport { InferActionsType } from './redux-store';\r\n\r\nconst ADDMESSAGESTATE = 'SN/MESSAGES/ADD-MESSAGE-STATE';\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        { id: 1, message: 'злтщототолиолиг' },\r\n        { id: 2, message: 'Hello' },\r\n        { id: 3, message: 'Privet' },\r\n        { id: 4, message: 'Au revoir' }\r\n    ] as Array<MessagesDataType>,\r\n    dialogsUsersData: [\r\n        { id: 1, name: 'Zorro', ava: zorroAva },\r\n        { id: 2, name: 'Lyubov', ava: lyubovAva },\r\n        { id: 3, name: 'Kuscherenko', ava: kuscherenkoAva }\r\n    ] as Array<DialogsUsersDataType>\r\n};\r\n\r\nlet idNum = 5;\r\nlet messagesReducer = (state = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case ADDMESSAGESTATE:\r\n            idNum++;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {\r\n                    id: idNum,\r\n                    message: action.newMessageText\r\n                }]\r\n    }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageText: string) => ({ type: ADDMESSAGESTATE, newMessageText })\r\n}\r\n\r\nexport default messagesReducer;\r\n\r\n//types\r\nexport type MessagesDataType = {\r\n    id?: number\r\n    message: string\r\n};\r\nexport type DialogsUsersDataType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\n","\r\nlet initialState = {\r\n    friendsList: [\r\n        { id: 1, name: 'Zorro' },\r\n        { id: 2, name: 'Lyubov' },\r\n        { id: 3, name: 'Kuscherenko' }\r\n    ] as Array<FriendsList>\r\n};\r\n\r\n\r\nconst sideBarReducer = (state = initialState, action: any):initialStateType => {\r\n    return state;\r\n}\r\nexport default sideBarReducer;\r\n\r\n//types\r\nexport type FriendsList = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateType = typeof initialState","import { UsersDataType } from './../types/types';\r\nimport { usersAPI } from \"../api/api\";\r\nimport { BasicThunkType, InferActionsType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst DATA = 'SN/USERS/SETUSERS';\r\nconst CURPAGE = 'SN/USERS/CURPAGE';\r\nconst TOTALCOUNT = 'SN/USERS/TOTALCOUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLEIF';\r\nconst FOL_IS_FETCHING = 'SN/USERS/FOLISFETCH';\r\nconst SET_FILTER = 'SN/USERS/SET-FILTER-FOR-USERS';\r\n\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UsersDataType>,\r\n    currentPage: 1,\r\n    pageSize: 90,\r\n    totalCount: 10,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case DATA:\r\n            return {\r\n                ...state,\r\n                usersData: [...action.usersData]\r\n            };\r\n        case CURPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case TOTALCOUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            };\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.filter\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case FOL_IS_FETCHING:\r\n\r\n            let state02 = {\r\n                ...state,\r\n                followingInProgress: [...state.followingInProgress]\r\n            };\r\n\r\n            action.followingTF ?\r\n                state02.followingInProgress.push(action.userId) :\r\n                state02.followingInProgress = state02.followingInProgress.filter(userId => userId !== action.userId);\r\n\r\n            return state02;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    doUnfollow: (id: number) => ({ type: UNFOLLOW, id } as const),\r\n    doFollow: (id: number) => ({ type: FOLLOW, id } as const),\r\n    setUsers: (usersData: Array< UsersDataType >) => ({ type: DATA, usersData } as const),\r\n    setCurPage: (currentPage: number) => ({ type: CURPAGE, currentPage } as const),\r\n    setTotalCount: (totalCount: number) => ({ type: TOTALCOUNT, totalCount } as const),\r\n    setFilter: (filter: FilterType) => ({ type: SET_FILTER, filter } as const),\r\n    toggleFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const),\r\n    toggleFollowing: (followingTF: boolean, userId: number) => ({ type: FOL_IS_FETCHING, followingTF, userId } as const)\r\n}\r\n\r\n\r\nexport const setUsersThunk = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFetching(true));\r\n    dispatch(actions.setFilter(filter))\r\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalCount(data.totalCount));\r\n}\r\nexport const changeCurPageThunk = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCurPage(page));\r\n    dispatch(actions.toggleFetching(true));\r\n    let data = await usersAPI.changeCurPage(page, pageSize)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n}\r\n\r\nexport const unFollowThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.unFollowDeleteRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doUnfollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.followPostRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doFollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\nexport default usersReducer;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsType>","import { authMeSuccessThunk } from \"./authMe\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_INIT = 'SN/APP/SET-INITIALIZE';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nlet appInitialization = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INIT:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setInitialize: () => ({ type: SET_INIT } as const)\r\n}\r\n\r\nexport const setInitializeThunk = (): ThunkType => async dispatch => {\r\n    await dispatch(authMeSuccessThunk());\r\n    dispatch(actions.setInitialize());\r\n}\r\n\r\n\r\nexport default appInitialization;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsType>\r\ntype ActionsType = InferActionsType<typeof actions>","import authMe from \"./authMe\";\r\nimport messagesReducer from \"./messages-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sideBarReducer from \"./sideBar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appInitialization from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Action } from \"redux\";\r\n\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    authMe: authMe,\r\n    appInit: appInitialization,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\ntype InferValueType<T> = T extends {[key:string]: infer U}? U : never\r\nexport type InferActionsType<T extends {[key:string]: (...args: any) => any}> = ReturnType<InferValueType<T>>\r\nexport type BasicThunkType<A extends Action,R = Promise<void> > = ThunkAction<R, AppStateType, unknown, A>\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\n\r\nexport type BasicComponentType = React.ComponentType<{store: AppStateType}>\r\n","import React from 'react';\r\nimport cl from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n          <ActionLink/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ActionLink() {\r\n  function handleClick() {\r\n    // e.preventDefault();\r\n    console.log('По ссылке кликнули.');\r\n  }\r\n\r\n  return (\r\n    <a href=\"#\" onClick={handleClick}>\r\n      Нажми на меня\r\n    </a>\r\n  );\r\n}\r\n\r\n\r\nexport default News;","import React from 'react';\r\nimport cl from './Music.module.css';\r\n\r\nconst Music = () =>{\r\n    return(\r\n        <div>\r\n             Music\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport cl from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsUsersDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Dialog.module.css';\r\n\r\n\r\nconst Dialog = (props: DialogsUsersDataType) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={cl.dialog}>\r\n            <span> <img className={cl.avatar} src={props.ava} alt='ava' /> </span>\r\n            <NavLink to={path} activeClassName={cl.active}>  {props.name} </NavLink></div>);\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport { Field,  InjectedFormProps,  reduxForm } from 'redux-form';\r\nimport cl from './../Dialogs.module.css';\r\n\r\nexport type SendMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\nlet SendMessage: React.FC<InjectedFormProps<SendMessageType>> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newMessageText' type=\"text\" validate={[required, maxLength10]} component={InputComp} />\r\n            <button type=\"submit\" className={cl.sendMessage}>send</button>\r\n        </form>\r\n    </>;\r\n}\r\n\r\nexport const SendMessageRedux = reduxForm<SendMessageType>({ form: 'sendMessage' })(SendMessage);\r\n\r\nlet maxLength10 = maxLengthC(10);","import React from 'react';\r\nimport { MessagesDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Message.module.css';\r\n\r\n\r\n\r\nconst Message = (props: MessagesDataType) => {\r\n    return (<div className={cl.message}>{props.message}</div>);\r\n}\r\n\r\n\r\nexport default Message;","import React, { Dispatch } from 'react';\r\nimport { FormAction, InjectedFormProps, reset } from 'redux-form';\r\nimport Dialog from './Dialog/Dialog';\r\nimport cl from './Dialogs.module.css';\r\nimport { PropsType } from './DialogsContainer';\r\nimport { SendMessageRedux, SendMessageType } from './Form/SendMessageRedux';\r\nimport Message from './Message/Message';\r\n\r\nconst Dialogs: React.FC<InjectedFormProps<SendMessageType, PropsType> & PropsType> = (props) => {\r\n\r\n    let onSubmit = (formData: {newMessageText: string}, dispatch: Dispatch<FormAction> )=> {\r\n        props.sendMessage(formData.newMessageText)\r\n        dispatch(reset('sendMessage'))\r\n    }\r\n\r\n    let dialogsGenerate = props.dialogsGenerate.map(d => <Dialog key={d.id} name={d.name} id={d.id} ava={d.ava} />);\r\n    let messagesGenerate = props.messagesGenerate.map(m => <Message key={m.id} message={m.message} />);\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.dialogsItems}>\r\n                {dialogsGenerate}\r\n            </div>\r\n            <div className={cl.messages}>\r\n                {messagesGenerate}\r\n            </div>\r\n            <SendMessageRedux onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { actions } from '../../redux/messages-reducer';\r\nimport { AppStateType, BasicComponentType } from '../../redux/redux-store';\r\nimport DialogsContainerHOC from './Dialogs';\r\nimport { DialogsUsersDataType, MessagesDataType } from '../../redux/messages-reducer';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport { compose } from 'redux';\r\n\r\nexport type MapStateToPropsType = {\r\n    dialogsGenerate: Array<DialogsUsersDataType>\r\n    messagesGenerate: Array<MessagesDataType>\r\n    isAuthMe: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\n\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsGenerate: state.messagesPage.dialogsUsersData,\r\n        messagesGenerate: state.messagesPage.messagesData,\r\n        isAuthMe: state.authMe.isAuthMe\r\n    }\r\n}\r\n// authMeSuccess: authMeSuccessThunk\r\n// withAuthMe\r\nconst DialogsContainer = compose<BasicComponentType>(\r\n    connect<MapStateToPropsType,\r\n        MapDispatchToPropsType,\r\n        {}, AppStateType>\r\n        (mapStateToProps, { sendMessage: actions.sendMessage }),\r\n    withAuthMe)\r\n    (DialogsContainerHOC);\r\n\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { FriendsList, initialStateType } from '../../../redux/sideBar-reducer';\r\nimport cl from './Friends.module.css';\r\n\r\nconst Friends: React.FC<FriendsList> = (props) => {\r\n\r\n    return (\r\n        <div className={cl.friend}>\r\n            <div className={cl.avatar}></div>\r\n            <div className={cl.name}>{props.name}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;\r\n\r\n/* <img src={props.avatar} className={cl.avatar} alt='avatar'></img> */ ","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/sideBar-reducer';\r\nimport Friends from './Friends/Friends';\r\nimport cl from './Navbar.module.css';\r\n\r\nconst Navbar = (props: initialStateType) => {\r\n  \r\n    let friendsListComp = props.friendsList.map (  fff => <Friends key={fff.id} id={fff.id} name={fff.name}/>);\r\n    return (\r\n        <nav className={cl.nav}>\r\n            <div className={cl.item}><NavLink to='/profile' activeClassName={cl.active}>\r\n                Profile</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/dialogs' activeClassName={cl.active}>\r\n                Messages</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/news' activeClassName={cl.active}>\r\n                News</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/music' activeClassName={cl.active}>\r\n                Music</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/settings' activeClassName={cl.active}>\r\n                Settings</NavLink></div>\r\n            <div className={cl.item}> <NavLink to='/users' activeClassName={cl.active}>\r\n                Users</NavLink></div>\r\n\r\n\r\n            <div className={cl.friendsList}> <h3 className={cl.friendsNav}>FRIENDS</h3> {friendsListComp} </div>\r\n            \r\n        </nav>\r\n    );\r\n   \r\n}\r\n\r\nexport default Navbar;","import { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { initialStateType } from '../../redux/sideBar-reducer';\r\nimport Navbar from './Navbar';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): initialStateType=>({friendsList: state.sideBar.friendsList})\r\n\r\n\r\nconst NavbarContainer = connect(mapStateToProps,{})(Navbar);\r\n\r\n\r\nexport default NavbarContainer;","import { Field, Form, Formik, FormikHelpers } from 'formik';\r\nimport React from 'react';\r\nimport { FilterType } from '../../redux/users-reducer';\r\n\r\nconst SearchForm: React.FC<FormPropsType> = (props) => {\r\n    const onSubmit = (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n        debugger;\r\n        const valuesConverted = {\r\n            ...values,\r\n            friend: values.friend === 'null'\r\n                ? null\r\n                : values.friend === 'true'\r\n                    ? true\r\n                    : values.friend === 'false'\r\n                    && false\r\n        };\r\n        props.onFilterChange(valuesConverted);\r\n        setSubmitting(false);\r\n    }\r\n    //I need to fix this shit\r\n    const initialValuesForForm = props.filter as any ;\r\n    return (<div>\r\n        Search for your friends)\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValuesForForm}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n               </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default SearchForm\r\n\r\n//types\r\ntype FormType = {\r\n    term: string;\r\n    friend: 'null' | 'true' | 'false';\r\n};\r\ntype FormPropsType = {\r\n    onFilterChange: (filter: FilterType) => void;\r\n    filter: FilterType;\r\n};","import React from 'react';\r\nimport cl from './User.module.css';\r\nimport avaDefault from '../../../assets/images/zorro.jpg'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UsersDataType } from '../../../types/types';\r\nimport { PropsType } from '../Users';\r\n\r\nconst User: React.FC< OwnPropsType> = (props) => {\r\n    return (<>\r\n        <div className={cl.userItem}>\r\n            <NavLink to={'profile/' + props.user.id}><img className={cl.avatar}\r\n                src={props.user.photos.small != null ? props.user.photos.small : avaDefault}\r\n                alt='ava'></img>\r\n            </NavLink>\r\n\r\n            <div className={cl.country}>{\r\n                props.user.id % 3 === 0\r\n                    ? <div className={cl.off}>offline</div> : <div className={cl.on}>online</div>}</div>\r\n\r\n            <div className={cl.name}>{props.user.name}</div>\r\n            <div className={cl.stars}></div>\r\n            <div className={cl.lastMessage}>{props.user.status ? 'status: ' + props.user.status : '----'}</div>\r\n\r\n            <div>\r\n                {\r\n                    props.user.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            props.doUnfollow(props.user.id);\r\n\r\n                        }} className={cl.statusFollow}>UNFOLLOW</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            props.doFollow(props.user.id);\r\n\r\n                        }} className={cl.statusFollow}>FOLLOW</button>}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default User;\r\n\r\n\r\n//types\r\ntype OwnPropsType = {\r\n    user: UsersDataType\r\n    doFollow: (id: number) => void \r\n    doUnfollow: (id: number) => void \r\n    followingInProgress: Array<number>\r\n}","import React from 'react';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { UsersDataType } from '../../types/types';\r\nimport SearchForm from './FormType';\r\nimport User from './User/User';\r\nimport cl from './Users.module.css';\r\n\r\n\r\nexport type PropsType = {\r\n    usersGenerate: Array<UsersDataType>\r\n    doFollow: (id: number) => void \r\n    doUnfollow: (id: number) => void \r\n    followingInProgress: Array<number>\r\n    filter: FilterType\r\n    onFilterChange: (filter: FilterType) => void\r\n}\r\n\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <>\r\n        <div>\r\n        <SearchForm onFilterChange={props.onFilterChange} filter={props.filter}/>\r\n        </div>\r\n                <div className={cl.usersItem}>\r\n                    {props.usersGenerate.map((user) =>               \r\n                        <User key={user.id}\r\n                            user={user}\r\n                            doFollow={props.doFollow}\r\n                            doUnfollow={props.doUnfollow}\r\n                            followingInProgress={props.followingInProgress}\r\n                        />)}\r\n                </div>\r\n            </>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Users;\r\n\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersPage = (state: AppStateType) => { return state.usersPage };\r\n\r\nexport const getUsersData = createSelector(getUsersPage, (usersPage) => { return usersPage.usersData; });\r\nexport const getCurrentPage = createSelector(getUsersPage, (usersPage) => { return usersPage.currentPage });\r\nexport const getTotalCount = createSelector(getUsersPage, (usersPage) => { return usersPage.totalCount });\r\nexport const getPageSize = createSelector(getUsersPage, (usersPage) => { return usersPage.pageSize });\r\nexport const getIsFetching = createSelector(getUsersPage, (usersPage) => { return usersPage.isFetching });\r\nexport const getFollowingInProgress = createSelector(getUsersPage, (usersPage) => { return usersPage.followingInProgress });\r\nexport const getFilter = createSelector(getUsersPage, (usersPage) => { return usersPage.filter });","import React, { useState } from 'react';\r\nimport cl from './Pagination.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n\r\n    changeCurPage: (page: number) => void\r\n}\r\n\r\nlet Pagination = (props: PropsType) => {\r\n    \r\n    let portionSize = 5;\r\n    let pagesQuantity = Math.ceil(props.totalCount / props.pageSize);\r\n    let pA = [];\r\n    for (let i = 1; i <= pagesQuantity; i++) {\r\n        pA.push(i);\r\n    }\r\n\r\n\r\n    const [ currentPortion, setCurrentPortion ] = useState(1);\r\n    let portionNumber = Math.ceil(pagesQuantity / portionSize);\r\n    let leftBorder = ((currentPortion - 1) * portionSize) + 1;\r\n    let rightBorder = portionSize * currentPortion;\r\n \r\n    return (\r\n        <>\r\n            <div className={cn(cl.pages)}>\r\n                {currentPortion > 1 && <button onClick={() => setCurrentPortion(currentPortion-1)}>minus</button> }\r\n                {pA\r\n                .filter(page => page >= leftBorder && page <= rightBorder)\r\n                .map(page => {\r\n                    return (\r\n                        <span onClick={() => { props.changeCurPage(page) }} className={cn({[cl.pageSelected || cl.page]: props.currentPage === page}) } key={page}>{page} </span>\r\n                    );\r\n                })\r\n                }\r\n                {portionNumber > currentPortion && <button onClick={() => setCurrentPortion(currentPortion+1)}>plus</button> }\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Pagination;\r\n\r\n","import React, { Props } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeCurPageThunk, setUsersThunk, unFollowThunk, followThunk, FilterType, actions } from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getTotalCount, getUsersData, getFilter } from '../../redux/users-selectors';\r\nimport cl from './../Users/Users.module.css'\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport { UsersDataType } from '../../types/types';\r\nimport { AppStateType } from './../../redux/redux-store';\r\n\r\ntype StateType = {\r\n    onFilterChange: (filter: FilterType) => void\r\n}\r\n\r\n// React.Component<PropsType, StateType>\r\nclass UsersContainerClass extends React.Component<PropsType, StateType> {\r\n    componentDidMount() {\r\n        this.props.setUsers(this.props.currentPage, this.props.pageSize, this.props.filter)\r\n    }\r\n    \r\n    changeCurPage = (page: number) => {\r\n        this.props.setCurPage(page,this.props.pageSize)\r\n    }\r\n   componentWillUnmount(){// after component`s death it will be clean)\r\n    this.props.setUsers(this.props.currentPage, this.props.pageSize, {term: '', friend: null})\r\n   }\r\n    onFilterChange = (filter: FilterType) => {\r\n        this.props.setUsers(this.props.currentPage, this.props.pageSize, filter)\r\n    }\r\n    render() {\r\n        return <>\r\n        <div>{this.props.title}</div>\r\n        <div className={cl.userPage}>Choose your friends{this.props.isFetching && <span className={cl.preloader}><Preloader/></span>}</div>\r\n         <div className={cl.pagination}> <Pagination {...this.props} changeCurPage={this.changeCurPage} /> </div>\r\n        {!this.props.isFetching\r\n        && <Users\r\n            usersGenerate={this.props.usersGenerate}\r\n            doFollow={this.props.doFollow}\r\n            doUnfollow={this.props.doUnfollow}\r\n            onFilterChange={this.onFilterChange}\r\n            followingInProgress={this.props.followingInProgress}\r\n            filter={this.props.filter}\r\n                    />}\r\n            </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersGenerate: getUsersData(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalCount: getTotalCount(state),\r\n        pageSize: getPageSize(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        filter: getFilter(state)\r\n        \r\n    };\r\n}\r\n\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n// <ReturnType<typeof mapStateToProps>, MapDispatchToProps, OwnPropsType, AppStateType >\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType , AppStateType>(mapStateToProps, {\r\n    doFollow: followThunk,\r\n    doUnfollow: unFollowThunk,\r\n    setUsers: setUsersThunk,\r\n    setCurPage: changeCurPageThunk\r\n})(UsersContainerClass)\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    usersGenerate: Array<UsersDataType>\r\n    currentPage: number\r\n    totalCount: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    filter: FilterType\r\n}\r\n\r\n// usersGenerate, currentPage, totalCount, pageSize, isFetching\r\nexport type MapDispatchToPropsType = {\r\n    setUsers: (currentPage: number, pageSize: number, filter: FilterType) => void\r\n    setCurPage: (page: number, pageSize: number) => void\r\n    doFollow: (id: number) => void \r\n    doUnfollow: (id: number) => void\r\n}\r\nexport type OwnPropsType = {\r\n    title: string\r\n    user?: UsersDataType\r\n    store: AppStateType\r\n   \r\n}\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport cl from './Header.module.css';\r\nimport logo from './../../assets/startPage/logo2.jpg';\r\nimport { initialStateType } from '../../redux/authMe';\r\nimport { MapDispatchToProps } from './HeaderContainer';\r\n\r\n\r\ntype PropsType = {\r\n    isAuthMe: boolean\r\n}\r\n\r\nconst Header: React.FC<PropsType & MapDispatchToProps> =  (props) => {\r\n    return (<>\r\n        <header className={cl.header}>\r\n            <div className={cl.loginPhrase}>\r\n                {props.isAuthMe\r\n                    ? <div onClick={props.logout} className={cl.userLogin}>Click to logOut </div>\r\n                    : <div className={cl.logIn}><NavLink  to='login/'><div>Log In</div> </NavLink></div>\r\n                }\r\n            </div>\r\n            <div className={cl.name}>HellDream</div>\r\n            <div><img className={cl.logo} src={logo} alt=\"logo\" /></div>\r\n\r\n        </header>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { logoutThunk } from '../../redux/authMe';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Header from './Header';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {...state.authMe}\r\n}\r\n\r\nlet HeaderContainer = connect<MapStateToProps, MapDispatchToProps, {}, AppStateType >(mapStateToProps, {\r\n    logout: logoutThunk\r\n})(Header);\r\nexport default HeaderContainer;\r\n\r\ntype MapStateToProps = {\r\n    isAuthMe: boolean\r\n}\r\nexport type MapDispatchToProps = {\r\n    logout: () => void\r\n}\r\n","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../common/Validators/Validators';\r\nimport checker from './../common/InputChecker/InputChecker.module.css';\r\nimport { DataIsLoginType } from '../../redux/authMe';\r\n\r\nconst maxLength30 = maxLengthC(30);\r\n\r\ntype OwnPropsType = {\r\n    captcha: string | null\r\n}\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<DataIsLoginType, OwnPropsType> & OwnPropsType> = (props) => { \r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name='login' component={InputComp} type=\"text\" placeholder={'login'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='password' component={InputComp} type=\"text\" placeholder={'password'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='checkbox' component='input' type=\"checkbox\" />Remember Me</div>\r\n            {props.error && <div className={checker.commonError}> {props.error} </div>}\r\n            {props.captcha && <div><img src={props.captcha} /> \r\n             <Field name='symbols' component={InputComp} type=\"text\" placeholder={'symbols'} /> </div> }\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default reduxForm<DataIsLoginType, OwnPropsType>({ form: 'login' })(LoginForm);\r\n","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DataIsLoginType, putLoginPasswordThunk } from '../../redux/authMe';\r\nimport LoginForm from './LoginForm';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    authMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    isLogin: (data: DataIsLoginType) => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType;\r\nlet Login: React.FC<PropsType> = (props) => {\r\n    const onSubmit = (formData: DataIsLoginType) => {\r\n        props.isLogin(formData);\r\n    }\r\n    return <>\r\n        <div className={cl.starter}>LOGIN</div>\r\n        {props.authMe\r\n            ? <div >You are login successfully</div>\r\n            : <LoginForm onSubmit={onSubmit} captcha={props.captcha} />\r\n        }\r\n    </>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        authMe: state.authMe.isAuthMe,\r\n        captcha: state.authMe.captcha\r\n    }\r\n}\r\n\r\nlet LoginFormContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {store: AppStateType}, AppStateType>(mapStateToProps, {\r\n    isLogin: putLoginPasswordThunk\r\n})(Login);\r\n\r\nexport default LoginFormContainer;","import React, { ReactNode } from 'react';\r\nimport { Route, RouteComponentProps, RouteProps, Switch, useLocation, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport NavbarContainer from './components/Navbar/NavbarContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport LoginFormContainer from './components/Login/Login';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { setInitializeThunk } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { Suspense, lazy } from 'react';\r\n\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component<PropsType & {store: AppStateType} & RouteProps , {}> {\r\n\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occured')\r\n        //for dispatch a function for fix the global error\r\n        //handle error global\r\n    }\r\n    componentDidMount() {\r\n        this.props.setInitialize()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n\r\n    PostsComp = () =>   <Suspense fallback={<h1>Still Loading…</h1>}> <ProfileContainer store={this.props.store} /> </Suspense>\r\n    DialogsMessagesComp = () => <DialogsContainer store={this.props.store} />;\r\n    UsersComp = () => <UsersContainer store={this.props.store} title='UsersContainer' />;\r\n    LoginFormContainerCom = () => <LoginFormContainer store={this.props.store} />;\r\n    render() {\r\n        if (!this.props.initialized) { return <Preloader /> }\r\n        return (\r\n\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer />\r\n                <NavbarContainer />\r\n                <div className='app-wrapper-content'>\r\n                    <Switch>\r\n                        <Route path='/dialogs' render={this.DialogsMessagesComp} />\r\n                        <Route path='/profile/:userId?' render={this.PostsComp} />\r\n                        <Route path='/news' render={News} />\r\n                        <Route path='/music' render={Music} />\r\n                        <Route path='/settings' render={Settings} />\r\n                        <Route path='/users' render={this.UsersComp} />\r\n                        <Route path='/login' render={this.LoginFormContainerCom} />\r\n                        <Route path='*' render={() => <NoMatch />} />\r\n                    </Switch>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nlet NoMatch = () => {\r\n    let location = useLocation()\r\n    return (\r\n    <div>\r\n        {(location.pathname === '/') ? <div>StarterPage</div> : <div>No match</div>}\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return ({\r\n        initialized: state.appInit.initialized\r\n    })\r\n}\r\n\r\nlet AppMain = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType>(mapStateToProps, { setInitialize: setInitializeThunk })\r\n)(App)\r\n\r\nexport default AppMain\r\n\r\n//types\r\ntype PropsType = MapDispatchToPropsType & MapStateToPropsType\r\ntype OwnPropsType = {}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setInitialize: () => void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport AppMain from './App';\r\n\r\n\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n            <AppMain />\r\n            </HashRouter>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n// renderEntireTree(store.getState()); //вже викликаємо\r\n//redux не вертає state змінений, тож викликаємо анонімну функцію, яка отримає зміни і віддасть rerender\r\n// store.subscribe(() => {    переходить у власність виконання connect from  'react-redux'\r\n//     // let newState = store.getState();\r\n//     renderEntireTree();\r\n// });\r\n\r\nserviceWorker.unregister();\r\n","\r\ntype ValidatorsType = (value: null | string) => undefined | string\r\n\r\nexport const required: ValidatorsType = (value) => {\r\n   return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport let maxLengthC = (maxLen: number): ValidatorsType => (value) => {\r\n   return value && value.length < maxLen ? undefined : `${maxLen} is reached`} ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3b1l2\",\"name\":\"Header_name__wsK4x\",\"header\":\"Header_header__10dxk\",\"loginPhrase\":\"Header_loginPhrase__3mCng\",\"userLogin\":\"Header_userLogin__230Sn\",\"logIn\":\"Header_logIn__IbfsR\"};","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\nimport cl from './InputChecker.module.css';\r\n\r\ntype PropsType = {\r\n    placeholder: string\r\n}\r\n\r\nexport const InputComp: React.FC<WrappedFieldProps & PropsType>  = ({ input, meta, placeholder }) => {\r\n    return <>\r\n            <div className={(meta.error && meta.visited && !meta.active) && cl.error}>\r\n            <input  {...input} placeholder={placeholder}></input>\r\n        </div>\r\n        <span className={cl.messageError}>{(meta.visited && !meta.active) && meta.error}</span>\r\n    </>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2BwxY\",\"dialogsItems\":\"Dialogs_dialogsItems__5NlB3\",\"dialog\":\"Dialogs_dialog__39fd-\",\"message\":\"Dialogs_message__cuXq7\",\"active\":\"Dialogs_active__17luP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"Users_userPage__3pdtU\",\"butGET\":\"Users_butGET__3mBVF\",\"preloader\":\"Users_preloader__3ube4\",\"pagination\":\"Users_pagination__1ZtKZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"InputChecker_error__3bOFz\",\"messageError\":\"InputChecker_messageError__2L7eE\",\"commonError\":\"InputChecker_commonError__15Qry\"};","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport cl from './Preloader.module.css';\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={cl.divPreloader}>\r\n            <img className={cl.preloader} src={preloader} alt=\"preloader\" />\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","module.exports = __webpack_public_path__ + \"static/media/zorro.097a33ad.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3izJD\",\"active\":\"Dialog_active__1j-Og\",\"avatar\":\"Dialog_avatar__1n0LU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Friends_avatar__2iBkW\",\"friend\":\"Friends_friend__1Hlqs\",\"name\":\"Friends_name__YkjbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pagination_pages__3ksA0\",\"page\":\"Pagination_page__1iloC\",\"pageSelected\":\"Pagination_pageSelected__EFH4Z\"};"],"sourceRoot":""}