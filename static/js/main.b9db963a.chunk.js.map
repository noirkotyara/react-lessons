{"version":3,"sources":["assets/images/kuscherenko.jpg","assets/images/lyubov.jpg","components/Dialogs/Message/Message.module.css","components/common/Preloader/preloader.svg","components/Profile/MyPosts/Post/Post.module.css","assets/startPage/av.jpg","assets/images/sad.png","assets/images/happy.png","assets/startPage/logo2.jpg","components/Login/Login.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Users/User/User.module.css","components/News/News.tsx","api/api.ts","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/messages-reducer.ts","components/Dialogs/Dialog/Dialog.tsx","components/common/InputChecker/InputChecker.tsx","components/common/Validators/Validators.tsx","components/Dialogs/Form/SendMessageRedux.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/hoc/hoc.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","redux/users-reducer.ts","components/Users/User/User.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.jsx","redux/users-selectors.ts","components/common/Pagination/Pagination.tsx","components/Users/UsersContainer.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/Contacts.jsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileEditForm.jsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileInfoEdit.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/ProfileStatus/ProfileStatusHook.jsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.tsx","redux/authMe.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","redux/app-reducer.ts","App.js","serviceWorker.js","redux/sideBar-reducer.ts","redux/redux-store.ts","index.js","components/Profile/ProfileStatus/ProfileStatus.module.css","components/common/InputChecker/InputChecker.module.css","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","assets/images/zorro.jpg","components/Dialogs/Dialog/Dialog.module.css","components/Navbar/Friends/Friends.module.css","components/common/Pagination/Pagination.module.css","components/common/Preloader/Preloader.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["module","exports","ActionLink","href","onClick","console","log","News","ResultCodeType","Music","Settings","initialState","messagesData","id","message","dialogsUsersData","name","ava","zorroAva","lyubovAva","kuscherenkoAva","idNum","actions","sendMessage","newMessageText","type","messagesReducer","state","action","Dialog","props","path","className","cl","dialog","avatar","src","alt","to","activeClassName","active","InputComp","input","meta","placeholder","error","visited","messageError","required","value","undefined","maxLengthC","maxLen","length","SendMessageRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","maxLength10","component","Message","Dialogs","dialogsGenerate","map","d","key","messagesGenerate","m","dialogs","dialogsItems","messages","formData","dispatch","reset","withAuthMe","Component","this","isAuthMe","React","DialogsContainer","compose","connect","messagesPage","authMe","DialogsContainerHOC","Friends","friend","Navbar","friendsListComp","friendsList","fff","nav","item","friendsNav","NavbarContainer","sideBar","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","page","delete","post","authAPI","email","login","password","rememberMe","checkbox","captcha","symbols","userProfile","userID","status","put","file","FormData","append","profile","securityAPI","FOLLOW","UNFOLLOW","DATA","CURPAGE","usersData","totalCount","isFetching","followingInProgress","followingTF","userId","usersReducer","u","followed","state02","push","filter","User","userItem","user","photos","small","avaDefault","country","off","on","stars","lastMessage","disabled","some","doUnfollow","statusFollow","doFollow","Users","usersItem","usersGenerate","Preloader","divPreloader","preloader","getUsersPage","usersPage","getUsersData","createSelector","getCurrentPage","getTotalCount","getPageSize","getIsFetching","getFollowingInProgress","Pagination","pagesQuantity","Math","ceil","pA","i","useState","currentPortion","setCurrentPortion","portionNumber","leftBorder","rightBorder","pages","changeCurPage","pageSelected","UsersContainerClass","setCurPage","setUsers","title","userPage","pagination","a","resultCode","items","SETPROF","POSTF","postsData","likes","newPostText","setProfile","updateStatusAC","postForm","content","uploadPhoto","image","setProfileThunk","profileReducer","newPost","Post","maxLength20","FormMyPostR","addPost","MyPosts","postsGenerate","p","posts","MyPostsContainer","profilePage","socialIcons","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Contact","sIcon","property","Object","keys","forEach","socialIcon","fieldCreator","enableReinitialize","contactsArray","profileData","contacts","editData","checker","commonError","ProfileInfoEdit","owner","updateProfile","editMode","changeEditMode","initialValues","dataFlow","editButton","fullname","fullName","aboutMe","lookingForAJob","happy","sad","style","width","height","lookingForAJobDescription","ProfileInfo","memo","checkedAuth","photoFile","changePhotoFile","description","onDoubleClick","accept","onChange","e","target","files","ProfileStatusHook","setStatus","useEffect","editionVersion","onBlur","updateStatus","autoFocus","event","readyStatus","match","params","Profile","authorizedUser","store","ProfileContainer","refreshProfile","getStatus","prevProps","withRouter","authorized","Success","getState","stopSubmit","_error","Promise","reject","IS_AUTH_ME","CAPTCHA","authMeSuccessThunk","setUserData","setAuthMe","getCaptchaThunk","setCaptcha","url","Header","header","loginPhrase","logout","userLogin","logIn","logo","HeaderContainer","dataR","maxLength30","LoginFormContainer","isLogin","catchError","starter","SET_INIT","initialized","appInitialization","App","PostsComp","DialogsMessagesComp","UsersComp","UsersContainer","LoginFormContainerCom","setInitialize","render","AppMain","appInit","Boolean","window","location","hostname","sideBarReducer","require","createStore","combineReducers","applyMiddleware","formReducer","composeWithDevTools","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b9db963a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kuscherenko.7bc7e317.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lyubov.fc2a1a49.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__xSb92\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.c04e3ad7.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2DfE4\"};","module.exports = __webpack_public_path__ + \"static/media/av.3322ac59.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sad.f356e41d.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.ed41fce9.png\";","module.exports = __webpack_public_path__ + \"static/media/logo2.623bb4d9.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starter\":\"Login_starter__1tZcA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__kBj7q\",\"item\":\"Navbar_item__3Pa_F\",\"active\":\"Navbar_active__28OkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__3GDnK\",\"contacts\":\"ProfileInfo_contacts__37vHF\",\"socialIcon\":\"ProfileInfo_socialIcon__GBk5o\",\"editData\":\"ProfileInfo_editData__3bG9g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"User_userItem__4zQnk\",\"avatar\":\"User_avatar__39gSA\",\"lastMessage\":\"User_lastMessage__1hlgj\",\"name\":\"User_name__2R3Cl\",\"off\":\"User_off__XjvUl\",\"on\":\"User_on__1XQfw\",\"country\":\"User_country__2T7Tr\",\"stars\":\"User_stars__3aZm4\"};","import React from 'react';\r\nimport cl from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n          <ActionLink/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ActionLink() {\r\n  function handleClick() {\r\n    // e.preventDefault();\r\n    console.log('По ссылке кликнули.');\r\n  }\r\n\r\n  return (\r\n    <a href=\"#\" onClick={handleClick}>\r\n      Нажми на меня\r\n    </a>\r\n  );\r\n}\r\n\r\n\r\nexport default News;","import { ProfileType, UsersDataType } from './../types/types';\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"30bffa88-490b-405c-83b6-e6b58d235873\"\r\n    }\r\n});\r\n\r\ntype UsersAPIResponseType = {\r\n    items: Array<UsersDataType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type FollowUnfollowResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    changeCurPage(page: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    unFollowDeleteRequest(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data) as Promise<FollowUnfollowResponseType>\r\n    },\r\n    followPostRequest(id: number) {\r\n        return instance.post<FollowUnfollowResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n\r\nexport type DataIsAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type DataIsLoginType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodeType {\r\n    Success = 0,\r\n    Error = 10\r\n}\r\n\r\nexport type AuthAPIResponseType<dataType, ResultCodeType> = {\r\n    data: dataType\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\ntype dataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    isAuthMe() {\r\n        return instance.get<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    isLogin(data: dataIsLoginType) {\r\n        return instance.post<AuthAPIResponseType<DataIsLoginType, ResultCodeType>>\r\n            (`auth/login`, {\r\n                email: data.login,\r\n                password: data.password,\r\n                rememberMe: data.checkbox,\r\n                captcha: data.symbols\r\n            })\r\n            .then(response => { return response.data })\r\n    },\r\n    isLogout() {\r\n        return instance.delete<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/login`)\r\n            .then(response => { return response.data })\r\n    }\r\n}\r\n\r\n\r\nexport const userProfile = {\r\n    showProfile(userID: number) {\r\n        return instance.get<ProfileType>(`profile/${userID}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile/status`, { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`/profile/status/${userID}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    uploadPhoto(file: File) {\r\n        let formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<AuthAPIResponseType<{photos: string}, ResultCodeType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    updateProfile(profile: ProfileType ) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile`, profile)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n            .then(response => response.data);\r\n    }\r\n}","import React from 'react';\r\nimport cl from './Music.module.css';\r\n\r\nconst Music = () =>{\r\n    return(\r\n        <div>\r\n             Music\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport cl from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import zorroAva from './../assets/images/zorro.jpg';\r\nimport kuscherenkoAva from './../assets/images/kuscherenko.jpg';\r\nimport lyubovAva from './../assets/images/lyubov.jpg';\r\nimport { InferActionsType } from './redux-store';\r\n\r\nconst ADDMESSAGESTATE = 'SN/MESSAGES/ADD-MESSAGE-STATE';\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        { id: 1, message: 'злтщототолиолиг' },\r\n        { id: 2, message: 'Hello' },\r\n        { id: 3, message: 'Privet' },\r\n        { id: 4, message: 'Au revoir' }\r\n    ] as Array<MessagesDataType>,\r\n    dialogsUsersData: [\r\n        { id: 1, name: 'Zorro', ava: zorroAva },\r\n        { id: 2, name: 'Lyubov', ava: lyubovAva },\r\n        { id: 3, name: 'Kuscherenko', ava: kuscherenkoAva }\r\n    ] as Array<DialogsUsersDataType>\r\n};\r\n\r\nlet idNum = 5;\r\nlet messagesReducer = (state = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case ADDMESSAGESTATE:\r\n            idNum++;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {\r\n                    id: idNum,\r\n                    message: action.newMessageText\r\n                }]\r\n    }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageText: string) => ({ type: ADDMESSAGESTATE, newMessageText })\r\n}\r\n\r\nexport default messagesReducer;\r\n\r\n//types\r\nexport type MessagesDataType = {\r\n    id?: number\r\n    message: string\r\n};\r\nexport type DialogsUsersDataType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsUsersDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Dialog.module.css';\r\n\r\n\r\nconst Dialog = (props: DialogsUsersDataType) =>{\r\n    \r\n    let path = '/dialogs/' + props.id;\r\nreturn (\r\n<div className={cl.dialog}>\r\n            <span> <img className={cl.avatar} src={props.ava} alt='ava'/> </span>\r\n            <NavLink to={path} activeClassName={cl.active}>  {props.name} </NavLink></div>);\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\nimport cl from './InputChecker.module.css';\r\n\r\ntype PropsType = {\r\n    placeholder: string\r\n}\r\n\r\nexport const InputComp: React.FC<WrappedFieldProps & PropsType>  = ({ input, meta, placeholder }) => {\r\n    return <>\r\n            <div className={(meta.error && meta.visited && !meta.active) && cl.error}>\r\n            <input  {...input} placeholder={placeholder}></input>\r\n        </div>\r\n        <span className={cl.messageError}>{(meta.visited && !meta.active) && meta.error}</span>\r\n    </>\r\n}\r\n","\r\ntype ValidatorsType = (value: null | string) => undefined | string\r\n\r\nexport const required: ValidatorsType = (value) => {\r\n   return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport let maxLengthC = (maxLen: number): ValidatorsType => (value) => {\r\n   return value && value.length < maxLen ? undefined : `${maxLen} is reached`} ","import React from 'react';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport { Field,  InjectedFormProps,  reduxForm } from 'redux-form';\r\nimport cl from './../Dialogs.module.css';\r\n\r\nexport type SendMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\nlet SendMessage: React.FC<InjectedFormProps<SendMessageType>> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newMessageText' type=\"text\" validate={[required, maxLength10]} component={InputComp} />\r\n            <button type=\"submit\" className={cl.sendMessage}>send</button>\r\n        </form>\r\n    </>;\r\n}\r\n\r\nexport const SendMessageRedux = reduxForm<SendMessageType>({ form: 'sendMessage' })(SendMessage);\r\n\r\nlet maxLength10 = maxLengthC(10);","import React from 'react';\r\nimport { MessagesDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Message.module.css';\r\n\r\n\r\n\r\nconst Message = (props: MessagesDataType) =>{\r\n    return (\r\n    <div className={cl.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React, { Dispatch } from 'react';\r\nimport { InjectedArrayProps, InjectedFormProps, reset } from 'redux-form';\r\nimport { MessagesDataType } from '../../redux/messages-reducer';\r\nimport Dialog from './Dialog/Dialog';\r\nimport cl from './Dialogs.module.css';\r\nimport { PropsType } from './DialogsContainer';\r\nimport { SendMessageRedux, SendMessageType } from './Form/SendMessageRedux';\r\nimport Message from './Message/Message';\r\n\r\n\r\n////////////////////////////////////////////fix this shit any\r\nconst Dialogs: React.FC<InjectedFormProps<SendMessageType, PropsType> & PropsType> = (props) => {\r\n\r\n    let onSubmit = (formData: {newMessageText: string}, dispatch: any )=> {\r\n        props.sendMessage(formData.newMessageText);\r\n        dispatch(reset('sendMessage'));\r\n    }\r\n\r\n    let dialogsGenerate = props.dialogsGenerate.map(d => <Dialog key={d.id} name={d.name} id={d.id} ava={d.ava} />);\r\n    let messagesGenerate = props.messagesGenerate.map(m => <Message key={m.id} message={m.message} />);\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.dialogsItems}>\r\n                {dialogsGenerate}\r\n            </div>\r\n            <div className={cl.messages}>\r\n                {messagesGenerate}\r\n            </div>\r\n            <SendMessageRedux onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/authMe';\r\n\r\n\r\nexport let withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n    return class WrappedContainer extends React.Component<P & initialStateType> {\r\n\r\n        render() {\r\n             if (this.props.isAuthMe) return <Component {...this.props as P} /> \r\n             else return <Redirect to='/login'></Redirect>\r\n                \r\n            \r\n        }\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport { actions } from '../../redux/messages-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport DialogsContainerHOC from './Dialogs';\r\nimport { DialogsUsersDataType, MessagesDataType } from '../../redux/messages-reducer';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport { compose } from 'redux';\r\n\r\nexport type MapStateToPropsType = {\r\n    dialogsGenerate: Array<DialogsUsersDataType>\r\n    messagesGenerate: Array<MessagesDataType>\r\n    isAuthMe: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\n\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsGenerate: state.messagesPage.dialogsUsersData,\r\n        messagesGenerate: state.messagesPage.messagesData,\r\n        isAuthMe: state.authMe.isAuthMe\r\n    }\r\n}\r\n// authMeSuccess: authMeSuccessThunk\r\n// withAuthMe\r\nconst DialogsContainer = compose(\r\n    connect<MapStateToPropsType,\r\n        MapDispatchToPropsType,\r\n        {}, AppStateType>\r\n        (mapStateToProps, { sendMessage: actions.sendMessage }),\r\n    withAuthMe)\r\n    (DialogsContainerHOC);\r\n\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { FriendsList, initialStateType } from '../../../redux/sideBar-reducer';\r\nimport cl from './Friends.module.css';\r\n\r\nconst Friends: React.FC<FriendsList> = (props) => {\r\n\r\n    return (\r\n        <div className={cl.friend}>\r\n            <div className={cl.avatar}></div>\r\n            <div className={cl.name}>{props.name}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;\r\n\r\n/* <img src={props.avatar} className={cl.avatar} alt='avatar'></img> */ ","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/sideBar-reducer';\r\nimport Friends from './Friends/Friends';\r\nimport cl from './Navbar.module.css';\r\n\r\nconst Navbar = (props: initialStateType) => {\r\n  \r\n    let friendsListComp = props.friendsList.map (  fff => <Friends key={fff.id} id={fff.id} name={fff.name}/>);\r\n    return (\r\n        <nav className={cl.nav}>\r\n            <div className={cl.item}><NavLink to='/profile' activeClassName={cl.active}>\r\n                Profile</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/dialogs' activeClassName={cl.active}>\r\n                Messages</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/news' activeClassName={cl.active}>\r\n                News</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/music' activeClassName={cl.active}>\r\n                Music</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/settings' activeClassName={cl.active}>\r\n                Settings</NavLink></div>\r\n            <div className={cl.item}> <NavLink to='/users' activeClassName={cl.active}>\r\n                Users</NavLink></div>\r\n\r\n\r\n            <div className={cl.friendsList}> <h3 className={cl.friendsNav}>FRIENDS</h3> {friendsListComp} </div>\r\n            \r\n        </nav>\r\n    );\r\n   \r\n}\r\n\r\nexport default Navbar;","import { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { initialStateType } from '../../redux/sideBar-reducer';\r\nimport Navbar from './Navbar';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): initialStateType=>({friendsList: state.sideBar.friendsList})\r\n\r\n\r\nconst NavbarContainer = connect(mapStateToProps,{})(Navbar);\r\n\r\n\r\nexport default NavbarContainer;","import { UsersDataType } from './../types/types';\r\nimport { usersAPI } from \"../api/api\";\r\nimport { BasicThunkType, InferActionsType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst DATA = 'SN/USERS/SETUSERS';\r\nconst CURPAGE = 'SN/USERS/CURPAGE';\r\nconst TOTALCOUNT = 'SN/USERS/TOTALCOUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLEIF';\r\nconst FOL_IS_FETCHING = 'SN/USERS/FOLISFETCH';\r\n\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UsersDataType>,\r\n    currentPage: 1,\r\n    pageSize: 90,\r\n    totalCount: 10,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case DATA:\r\n            return {\r\n                ...state,\r\n                usersData: [...action.usersData]\r\n            };\r\n        case CURPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case TOTALCOUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case FOL_IS_FETCHING:\r\n\r\n            let state02 = {\r\n                ...state,\r\n                followingInProgress: [...state.followingInProgress]\r\n            };\r\n\r\n            action.followingTF ?\r\n                state02.followingInProgress.push(action.userId) :\r\n                state02.followingInProgress = state02.followingInProgress.filter(userId => userId !== action.userId);\r\n\r\n            return state02;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    doUnfollow: (id: number) => ({ type: UNFOLLOW, id } as const),\r\n    doFollow: (id: number) => ({ type: FOLLOW, id } as const),\r\n    setUsers: (usersData: Array< UsersDataType >) => ({ type: DATA, usersData } as const),\r\n    setCurPage: (currentPage: number) => ({ type: CURPAGE, currentPage } as const),\r\n    setTotalCount: (totalCount: number) => ({ type: TOTALCOUNT, totalCount } as const),\r\n    toggleFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const),\r\n    toggleFollowing: (followingTF: boolean, userId: number) => ({ type: FOL_IS_FETCHING, followingTF, userId } as const)\r\n}\r\n\r\n\r\nexport const setUsersThunk = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFetching(true));\r\n    let data = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalCount(data.totalCount));\r\n}\r\nexport const changeCurPageThunk = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCurPage(page));\r\n    dispatch(actions.toggleFetching(true));\r\n    let data = await usersAPI.changeCurPage(page, pageSize)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n}\r\n\r\nexport const unFollowThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.unFollowDeleteRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doUnfollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.followPostRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doFollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\nexport default usersReducer;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsType>","import React from 'react';\r\nimport cl from './User.module.css';\r\nimport avaDefault from '../../../assets/images/zorro.jpg'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { PropsType } from '../UsersContainer';\r\n\r\n\r\n\r\n\r\nconst User: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <> \r\n            <div className={cl.userItem}>\r\n                <NavLink to={'profile/' + props.user.id}><img className={cl.avatar}\r\n                    src={props.user.photos.small != null ? props.user.photos.small : avaDefault}\r\n                    alt='ava'></img>\r\n                </NavLink>\r\n\r\n    <div className={cl.country}>{props.user.id%3 === 0 \r\n    ? <div className={cl.off}>offline</div> : <div className={cl.on}>online</div> }</div>\r\n\r\n                <div className={cl.name}>{props.user.name}</div>\r\n                <div className={cl.stars}></div>\r\n    <div className={cl.lastMessage}>{props.user.status ? 'status: ' + props.user.status : '----'}</div>\r\n\r\n                <div>\r\n                    {\r\n                        props.user.followed\r\n                            ? <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                                props.doUnfollow(props.user.id);\r\n\r\n                            }} className={cl.statusFollow}>UNFOLLOW</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                                props.doFollow(props.user.id);\r\n\r\n                            }} className={cl.statusFollow}>FOLLOW</button>}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport { UsersDataType } from '../../types/types';\r\nimport User from './User/User';\r\nimport cl from './Users.module.css';\r\nimport {PropsType} from './UsersContainer';\r\n\r\n\r\n\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <>                \r\n                <div className={cl.usersItem}>\r\n                    {props.usersGenerate.map((user) =>\r\n                    // I need to fix this shit\r\n                //@ts-ignore\r\n                        <User key={user.id}\r\n                            user={user}\r\n                            doFollow={props.doFollow}\r\n                            doUnfollow={props.doUnfollow}\r\n                            followingInProgress={props.followingInProgress}\r\n                        />)}\r\n                </div>\r\n            </>\r\n    );\r\n\r\n}\r\n\r\nexport default Users;\r\n\r\n","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport cl from './Preloader.module.css';\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={cl.divPreloader}>\r\n            <img className={cl.preloader} src={preloader} alt=\"preloader\" />\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersPage = (state: AppStateType) => { return state.usersPage };\r\n\r\nexport const getUsersData = createSelector(getUsersPage, (usersPage) => { return usersPage.usersData; });\r\nexport const getCurrentPage = createSelector(getUsersPage, (usersPage) => { return usersPage.currentPage });\r\nexport const getTotalCount = createSelector(getUsersPage, (usersPage) => { return usersPage.totalCount });\r\nexport const getPageSize = createSelector(getUsersPage, (usersPage) => { return usersPage.pageSize });\r\nexport const getIsFetching = createSelector(getUsersPage, (usersPage) => { return usersPage.isFetching });\r\nexport const getFollowingInProgress = createSelector(getUsersPage, (usersPage) => { return usersPage.followingInProgress });","import React, { useState } from 'react';\r\nimport cl from './Pagination.module.css';\r\n\r\ntype PropsType = {\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n\r\n    changeCurPage: (page: number) => void\r\n}\r\n\r\nlet Pagination = (props: PropsType) => {\r\n    \r\n    let portionSize = 5;\r\n    let pagesQuantity = Math.ceil(props.totalCount / props.pageSize);\r\n    let pA = [];\r\n    for (let i = 1; i <= pagesQuantity; i++) {\r\n        pA.push(i);\r\n    }\r\n\r\n\r\n    const [ currentPortion, setCurrentPortion ] = useState(1);\r\n    let portionNumber = Math.ceil(pagesQuantity / portionSize);\r\n    let leftBorder = ((currentPortion - 1) * portionSize) + 1;\r\n    let rightBorder = portionSize * currentPortion;\r\n \r\n    return (\r\n        <>\r\n            <div className={cl.pages}>\r\n                {currentPortion > 1 && <button onClick={() => setCurrentPortion(currentPortion-1)}>minus</button> }\r\n                {pA\r\n                .filter(page => page >= leftBorder && page <= rightBorder)\r\n                .map(page => {\r\n                    return (\r\n                        <span  onClick={() => { props.changeCurPage(page) }} className={props.currentPage === page && cl.pageSelected || cl.page} key={page}>{page} </span>\r\n                    );\r\n                })\r\n                }\r\n                {portionNumber > currentPortion && <button onClick={() => setCurrentPortion(currentPortion+1)}>plus</button> }\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Pagination;\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeCurPageThunk, setUsersThunk, unFollowThunk, followThunk } from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getTotalCount, getUsersData } from '../../redux/users-selectors';\r\nimport cl from './../Users/Users.module.css'\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport { UsersDataType } from '../../types/types';\r\nimport { AppStateType } from './../../redux/redux-store';\r\n\r\nexport type MapStateToPropsType = {\r\n    usersGenerate: Array<UsersDataType>\r\n    currentPage: number\r\n    totalCount: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n// usersGenerate, currentPage, totalCount, pageSize, isFetching\r\nexport type MapDispatchToPropsType = {\r\n    setUsers: (currentPage: number, pageSize: number) => void\r\n    setCurPage: (page: number, pageSize: number) => void\r\n    doFollow: (id: number) => void \r\n    doUnfollow: (id: number) => void \r\n}\r\nexport type OwnPropsType = {\r\n    title: string\r\n    user: UsersDataType\r\n}\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\n\r\n// React.Component<PropsType, StateType>\r\nclass UsersContainerClass extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.setUsers(this.props.currentPage, this.props.pageSize);\r\n\r\n    }\r\n    changeCurPage = (page: number) => {\r\n        this.props.setCurPage(page,this.props.pageSize);\r\n    }\r\n    render() {\r\n        return <>\r\n        <div>{this.props.title}</div>\r\n        <div className={cl.userPage}>Choose your friends{this.props.isFetching && <span className={cl.preloader}><Preloader/></span>}</div>\r\n         <div className={cl.pagination}> <Pagination {...this.props} changeCurPage={this.changeCurPage} /> </div>\r\n        {!this.props.isFetching\r\n        && <Users {...this.props}/>}\r\n            </>\r\n    }\r\n}\r\n\r\n// usersGenerate, currentPage, totalCount, pageSize, isFetching\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersGenerate: getUsersData(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalCount: getTotalCount(state),\r\n        pageSize: getPageSize(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n        \r\n    };\r\n}\r\n\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n// <ReturnType<typeof mapStateToProps>, MapDispatchToProps, OwnPropsType, AppStateType >\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType >(mapStateToProps, {\r\n    doFollow: followThunk,\r\n    doUnfollow: unFollowThunk,\r\n    setUsers: setUsersThunk,\r\n    setCurPage: changeCurPageThunk\r\n})(UsersContainerClass);\r\n","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ResultCodeType, userProfile } from \"../api/api\";\r\nimport { ProfileType } from \"../types/types\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SETPROF = 'SN/PROFILE/SET-PROFILE';\r\nconst UPDATESTATUS = 'SN/PROFILE/SET-STATUS';\r\nconst POSTF = 'SN/PROFILE/POST-FORM-newPostText';\r\nconst UPLOAD_PHOTO = 'SN/PROFILE/UPLOAD-PHOTO';\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        { id: 1, message: 'Hello', likes: 15 },\r\n        { id: 2, message: 'Bonjour', likes: 30 },\r\n        { id: 3, message: 'Привет', likes: 15000 },\r\n    ] as Array<PostsDataType>,\r\n    newPostText: '',\r\n    profile: null as object | null,\r\n    status: 'no status'\r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POSTF:\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.content,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case SETPROF:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case UPLOAD_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.image }\r\n            }\r\n        case UPDATESTATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType) => ({ type: SETPROF, profile } as const),\r\n    updateStatusAC: (status: string) => ({ type: UPDATESTATUS, status } as const),\r\n    postForm: (content: string) => ({ type: POSTF, content } as const),\r\n    uploadPhoto: (image: string) => ({ type: UPLOAD_PHOTO, image } as const)\r\n}\r\n\r\nexport const setProfileThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.showProfile(userID);\r\n    dispatch(actions.setProfile(data));\r\n}\r\n\r\nexport const setStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.updateStatus(status);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.updateStatusAC(status))\r\n\r\n}\r\nexport const getStatusThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.getStatus(userID)\r\n    dispatch(actions.updateStatusAC(data));\r\n}\r\n\r\nexport const uploadPhotoThunk = (image: File): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.uploadPhoto(image);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.uploadPhoto(data.data.photos));\r\n}\r\n\r\nexport const updateProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await userProfile.updateProfile(profile);\r\n    if (data.resultCode === 0) dispatch(setProfileThunk(getState().authMe.id))\r\n    else {\r\n        if (data.messages.length > 0) {\r\n            dispatch(stopSubmit('editProfile', { _error: data.messages }))\r\n            return Promise.reject(data.messages)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n//types \r\ntype PostsDataType = {\r\n    id: number,\r\n    message: string\r\n    likes: number\r\n};\r\n\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>","import React from 'react';\r\nimport cl from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={cl.item}>\r\n\r\n            <img src=\"https://static.tildacdn.com/tild3538-3762-4936-b162-656163363764/Icon.png\" alt=\"avatar\" />\r\n            <span>{props.message}</span>\r\n            <div>\r\n    <div>Likes --&gt; {props.likes}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport cl from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nlet maxLength20 = maxLengthC(20);\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    let postsGenerate = props.postsGenerate.map(p => <Post key={p.id} message={p.message} likes={p.likes} />);\r\n    let onSubmit = (formData) => {\r\n        props.postForm(formData.newPostText);\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <FormMyPostR {...props} onSubmit={onSubmit} />\r\n\r\n            <div className={cl.posts}>\r\n                {postsGenerate}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nlet FormMyPost = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={InputComp} name='newPostText' type=\"text\" validate={[required, maxLength20]} placeholder={'Write your post here...'} />\r\n            <button type=\"submit\" className={cl.addPost}>Add post</button>\r\n        </form>\r\n    </>\r\n}\r\n\r\nlet FormMyPostR = reduxForm({\r\n    form: 'post'\r\n})(FormMyPost);\r\n\r\nexport default MyPosts;","\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsGenerate: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, {postForm: actions.postForm})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport cl from './ProfileInfo.module.scss';\r\n\r\nconst socialIcons = {\r\n    facebook: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111393.svg',\r\n    website: 'https://www.flaticon.com/svg/static/icons/svg/2847/2847798.svg',\r\n    vk: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111712.svg',\r\n    twitter: 'https://www.flaticon.com/svg/static/icons/svg/733/733579.svg',\r\n    instagram: 'https://www.flaticon.com/svg/static/icons/svg/174/174855.svg',\r\n    youtube: 'https://www.flaticon.com/svg/static/icons/svg/1384/1384060.svg',\r\n    github: 'https://www.flaticon.com/svg/static/icons/svg/733/733553.svg',\r\n    mainLink: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111644.svg'\r\n\r\n};\r\n\r\n\r\nconst Contact = ({ property, value }) => {\r\n    let sIcon;\r\n   let socialChoosed = Object.keys(socialIcons).forEach(key => { if(key===property)  sIcon = socialIcons[key]});\r\n    return (<>\r\n        {value\r\n            && <span><a href={value}><img className={cl.socialIcon}\r\n                    src={sIcon} alt=\"\" /></a>\r\n                 </span>\r\n            \r\n            \r\n            }\r\n{/* <div>{property} : {value}</div> */}\r\n    </>)\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../../../common/InputChecker/InputChecker';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport checker from './../../../common/InputChecker/InputChecker.module.css';\r\nconst ProfileEditForm = (props) => {\r\n    let contactsArray = Object.keys(props.profileData.contacts).map(key => {\r\n        return <div key={key}>{fieldCreator('contacts.' + key , InputComp, 'text' )}</div>\r\n    })\r\n\r\n        return (<form onSubmit={props.handleSubmit} className={cl.editData}>\r\n            <div>{props.error\r\n            && <div className={checker.commonError}> {props.error} </div>}</div>\r\n        <div>Here is our form for editing</div>\r\n        <div> Your full name: {fieldCreator('fullName', InputComp, 'text')} </div>\r\n        <div> About me: {fieldCreator('aboutMe', InputComp, 'text' )} </div>\r\n\r\n        <div> {fieldCreator('lookingForAJob', 'input', 'checkbox')} Looking for a job?</div>\r\n        <div> Description: {fieldCreator('lookingForAJobDescription', InputComp, 'text' )} </div>\r\n        <div> Contacts: {contactsArray} </div>\r\n        <button>Save changes</button>\r\n        \r\n        </form>\r\n        );\r\n}\r\n\r\nlet fieldCreator = (name, component, type, validate = []) => {\r\n    return (<Field name={name} component={component} type={type} placeholder={name} validate={validate}></Field>)\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'editProfile',\r\n    enableReinitialize: true\r\n})(ProfileEditForm);","import React, { useState } from 'react';\r\nimport Contact from '../Contacts';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nimport sad from '../../../../assets/images/sad.png';\r\nimport happy from '../../../../assets/images/happy.png';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport { reset } from 'redux-form';\r\n\r\nconst ProfileInfoEdit = ({ owner, profileData, updateProfile }) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let onSubmit = (dataFlow, dispatch) => {\r\n        let promise = updateProfile(dataFlow);\r\n        promise.then(() => changeEditMode(false));\r\n        dispatch(reset('editProfile'));\r\n\r\n    }\r\n    return (<>\r\n        <div>\r\n            {\r\n                (editMode && owner)\r\n                    ? <ProfileEditForm\r\n                        initialValues={profileData}\r\n                        profileData={profileData}\r\n                        onSubmit={onSubmit} />\r\n                    : owner &&\r\n                    <div>\r\n                        <button className={cl.editButton} onClick={() => changeEditMode(true)}>Edit Profile</button>\r\n                        <div className={cl.fullname}>{profileData.fullName}</div>\r\n                        <div className={cl.aboutMe}>{profileData.aboutMe}</div>\r\n                        <div className={cl.contacts}>\r\n                            {Object.keys(profileData.contacts).map((key) => {\r\n                                return <Contact key={key} property={key} value={profileData.contacts[key]} />\r\n                            })\r\n                            }\r\n                        </div>\r\n\r\n                        <div>lookingForAJob:  <img src={profileData.lookingForAJob ? happy : sad} style={{ width: '50px', height: '50px' }} alt=\"\"></img> </div>\r\n                        <div>Description: {profileData.lookingForAJobDescription}</div>\r\n\r\n                    </div>\r\n            }\r\n        </div>\r\n    </>)\r\n}\r\nexport default ProfileInfoEdit;","import React from 'react';\r\nimport cl from './ProfileInfo.module.scss';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { useState } from 'react';\r\nimport avaDefault from './../../../assets/startPage/av.jpg';\r\nimport ProfileInfoEdit from './ProfileInfoEdit/ProfileInfoEdit';\r\n\r\n\r\n\r\n\r\nconst ProfileInfo = React.memo((props) => {\r\n  \r\n    const { checkedAuth, profileData, uploadPhoto, userId, updateProfile } = props;\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [photoFile, changePhotoFile] = useState('');\r\n    if (!props.profileData) {\r\n        return <Preloader />\r\n    }\r\n    let choosePhotoEdition = () => {\r\n        changeEditMode(true);\r\n    }\r\n    let choosedPhoto = (file) => {\r\n        changePhotoFile(file);\r\n    }\r\n    let uploadPhotoPreparation = () => {\r\n        uploadPhoto(photoFile);\r\n        changeEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <div className={cl.description}>\r\n\r\n                {(editMode && (checkedAuth === userId || !userId))\r\n                    ? (<div>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={(e) => choosedPhoto(e.target.files[0])} />\r\n                        <input onClick={uploadPhotoPreparation} type=\"button\" value='Upload' />\r\n                    </div>)\r\n                    :\r\n                    <img style={{ width: '100px', height: '100px' }} src={profileData.photos.small ? profileData.photos.small : avaDefault} alt=\"avatar\" onDoubleClick={choosePhotoEdition} />\r\n                }\r\n                <ProfileInfoEdit\r\n                    owner={checkedAuth === userId || !userId}\r\n                    profileData={profileData}\r\n                    updateProfile={updateProfile} />\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport cl from './ProfileStatus.module.css';\r\n\r\n\r\n let ProfileStatusHook = (props) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [status,setStatus] = useState(props.status);\r\n\r\n\r\n    let editStatus = () =>  changeEditMode(true);\r\n    let onChange = (event) => setStatus(event.target.value);\r\n    \r\n   useEffect(() => { setStatus(props.status)},[props.status]);\r\n\r\n    let readyStatus = () => {\r\n        changeEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n  \r\n        return (\r\n            <div className={cl.content}>\r\n                <span className={cl.status}>Status:</span>\r\n                { \r\n            \r\n                    editMode\r\n                    ? <div className={cl.editionVersion}>\r\n                        <input onBlur={readyStatus} autoFocus={true} type=\"text\" value={status} onChange={onChange} ></input>\r\n                    </div>\r\n                    : <div >\r\n                        <span className={cl.readyStatus} \r\n                        onDoubleClick={() => (!props.match.params.userId) \r\n                        ? editStatus() \r\n                        : false}>{props.status || '---------'}</span> \r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default ProfileStatusHook;\r\n","import React, { ChangeEvent } from 'react';\r\nimport cl from './ProfileStatus.module.css';\r\n\r\ntype PropsType ={\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\n\r\nclass ProfileStatus extends React.Component<PropsType & StateType> {\r\n    state = {\r\n            editMode: false,\r\n            status: this.props.status\r\n        }\r\n    editStatus = () => {\r\n        console.log(this.state.status)\r\n        this.setState({ editMode: true });\r\n    }\r\n    onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: event.target.value})\r\n    }\r\n    \r\n    componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n        if(this.props.status !== prevProps.status){\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n    readyStatus = () => {\r\n        this.setState({ editMode: false });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={cl.content}>\r\n                <span className={cl.status}>Status:</span>\r\n                {this.state.editMode\r\n                    ? <div className={cl.editionVersion}>\r\n                        <input onBlur={this.readyStatus} autoFocus={true} type=\"text\" value={this.state.status} onChange={this.onChange} ></input>\r\n                    </div>\r\n                    : <div >\r\n                        <span className={cl.readyStatus} onDoubleClick={this.editStatus}>{this.props.status || '---------'}</span> \r\n                       \r\n                    </div>}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport cl from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'; //class component\r\nimport ProfileStatusHook from './ProfileStatus/ProfileStatusHook';\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <ProfileInfo\r\n                profileData={props.profile}\r\n                userId={props.match.params.userId}\r\n                uploadPhoto={props.uploadPhoto}\r\n                checkedAuth={props.authorizedUser}\r\n                updateProfile={props.updateProfile} />\r\n\r\n            <ProfileStatusHook {...props} />\r\n            <MyPostsContainer store={props.store} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getStatusThunk, actions, setProfileThunk, setStatusThunk, updateProfileThunk, uploadPhotoThunk } from '../../redux/profile-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport Profile from './Profile';\r\n\r\ntype MapStateToPropsRedirectType = {\r\n     isAuthMe: boolean\r\n}\r\n\r\ntype MapStateToPropsType =  {\r\n        profile: ProfileType\r\n        status: string\r\n        authorizedUser: number\r\n        authorized: boolean\r\n}\r\n\r\ntype StateType = {\r\n\r\n}\r\ntype PropsType = MapStateToPropsRedirectType & MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps\r\n\r\nclass ProfileContainer extends React.Component<PropsType, StateType> {\r\n  refreshProfile = () => {\r\n      //@ts-ignore\r\n        let userID = this.props.match.params.userId;\r\n        if(!userID){\r\n            userID = this.props.authorizedUser;\r\n            if(!userID) return<Preloader/>\r\n        } \r\n        this.props.setProfile(userID);\r\n        this.props.getStatus(userID);\r\n  }\r\n    componentDidMount() {  \r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps: PropsType){\r\n        //@ts-ignore\r\n        if (prevProps.match.params.userId != this.props.match.params.userId){\r\n        this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n        return <Profile {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsRedirectType => {\r\n    return { isAuthMe: state.authMe.isAuthMe }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUser: state.authMe.id,\r\n        authorized: state.authMe.isAuthMe\r\n    }\r\n}\r\n// <P extends RouteComponentProps<any>, C extends React.ComponentType<P>>\r\ntype MapDispatchToPropsType = {\r\n        setProfile: (userID: number) => void\r\n        updateStatus: () => void\r\n        getStatus: (userID: number) => void\r\n        postForm: () => void\r\n        uploadPhoto: () => void\r\n        updateProfile: () => void\r\n}\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        setProfile: setProfileThunk,\r\n        updateStatus: setStatusThunk,\r\n        getStatus: getStatusThunk,\r\n        postForm: actions.postForm,\r\n        uploadPhoto: uploadPhotoThunk,\r\n        updateProfile: updateProfileThunk\r\n    }),\r\n    connect(mapStateToPropsRedirect, {}),\r\n    withAuthMe\r\n)(ProfileContainer);\r\n\r\n","import { ResultCodeType } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = 'SN/AUTHME/SET-USER-DATA';\r\nconst IS_AUTH_ME = 'SN/AUTHME/IS-AUTH-ME';\r\nconst CAPTCHA = 'SN/AUTHME/CAPTCHA-SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuthMe: false as boolean | undefined,\r\n    checkbox: false,\r\n    captcha: null as string | null\r\n};\r\n\r\n\r\nconst authMe = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case IS_AUTH_ME:\r\n            return {\r\n                ...state,\r\n                isAuthMe: action.isAuthMe\r\n            }\r\n        case CAPTCHA: {\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMeSuccessThunk = (): ThunkType => async dispatch => {\r\n    let data = await authAPI.isAuthMe()\r\n    dispatch(actions.setUserData({ ...data.data }));\r\n    (data.resultCode === ResultCodeType.Success) && dispatch(actions.setAuthMe(true));\r\n}\r\n\r\n\r\nexport const putLoginPasswordThunk = (data: DataIsLoginType): ThunkType => async dispatch => {\r\n    let dataR = await authAPI.isLogin(data);\r\n    if (dataR.resultCode === 0) dispatch(authMeSuccessThunk());\r\n    else {\r\n        if (dataR.resultCode === 10) { dispatch(getCaptchaThunk()) }\r\n        let catchError = dataR.messages.length > 0 ? dataR.messages[0] : 'Some errors';\r\n        dispatch(stopSubmit('login', { _error: catchError }));\r\n    }\r\n\r\n}\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n    let dataR = await authAPI.isLogout();\r\n    (dataR.resultCode === 0) &&\r\n        dispatch(actions.setAuthMe(false));\r\n    dispatch(actions.setUserData({ ...dataR.data }));\r\n}\r\nconst getCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaURL();\r\n    dispatch(actions.setCaptcha(data.url))\r\n}\r\n\r\n\r\nexport default authMe;\r\n\r\n//types\r\ntype DataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuthMe?: boolean | undefined\r\n    captcha?: string | null\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\nexport type initialStateType = typeof initialState;\r\nexport const actions = {\r\n    setUserData: ({ id, login, email, isAuthMe, captcha = null }: DataType) => ({ type: SET_USER_DATA, data: { id, login, email, isAuthMe, captcha } } as const),\r\n    setAuthMe: (isAuthMe: boolean) => ({ type: IS_AUTH_ME, isAuthMe } as const),\r\n    setCaptcha: (captcha: string) => ({ type: CAPTCHA, captcha } as const)\r\n\r\n}\r\nexport type DataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport cl from './Header.module.css';\r\nimport logo from './../../assets/startPage/logo2.jpg';\r\nimport { initialStateType } from '../../redux/authMe';\r\n\r\ntype AllPropsType = initialStateType & {logout: () => void} ;\r\n\r\nconst Header = (props: AllPropsType) => {\r\n    return (<>\r\n        <header className={cl.header}>\r\n            <div className={cl.loginPhrase}>\r\n                {props.isAuthMe\r\n                    ? <div onClick={props.logout} className={cl.userLogin}>Click to logOut </div>\r\n                    : <div className={cl.logIn}><NavLink  to='login/'><div>Log In</div> </NavLink></div>\r\n                }\r\n            </div>\r\n            <div className={cl.name}>HellDream</div>\r\n            <div><img className={cl.logo} src={logo} alt=\"logo\" /></div>\r\n\r\n        </header>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { initialStateType, logoutThunk } from '../../redux/authMe';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Header from './Header';\r\n\r\nlet mapStateToProps = (state: AppStateType): initialStateType => {\r\n    return {...state.authMe}\r\n}\r\n\r\nlet HeaderContainer = connect<initialStateType>(mapStateToProps, {\r\n    logout: logoutThunk\r\n})(Header);\r\nexport default HeaderContainer;","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../common/Validators/Validators';\r\nimport checker from './../common/InputChecker/InputChecker.module.css';\r\nimport { DataIsLoginType } from '../../redux/authMe';\r\n\r\nconst maxLength30 = maxLengthC(30);\r\n\r\ntype OwnPropsType = {\r\n    captcha: string | null\r\n}\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<DataIsLoginType, OwnPropsType> & OwnPropsType> = (props) => { \r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name='login' component={InputComp} type=\"text\" placeholder={'login'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='password' component={InputComp} type=\"text\" placeholder={'password'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='checkbox' component='input' type=\"checkbox\" />Remember Me</div>\r\n            {props.error && <div className={checker.commonError}> {props.error} </div>}\r\n            {props.captcha && <div><img src={props.captcha} /> \r\n             <Field name='symbols' component={InputComp} type=\"text\" placeholder={'symbols'} /> </div> }\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default reduxForm<DataIsLoginType, OwnPropsType>({ form: 'login' })(LoginForm);\r\n","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { DataIsLoginType, putLoginPasswordThunk } from '../../redux/authMe';\r\nimport LoginForm from './LoginForm';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    authMe: boolean\r\n    captcha: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    isLogin: (data: DataIsLoginType) => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType;\r\nlet Login: React.FC<PropsType> = (props) => {\r\n    const onSubmit = (formData: DataIsLoginType) => {\r\n        props.isLogin(formData);\r\n    }\r\n    return <>\r\n        <div className={cl.starter}>LOGIN</div>\r\n        {props.authMe\r\n            ? <div >You are login successfully</div>\r\n            : <LoginForm onSubmit={onSubmit} captcha={props.captcha} />\r\n        }\r\n    </>\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        authMe: state.authMe.isAuthMe,\r\n        captcha: state.authMe.captcha\r\n    }\r\n}\r\n\r\nlet LoginFormContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(mapStateToProps, {\r\n    isLogin: putLoginPasswordThunk\r\n})(Login);\r\n\r\nexport default LoginFormContainer;","import { authMeSuccessThunk } from \"./authMe\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_INIT = 'SN/APP/SET-INITIALIZE';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nlet appInitialization = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INIT:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setInitialize: () => ({ type: SET_INIT } as const)\r\n}\r\n\r\nexport const setInitializeThunk = (): ThunkType => async dispatch => {\r\n    await dispatch(authMeSuccessThunk());\r\n    dispatch(actions.setInitialize());\r\n}\r\n\r\n\r\nexport default appInitialization;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsType>\r\ntype ActionsType = InferActionsType<typeof actions>","import React from 'react';\r\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport NavbarContainer from './components/Navbar/NavbarContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport LoginFormContainer from './components/Login/Login';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { setInitializeThunk } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\n\r\n\r\nclass App extends React.Component {\r\n    \r\ncomponentDidMount(){\r\n        this.props.setInitialize();\r\n}\r\n    PostsComp = () => <ProfileContainer store={this.props.store} />;\r\n    DialogsMessagesComp = () => <DialogsContainer store={this.props.store} />;\r\n    UsersComp = () => <UsersContainer store={this.props.store} title='UsersContainer'/>;\r\n    LoginFormContainerCom = () => <LoginFormContainer store={this.props.store} />;\r\n    render() {\r\n        if(!this.props.initialized){ return <Preloader/>}\r\n        return (\r\n            \r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer />\r\n                    <NavbarContainer />\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/dialogs' render={this.DialogsMessagesComp} />\r\n                        <Route path='/profile/:userId?' render={this.PostsComp} />\r\n                        <Route path='/news' render={News} />\r\n                        <Route path='/music' render={Music} />\r\n                        <Route path='/settings' render={Settings} />\r\n                        <Route path='/users' render={this.UsersComp} />\r\n                        <Route path='/login' render={this.LoginFormContainerCom} />\r\n                    </div>\r\n\r\n                </div>\r\n           \r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        initialized: state.appInit.initialized\r\n    })\r\n}\r\n\r\nlet AppMain = compose(\r\n   withRouter,\r\n    connect(mapStateToProps,{ setInitialize: setInitializeThunk})    \r\n)(App);\r\nexport default AppMain;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nlet initialState = {\r\n    friendsList: [\r\n        { id: 1, name: 'Zorro' },\r\n        { id: 2, name: 'Lyubov' },\r\n        { id: 3, name: 'Kuscherenko' }\r\n    ] as Array<FriendsList>\r\n};\r\n\r\n\r\nconst sideBarReducer = (state = initialState, action: any):initialStateType => {\r\n    return state;\r\n}\r\nexport default sideBarReducer;\r\n\r\n//types\r\nexport type FriendsList = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateType = typeof initialState","import authMe from \"./authMe\";\r\nimport messagesReducer from \"./messages-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sideBarReducer from \"./sideBar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appInitialization from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Action } from \"redux\";\r\n\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    authMe: authMe,\r\n    appInit: appInitialization,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\ntype InferValueType<T> = T extends {[key:string]: infer U}? U : never\r\nexport type InferActionsType<T extends {[key:string]: (...args: any) => any}> = ReturnType<InferValueType<T>>\r\nexport type BasicThunkType<A extends Action,R = Promise<void> > = ThunkAction<R, AppStateType, unknown, A>\r\nexport type AppStateType = ReturnType<typeof rootReducers>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport AppMain from './App';\r\n\r\n\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n            <AppMain />\r\n            </HashRouter>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n// renderEntireTree(store.getState()); //вже викликаємо\r\n//redux не вертає state змінений, тож викликаємо анонімну функцію, яка отримає зміни і віддасть rerender\r\n// store.subscribe(() => {    переходить у власність виконання connect from  'react-redux'\r\n//     // let newState = store.getState();\r\n//     renderEntireTree();\r\n// });\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editionVersion\":\"ProfileStatus_editionVersion__34QJ5\",\"status\":\"ProfileStatus_status__PRDP4\",\"readyStatus\":\"ProfileStatus_readyStatus__1-qBM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"InputChecker_error__3bOFz\",\"messageError\":\"InputChecker_messageError__2L7eE\",\"commonError\":\"InputChecker_commonError__15Qry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3b1l2\",\"name\":\"Header_name__wsK4x\",\"header\":\"Header_header__10dxk\",\"loginPhrase\":\"Header_loginPhrase__3mCng\",\"userLogin\":\"Header_userLogin__230Sn\",\"logIn\":\"Header_logIn__IbfsR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2BwxY\",\"dialogsItems\":\"Dialogs_dialogsItems__5NlB3\",\"dialog\":\"Dialogs_dialog__39fd-\",\"message\":\"Dialogs_message__cuXq7\",\"active\":\"Dialogs_active__17luP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"Users_userPage__3pdtU\",\"butGET\":\"Users_butGET__3mBVF\",\"preloader\":\"Users_preloader__3ube4\",\"pagination\":\"Users_pagination__1ZtKZ\"};","module.exports = __webpack_public_path__ + \"static/media/zorro.097a33ad.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3izJD\",\"active\":\"Dialog_active__1j-Og\",\"avatar\":\"Dialog_avatar__1n0LU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Friends_avatar__2iBkW\",\"friend\":\"Friends_friend__1Hlqs\",\"name\":\"Friends_name__YkjbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pagination_pages__3ksA0\",\"page\":\"Pagination_page__1iloC\",\"pageSelected\":\"Pagination_pageSelected__EFH4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__UMRl1\",\"divPreloader\":\"Preloader_divPreloader__3iYxB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPosts_addPost__1exZM\"};"],"sourceRoot":""}