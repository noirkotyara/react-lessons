{"version":3,"sources":["assets/images/kuscherenko.jpg","assets/images/lyubov.jpg","components/Dialogs/Message/Message.module.css","components/common/Preloader/preloader.svg","components/Profile/MyPosts/Post/Post.module.css","assets/startPage/av.jpg","assets/images/sad.png","assets/images/happy.png","assets/startPage/logo2.jpg","components/Login/Login.module.css","components/Navbar/Navbar.module.css","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Users/User/User.module.css","components/News/News.tsx","api/api.ts","components/Music/Music.tsx","components/Settings/Settings.tsx","redux/messages-reducer.ts","components/Dialogs/Dialog/Dialog.tsx","components/common/InputChecker/InputChecker.jsx","components/common/Validators/Validators.tsx","components/Dialogs/Form/SendMessageRedux.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/hoc/hoc.tsx","components/Dialogs/DialogsContainer.tsx","components/Navbar/Friends/Friends.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","redux/users-reducer.ts","components/Users/User/User.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.jsx","redux/users-selectors.ts","components/common/Pagination/Pagination.tsx","components/Users/UsersContainer.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/Contacts.jsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileEditForm.jsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileInfoEdit.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/ProfileStatus/ProfileStatusHook.jsx","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx","redux/authMe.ts","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.jsx","redux/app-reducer.ts","App.js","serviceWorker.js","redux/sideBar-reducer.ts","redux/redux-store.ts","index.js","components/Profile/ProfileStatus/ProfileStatus.module.css","components/common/InputChecker/InputChecker.module.css","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","assets/images/zorro.jpg","components/Dialogs/Dialog/Dialog.module.css","components/Navbar/Friends/Friends.module.css","components/common/Pagination/Pagination.module.css","components/common/Preloader/Preloader.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["module","exports","ActionLink","href","onClick","console","log","News","ResultCodeType","Music","Settings","initialState","messagesData","id","message","dialogsUsersData","name","ava","zorroAva","lyubovAva","kuscherenkoAva","idNum","messagesReducer","state","action","type","newMessageText","Dialog","props","path","className","cl","dialog","avatar","src","alt","to","activeClassName","active","InputComp","input","meta","error","visited","placeholder","messageError","required","value","undefined","maxLengthC","maxLen","length","SendMessageRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","maxLength10","component","sendMessage","Message","Dialogs","dialogsGenerate","map","d","key","messagesGenerate","m","dialogs","dialogsItems","messages","formData","dispatch","reset","withAuthMe","Component","this","isAuthMe","React","DialogsContainer","compose","connect","messagesPage","authMe","DialogsContainerHOC","Friends","friend","Navbar","friendsListComp","friendsList","fff","nav","item","friendsNav","NavbarContainer","sideBar","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","page","delete","post","authAPI","email","login","password","rememberMe","checkbox","captcha","symbols","userProfile","userID","status","put","file","FormData","append","profile","securityAPI","DATA","usersData","totalCount","isFetching","followingInProgress","setUsers","toggleFetching","toggleFollowing","followingTF","userId","usersReducer","u","followed","state02","push","filter","User","userItem","user","photos","small","avaDefault","country","off","on","stars","lastMessage","disabled","some","doUnfollow","statusFollow","doFollow","Users","usersItem","usersGenerate","Preloader","divPreloader","preloader","getUsersPage","usersPage","getUsersData","createSelector","getCurrentPage","getTotalCount","getPageSize","getIsFetching","getFollowingInProgress","Pagination","pagesQuantity","Math","ceil","pA","i","useState","currentPortion","setCurrentPortion","portionNumber","leftBorder","rightBorder","pages","changeCurPage","pageSelected","UsersContainerClass","setCurPage","title","userPage","pagination","a","resultCode","items","POSTF","postsData","likes","newPostText","updateStatusAC","postForm","content","uploadPhoto","image","setProfileThunk","profileReducer","newPost","Post","maxLength20","FormMyPostR","addPost","MyPosts","postsGenerate","p","posts","MyPostsContainer","profilePage","socialIcons","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Contact","sIcon","property","Object","keys","forEach","socialIcon","fieldCreator","enableReinitialize","contactsArray","profileData","contacts","editData","checker","commonError","ProfileInfoEdit","owner","updateProfile","editMode","changeEditMode","initialValues","dataFlow","editButton","fullname","fullName","aboutMe","lookingForAJob","happy","sad","style","width","height","lookingForAJobDescription","ProfileInfo","memo","checkedAuth","photoFile","changePhotoFile","description","onDoubleClick","accept","onChange","e","target","files","ProfileStatusHook","setStatus","useEffect","editionVersion","onBlur","updateStatus","autoFocus","event","readyStatus","match","params","Profile","authorizedUser","store","ProfileContainer","refreshProfile","setProfile","getStatus","prevProps","prevState","authorized","Success","getState","stopSubmit","_error","Promise","reject","withRouter","CAPTCHA","setUserData","setAuthMe","authMeSuccessThunk","getCaptchaThunk","url","Header","header","loginPhrase","logout","userLogin","logIn","logo","HeaderContainer","dataR","maxLength30","LoginFormContainer","isLogin","catchError","starter","initialized","appInitialization","App","PostsComp","DialogsMessagesComp","UsersComp","UsersContainer","LoginFormContainerCom","setInitialize","render","AppMain","appInit","Boolean","window","location","hostname","sideBarReducer","require","createStore","combineReducers","applyMiddleware","formReducer","composeWithDevTools","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a4f39b7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kuscherenko.7bc7e317.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lyubov.fc2a1a49.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__xSb92\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.c04e3ad7.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2DfE4\"};","module.exports = __webpack_public_path__ + \"static/media/av.3322ac59.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sad.f356e41d.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.ed41fce9.png\";","module.exports = __webpack_public_path__ + \"static/media/logo2.623bb4d9.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starter\":\"Login_starter__1tZcA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__kBj7q\",\"item\":\"Navbar_item__3Pa_F\",\"active\":\"Navbar_active__28OkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__3GDnK\",\"contacts\":\"ProfileInfo_contacts__37vHF\",\"socialIcon\":\"ProfileInfo_socialIcon__GBk5o\",\"editData\":\"ProfileInfo_editData__3bG9g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"User_userItem__4zQnk\",\"avatar\":\"User_avatar__39gSA\",\"lastMessage\":\"User_lastMessage__1hlgj\",\"name\":\"User_name__2R3Cl\",\"off\":\"User_off__XjvUl\",\"on\":\"User_on__1XQfw\",\"country\":\"User_country__2T7Tr\",\"stars\":\"User_stars__3aZm4\"};","import React from 'react';\r\nimport cl from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n          <ActionLink/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ActionLink() {\r\n  function handleClick() {\r\n    // e.preventDefault();\r\n    console.log('По ссылке кликнули.');\r\n  }\r\n\r\n  return (\r\n    <a href=\"#\" onClick={handleClick}>\r\n      Нажми на меня\r\n    </a>\r\n  );\r\n}\r\n\r\n\r\nexport default News;","import { ProfileType, UsersDataType } from './../types/types';\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"30bffa88-490b-405c-83b6-e6b58d235873\"\r\n    }\r\n});\r\n\r\ntype UsersAPIResponseType = {\r\n    items: Array<UsersDataType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type FollowUnfollowResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    changeCurPage(page: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    unFollowDeleteRequest(id: number) {\r\n        return instance.delete<FollowUnfollowResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n    followPostRequest(id: number) {\r\n        return instance.post<FollowUnfollowResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n\r\nexport type DataIsAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type DataIsLoginType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodeType {\r\n    Success = 0,\r\n    Error = 10\r\n}\r\n\r\nexport type AuthAPIResponseType<dataType, ResultCodeType> = {\r\n    data: dataType\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\ntype dataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    isAuthMe() {\r\n        return instance.get<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    isLogin(data: dataIsLoginType) {\r\n        return instance.post<AuthAPIResponseType<DataIsLoginType, ResultCodeType>>\r\n            (`auth/login`, {\r\n                email: data.login,\r\n                password: data.password,\r\n                rememberMe: data.checkbox,\r\n                captcha: data.symbols\r\n            })\r\n            .then(response => { return response.data })\r\n    },\r\n    isLogout() {\r\n        return instance.delete<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/login`)\r\n            .then(response => { return response.data })\r\n    }\r\n}\r\n\r\n\r\nexport const userProfile = {\r\n    showProfile(userID: number) {\r\n        return instance.get<ProfileType>(`profile/${userID}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile/status`, { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`/profile/status/${userID}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    uploadPhoto(file: File) {\r\n        let formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<AuthAPIResponseType<{photos: string}, ResultCodeType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    updateProfile(profile: ProfileType ) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile`, profile)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n            .then(response => response.data);\r\n    }\r\n}","import React from 'react';\r\nimport cl from './Music.module.css';\r\n\r\nconst Music = () =>{\r\n    return(\r\n        <div>\r\n             Music\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport cl from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import zorroAva from './../assets/images/zorro.jpg';\r\nimport kuscherenkoAva from './../assets/images/kuscherenko.jpg';\r\nimport lyubovAva from './../assets/images/lyubov.jpg';\r\n\r\nconst ADDMESSAGESTATE = 'ADD-MESSAGE-STATE';\r\n\r\nexport type MessagesDataType = {\r\n    id?: number\r\n    message: string\r\n};\r\nexport type DialogsUsersDataType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        { id: 1, message: 'злтщототолиолиг' },\r\n        { id: 2, message: 'Hello' },\r\n        { id: 3, message: 'Privet' },\r\n        { id: 4, message: 'Au revoir' }\r\n    ] as Array<MessagesDataType>,\r\n    dialogsUsersData: [\r\n        { id: 1, name: 'Zorro', ava: zorroAva },\r\n        { id: 2, name: 'Lyubov', ava: lyubovAva },\r\n        { id: 3, name: 'Kuscherenko', ava: kuscherenkoAva }\r\n    ] as Array<DialogsUsersDataType>\r\n};\r\nexport type initialStateType = typeof initialState;\r\nlet idNum = 5;\r\nlet messagesReducer = (state = initialState, action: sendMessageAType):initialStateType => {\r\n    switch (action.type) {\r\n        case ADDMESSAGESTATE:\r\n            idNum++;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {\r\n                    id: idNum,\r\n                    message: action.newMessageText\r\n                }]\r\n    }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype sendMessageAType = {\r\n    type: typeof ADDMESSAGESTATE\r\n    newMessageText: string \r\n};\r\nexport let sendMessage = (newMessageText: string):sendMessageAType => ({ type: ADDMESSAGESTATE, newMessageText });\r\n\r\n\r\nexport default messagesReducer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsUsersDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Dialog.module.css';\r\n\r\n\r\nconst Dialog = (props: DialogsUsersDataType) =>{\r\n    \r\n    let path = '/dialogs/' + props.id;\r\nreturn (\r\n<div className={cl.dialog}>\r\n            <span> <img className={cl.avatar} src={props.ava} alt='ava'/> </span>\r\n            <NavLink to={path} activeClassName={cl.active}>  {props.name} </NavLink></div>);\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport cl from './InputChecker.module.css';\r\n\r\n// type PropsType = {\r\n//     input: {\r\n//         name: \"newPostText\"\r\n//         onBlur: () => void\r\n//         onChange: () => void\r\n//         // onDragStart: ƒ (event)\r\n//         // onDrop: ƒ (event)\r\n//         onFocus: () => void\r\n//         value: string\r\n//     }\r\n//     meta: { error: string, visited: string, active: boolean, touched: boolean  }\r\n//     placeholder: string\r\n//     type: string\r\n// }: React.FC<PropsType>\r\n\r\n\r\nexport const InputComp = ({ input, meta, ...props }) => {\r\n    debugger;\r\n    \r\n    return <>\r\n            <div className={(meta.error && meta.visited && !meta.active) && cl.error}>\r\n            <input  {...input} placeholder={props.placeholder}></input>\r\n        </div>\r\n        <span className={cl.messageError}>{(meta.visited && !meta.active) && meta.error}</span>\r\n\r\n    </>\r\n}\r\n","\r\nexport const required = (value: null | string) => {\r\n   return value ? undefined : 'Field is required';\r\n}\r\ntype valueType = {\r\n   value: number\r\n   length: number\r\n}\r\nexport let maxLengthC = (maxLen: number) => (value: valueType) => {\r\n   return value && value.length < maxLen ? undefined : `${maxLen} is reached`} ","import React from 'react';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport { Field,  reduxForm } from 'redux-form';\r\nimport cl from './../Dialogs.module.css';\r\n\r\ntype SendMessageProps = {\r\n    handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nlet SendMessage = (props: SendMessageProps) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newMessageText' type=\"text\" validate={[required, maxLength10]} component={InputComp} />\r\n            <button type=\"submit\" className={cl.sendMessage}>send</button>\r\n        </form>\r\n    </>;\r\n}\r\n\r\nexport const SendMessageRedux = reduxForm<{ handleSubmit: () => void }, {}>({ form: 'sendMessage' })(SendMessage);\r\n\r\nlet maxLength10 = maxLengthC(10);","import React from 'react';\r\nimport { MessagesDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Message.module.css';\r\n\r\n\r\n\r\nconst Message = (props: MessagesDataType) =>{\r\n    return (\r\n    <div className={cl.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport { InjectedFormProps, reset } from 'redux-form';\r\nimport { MessagesDataType, DialogsUsersDataType } from '../../redux/messages-reducer';\r\nimport Dialog from './Dialog/Dialog';\r\nimport cl from './Dialogs.module.css';\r\nimport { SendMessageRedux } from './Form/SendMessageRedux';\r\nimport Message from './Message/Message';\r\n\r\ntype  DialogsProps = {\r\n    dialogsGenerate: Array<DialogsUsersDataType>\r\n    messagesGenerate:Array<MessagesDataType>\r\n    sendMessage: React.FC<InjectedFormProps<{ handleSubmit: () => void }, {}>>\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<DialogsProps> = (props) => {\r\n\r\n    let onSubmit = (formData: any, dispatch: Function) => {\r\n        props.sendMessage(formData.newMessageText);\r\n        dispatch(reset('sendMessage'));\r\n    }\r\n\r\n    let dialogsGenerate = props.dialogsGenerate.map(d => <Dialog key={d.id} name={d.name} id={d.id} ava={d.ava} />);\r\n    let messagesGenerate = props.messagesGenerate.map(m => <Message key={m.id} message={m.message} />);\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.dialogsItems}>\r\n                {dialogsGenerate}\r\n            </div>\r\n            <div className={cl.messages}>\r\n                {messagesGenerate}\r\n            </div>\r\n            <SendMessageRedux onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/authMe';\r\n\r\n\r\nexport let withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n    return class WrappedContainer extends React.Component<P & initialStateType> {\r\n\r\n        render() {\r\n             if (this.props.isAuthMe) return <Component {...this.props as P} /> \r\n             else return <Redirect to='/login'></Redirect>\r\n                \r\n            \r\n        }\r\n    }\r\n}","import { connect } from 'react-redux';\r\nimport { sendMessage } from '../../redux/messages-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport DialogsContainerHOC from './Dialogs';\r\nimport { DialogsUsersDataType, MessagesDataType } from '../../redux/messages-reducer';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport { compose } from 'redux';\r\n\r\nexport type MapStateToPropsType = {\r\n    dialogsGenerate: Array<DialogsUsersDataType>\r\n    messagesGenerate: Array<MessagesDataType>\r\n    isAuthMe: boolean\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    sendMessage: (text: string) => void\r\n}\r\n\r\n\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType;\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsGenerate: state.messagesPage.dialogsUsersData,\r\n        messagesGenerate: state.messagesPage.messagesData,\r\n        isAuthMe: state.authMe.isAuthMe\r\n    }\r\n}\r\n// authMeSuccess: authMeSuccessThunk\r\n// withAuthMe\r\nconst DialogsContainer = compose(\r\n    connect<MapStateToPropsType,\r\n        MapDispatchToPropsType,\r\n        {}, AppStateType>\r\n        (mapStateToProps, { sendMessage }),\r\n    withAuthMe)\r\n    (DialogsContainerHOC);\r\n\r\n\r\nexport default DialogsContainer;","import React from 'react';\r\nimport { FriendsList, initialStateType } from '../../../redux/sideBar-reducer';\r\nimport cl from './Friends.module.css';\r\n\r\nconst Friends: React.FC<FriendsList> = (props) => {\r\n\r\n    return (\r\n        <div className={cl.friend}>\r\n            <div className={cl.avatar}></div>\r\n            <div className={cl.name}>{props.name}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Friends;\r\n\r\n/* <img src={props.avatar} className={cl.avatar} alt='avatar'></img> */ ","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { initialStateType } from '../../redux/sideBar-reducer';\r\nimport Friends from './Friends/Friends';\r\nimport cl from './Navbar.module.css';\r\n\r\nconst Navbar = (props: initialStateType) => {\r\n  \r\n    let friendsListComp = props.friendsList.map (  fff => <Friends key={fff.id} id={fff.id} name={fff.name}/>);\r\n    return (\r\n        <nav className={cl.nav}>\r\n            <div className={cl.item}><NavLink to='/profile' activeClassName={cl.active}>\r\n                Profile</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/dialogs' activeClassName={cl.active}>\r\n                Messages</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/news' activeClassName={cl.active}>\r\n                News</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/music' activeClassName={cl.active}>\r\n                Music</NavLink></div>\r\n            <div className={cl.item}><NavLink to='/settings' activeClassName={cl.active}>\r\n                Settings</NavLink></div>\r\n            <div className={cl.item}> <NavLink to='/users' activeClassName={cl.active}>\r\n                Users</NavLink></div>\r\n\r\n\r\n            <div className={cl.friendsList}> <h3 className={cl.friendsNav}>FRIENDS</h3> {friendsListComp} </div>\r\n            \r\n        </nav>\r\n    );\r\n   \r\n}\r\n\r\nexport default Navbar;","import { connect } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { initialStateType } from '../../redux/sideBar-reducer';\r\nimport Navbar from './Navbar';\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): initialStateType=>({friendsList: state.sideBar.friendsList})\r\n\r\n\r\nconst NavbarContainer = connect(mapStateToProps,{})(Navbar);\r\n\r\n\r\nexport default NavbarContainer;","import { ThunkAction } from 'redux-thunk';\r\nimport { UsersDataType } from './../types/types';\r\nimport { usersAPI } from \"../api/api\";\r\nimport { AppStateType } from './redux-store';\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst DATA = 'SETUSERS';\r\nconst CURPAGE = 'CURPAGE';\r\nconst TOTALCOUNT = 'TOTALCOUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLEIF';\r\nconst FOL_IS_FETCHING = 'FOLISFETCH';\r\n\r\ntype DoFollowActionType = { type: typeof FOLLOW, id: number }\r\ntype DoUnfollowActionType = { type: typeof UNFOLLOW, id: number }\r\ntype SetUsersActionType = { type: typeof DATA, usersData: Array<UsersDataType> }\r\ntype SetCurPageActionType = { type: typeof CURPAGE, currentPage: number }\r\ntype SetTotalCountActionType = { type: typeof TOTALCOUNT, totalCount: number }\r\ntype ToggleFetchingActionType = { type: typeof TOGGLE_IS_FETCHING, isFetching: boolean }\r\ntype ToggleFollowingActionCreator = { type: typeof FOL_IS_FETCHING, followingTF: boolean, userId: number }\r\n\r\ntype ActionsType = DoFollowActionType | DoUnfollowActionType |\r\n    SetUsersActionType | SetCurPageActionType |\r\n    SetTotalCountActionType | ToggleFetchingActionType | ToggleFollowingActionCreator;\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>;\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UsersDataType>,\r\n    currentPage: 1,\r\n    pageSize: 90,\r\n    totalCount: 10,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n};\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nlet usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case DATA:\r\n            return {\r\n                ...state,\r\n                usersData: [...action.usersData]\r\n            };\r\n        case CURPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case TOTALCOUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case FOL_IS_FETCHING:\r\n\r\n            let state02 = {\r\n                ...state,\r\n                followingInProgress: [...state.followingInProgress]\r\n            };\r\n\r\n            action.followingTF ?\r\n                state02.followingInProgress.push(action.userId) :\r\n                state02.followingInProgress = state02.followingInProgress.filter(userId => userId !== action.userId);\r\n\r\n            return state02;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport let doUnfollow = (id: number): DoUnfollowActionType => ({ type: UNFOLLOW, id });\r\nexport let doFollow = (id: number): DoFollowActionType => ({ type: FOLLOW, id });\r\nexport let setUsers = (usersData: Array<UsersDataType>): SetUsersActionType => ({ type: DATA, usersData });\r\nexport let setCurPage = (currentPage: number): SetCurPageActionType => ({ type: CURPAGE, currentPage });\r\nexport let setTotalCount = (totalCount: number): SetTotalCountActionType => ({ type: TOTALCOUNT, totalCount });\r\nexport let toggleFetching = (isFetching: boolean): ToggleFetchingActionType => ({ type: TOGGLE_IS_FETCHING, isFetching });\r\nexport let toggleFollowing = (followingTF: boolean, userId: number): ToggleFollowingActionCreator => ({ type: FOL_IS_FETCHING, followingTF, userId });\r\n\r\n\r\n\r\n\r\nexport const setUsersThunk = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(toggleFetching(true));\r\n    let data = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(toggleFetching(false));\r\n    dispatch(setUsers(data.items));\r\n    dispatch(setTotalCount(data.totalCount));\r\n}\r\nexport const changeCurPageThunk = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(setCurPage(page));\r\n    dispatch(toggleFetching(true));\r\n    let data = await usersAPI.changeCurPage(page, pageSize)\r\n    dispatch(toggleFetching(false));\r\n    dispatch(setUsers(data.items));\r\n}\r\n\r\nexport const unFollowThunk = (userId: number): ThunkType => async (dispatch) => {\r\n\r\n    dispatch(toggleFollowing(true, userId));\r\n    let data = await usersAPI.unFollowDeleteRequest(userId);\r\n    data.resultCode === 0 && dispatch(doUnfollow(userId));\r\n    dispatch(toggleFollowing(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => async (dispatch) => {\r\n\r\n    dispatch(toggleFollowing(true, userId));\r\n    let data = await usersAPI.followPostRequest(userId);\r\n    data.resultCode === 0 && dispatch(doFollow(userId));\r\n    dispatch(toggleFollowing(false, userId));\r\n}\r\nexport default usersReducer;","import React from 'react';\r\nimport cl from './User.module.css';\r\nimport avaDefault from '../../../assets/images/zorro.jpg'\r\nimport { NavLink } from 'react-router-dom';\r\nimport { PropsType } from '../UsersContainer';\r\n\r\n\r\n\r\n\r\nconst User: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <> \r\n            <div className={cl.userItem}>\r\n                <NavLink to={'profile/' + props.user.id}><img className={cl.avatar}\r\n                    src={props.user.photos.small != null ? props.user.photos.small : avaDefault}\r\n                    alt='ava'></img>\r\n                </NavLink>\r\n\r\n    <div className={cl.country}>{props.user.id%3 === 0 \r\n    ? <div className={cl.off}>offline</div> : <div className={cl.on}>online</div> }</div>\r\n\r\n                <div className={cl.name}>{props.user.name}</div>\r\n                <div className={cl.stars}></div>\r\n    <div className={cl.lastMessage}>{props.user.status ? 'status: ' + props.user.status : '----'}</div>\r\n\r\n                <div>\r\n                    {\r\n                        props.user.followed\r\n                            ? <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                                props.doUnfollow(props.user.id);\r\n\r\n                            }} className={cl.statusFollow}>UNFOLLOW</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                                props.doFollow(props.user.id);\r\n\r\n                            }} className={cl.statusFollow}>FOLLOW</button>}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\nimport User from './User/User';\r\nimport cl from './Users.module.css';\r\nimport {PropsType} from './UsersContainer';\r\n\r\n\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <>                \r\n                <div className={cl.usersItem}>\r\n                    {props.usersGenerate.map((user) =>\r\n                    // I need to fix this shit\r\n                    //@ts-ignore\r\n                        <User key={user.id}\r\n                            user={user}\r\n                            doFollow={props.doFollow}\r\n                            doUnfollow={props.doUnfollow}\r\n                            followingInProgress={props.followingInProgress}\r\n                        />)}\r\n                </div>\r\n            </>\r\n    );\r\n\r\n}\r\n\r\nexport default Users;\r\n\r\n","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport cl from './Preloader.module.css';\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={cl.divPreloader}>\r\n            <img className={cl.preloader} src={preloader} alt=\"preloader\" />\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersPage = (state: AppStateType) => { return state.usersPage };\r\n\r\n\r\nexport const getUsersData = createSelector(getUsersPage, (usersPage) => { return usersPage.usersData; });\r\nexport const getCurrentPage = createSelector(getUsersPage, (usersPage) => { return usersPage.currentPage });\r\nexport const getTotalCount = createSelector(getUsersPage, (usersPage) => { return usersPage.totalCount });\r\nexport const getPageSize = createSelector(getUsersPage, (usersPage) => { return usersPage.pageSize });\r\nexport const getIsFetching = createSelector(getUsersPage, (usersPage) => { return usersPage.isFetching });\r\nexport const getFollowingInProgress = createSelector(getUsersPage, (usersPage) => { return usersPage.followingInProgress });","import React, { useState } from 'react';\r\nimport cl from './Pagination.module.css';\r\n\r\ntype PropsType = {\r\n    totalCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n\r\n    changeCurPage: (page: number) => void\r\n}\r\n\r\nlet Pagination = (props: PropsType) => {\r\n    \r\n    let portionSize = 5;\r\n    let pagesQuantity = Math.ceil(props.totalCount / props.pageSize);\r\n    let pA = [];\r\n    for (let i = 1; i <= pagesQuantity; i++) {\r\n        pA.push(i);\r\n    }\r\n\r\n\r\n    const [ currentPortion, setCurrentPortion ] = useState(1);\r\n    let portionNumber = Math.ceil(pagesQuantity / portionSize);\r\n    let leftBorder = ((currentPortion - 1) * portionSize) + 1;\r\n    let rightBorder = portionSize * currentPortion;\r\n \r\n    return (\r\n        <>\r\n            <div className={cl.pages}>\r\n                {currentPortion > 1 && <button onClick={() => setCurrentPortion(currentPortion-1)}>minus</button> }\r\n                {pA\r\n                .filter(page => page >= leftBorder && page <= rightBorder)\r\n                .map(page => {\r\n                    return (\r\n                        <span  onClick={() => { props.changeCurPage(page) }} className={props.currentPage === page && cl.pageSelected || cl.page} key={page}>{page} </span>\r\n                    );\r\n                })\r\n                }\r\n                {portionNumber > currentPortion && <button onClick={() => setCurrentPortion(currentPortion+1)}>plus</button> }\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Pagination;\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { changeCurPageThunk, setUsersThunk, unFollowThunk, followThunk } from '../../redux/users-reducer';\r\nimport Users from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getCurrentPage, getFollowingInProgress, getIsFetching, getPageSize, getTotalCount, getUsersData } from '../../redux/users-selectors';\r\nimport cl from './../Users/Users.module.css'\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport { UsersDataType } from '../../types/types';\r\nimport { AppStateType } from './../../redux/redux-store';\r\n\r\n type MapStateToPropsType = {\r\n    usersGenerate: Array<UsersDataType>\r\n    currentPage: number\r\n    totalCount: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\n// usersGenerate, currentPage, totalCount, pageSize, isFetching\r\n type MapDispatchToPropsType = {\r\n    setUsers: (currentPage: number, pageSize: number) => void\r\n    setCurPage: (page: number, pageSize: number) => void\r\n    doFollow: (id: number) => void \r\n    doUnfollow: (id: number) => void \r\n}\r\n type OwnPropsType = {\r\n    title: string\r\n    user: UsersDataType\r\n}\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType & OwnPropsType;\r\n\r\n// React.Component<PropsType, StateType>\r\nclass UsersContainerClass extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.setUsers(this.props.currentPage, this.props.pageSize);\r\n\r\n    }\r\n    changeCurPage = (page: number) => {\r\n        this.props.setCurPage(page,this.props.pageSize);\r\n    }\r\n    render() {\r\n        return <>\r\n        <div>{this.props.title}</div>\r\n        <div className={cl.userPage}>Choose your friends{this.props.isFetching && <span className={cl.preloader}><Preloader/></span>}</div>\r\n         <div className={cl.pagination}> <Pagination {...this.props} changeCurPage={this.changeCurPage} /> </div>\r\n        {!this.props.isFetching\r\n        && <Users\r\n                {...this.props}\r\n                isFetching={this.props.isFetching}/>}\r\n            </>\r\n    }\r\n}\r\n\r\n// usersGenerate, currentPage, totalCount, pageSize, isFetching\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        usersGenerate: getUsersData(state),\r\n        currentPage: getCurrentPage(state),\r\n        totalCount: getTotalCount(state),\r\n        pageSize: getPageSize(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n        \r\n    };\r\n}\r\n\r\n// <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n// <ReturnType<typeof mapStateToProps>, MapDispatchToProps, OwnPropsType, AppStateType >\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, OwnPropsType, AppStateType >(mapStateToProps, {\r\n    doFollow: followThunk,\r\n    doUnfollow: unFollowThunk,\r\n    setUsers: setUsersThunk,\r\n    setCurPage: changeCurPageThunk\r\n})(UsersContainerClass);\r\n","import { Dispatch } from 'react';\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ResultCodeType, userProfile } from \"../api/api\";\r\nimport { ProfileType } from \"../types/types\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst SETPROF = 'SET-PROFILE';\r\nconst UPDATESTATUS = 'SET-STATUS';\r\nconst POSTF = 'POST-FORM-newPostText';\r\nconst UPLOAD_PHOTO = 'UPLOAD-PHOTO';\r\n\r\ntype SetProfileActionType = {\r\n    type: typeof SETPROF\r\n    profile: object\r\n};\r\ntype UpdateStatusActionType = {\r\n    type: typeof UPDATESTATUS\r\n    status: string\r\n};\r\ntype PostFormActionType = {\r\n    type: typeof POSTF\r\n    content: string\r\n};\r\ntype UploadPhotoActionType = {\r\n    type: typeof UPLOAD_PHOTO\r\n    image: string\r\n};\r\ntype PostsDataType = {\r\n    id: number,\r\n    message: string\r\n    likes: number\r\n};\r\ntype ActionsTypes = SetProfileActionType | UpdateStatusActionType | PostFormActionType | UploadPhotoActionType;\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        { id: 1, message: 'Hello', likes: 15 },\r\n        { id: 2, message: 'Bonjour', likes: 30 },\r\n        { id: 3, message: 'Привет', likes: 15000 },\r\n    ] as Array<PostsDataType>,\r\n    newPostText: '',\r\n    profile: null as object | null,\r\n    status: 'no status'\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\n\r\n\r\nlet profileReducer = (state = initialState, action: ActionsTypes):InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POSTF:\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.content,\r\n                likes: 0\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case SETPROF:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case UPLOAD_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.image }\r\n            };\r\n        case UPDATESTATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst setProfile = (profile: ProfileType): SetProfileActionType => ({ type: SETPROF, profile });\r\nconst updateStatusAC = (status: string): UpdateStatusActionType => ({ type: UPDATESTATUS, status });\r\nexport const postForm = (content: string): PostFormActionType => ({ type: POSTF, content });\r\nconst uploadPhoto = (image: string): UploadPhotoActionType => ({ type: UPLOAD_PHOTO, image });\r\n\r\n\r\n\r\nexport const setProfileThunk = (userID: number): ThunkType=> async (dispatch) => {\r\n    let data = await userProfile.showProfile(userID);\r\n    dispatch(setProfile(data));\r\n}\r\n\r\nexport const setStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.updateStatus(status);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(updateStatusAC(status))\r\n\r\n}\r\nexport const getStatusThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.getStatus(userID)\r\n    dispatch(updateStatusAC(data));\r\n}\r\n\r\nexport const uploadPhotoThunk = (image: File): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.uploadPhoto(image);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(uploadPhoto(data.data.photos));\r\n}\r\n///I need to fix this shit\r\nexport const updateProfileThunk = (profile: ProfileType): ThunkType => async (dispatch: Function, getState) => {\r\n    let data = await userProfile.updateProfile(profile);\r\n    if (data.resultCode === 0) dispatch(setProfileThunk(getState().authMe.id))\r\n    else {\r\n        if (data.messages.length > 0) {\r\n            dispatch(stopSubmit('editProfile', { _error: data.messages }))\r\n            return Promise.reject(data.messages)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport cl from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={cl.item}>\r\n\r\n            <img src=\"https://static.tildacdn.com/tild3538-3762-4936-b162-656163363764/Icon.png\" alt=\"avatar\" />\r\n            <span>{props.message}</span>\r\n            <div>\r\n    <div>Likes --&gt; {props.likes}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport cl from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nlet maxLength20 = maxLengthC(20);\r\n\r\nconst MyPosts = (props) => {\r\n\r\n    let postsGenerate = props.postsGenerate.map(p => <Post key={p.id} message={p.message} likes={p.likes} />);\r\n    let onSubmit = (formData) => {\r\n        props.postForm(formData.newPostText);\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <FormMyPostR {...props} onSubmit={onSubmit} />\r\n\r\n            <div className={cl.posts}>\r\n                {postsGenerate}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nlet FormMyPost = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={InputComp} name='newPostText' type=\"text\" validate={[required, maxLength20]} placeholder={'Write your post here...'} />\r\n            <button type=\"submit\" className={cl.addPost}>Add post</button>\r\n        </form>\r\n    </>\r\n}\r\n\r\nlet FormMyPostR = reduxForm({\r\n    form: 'post'\r\n})(FormMyPost);\r\n\r\nexport default MyPosts;","\r\nimport { connect } from 'react-redux';\r\nimport { postForm } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsGenerate: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\n\r\nlet MyPostsContainer = connect(mapStateToProps, {postForm: postForm})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport cl from './ProfileInfo.module.scss';\r\n\r\nconst socialIcons = {\r\n    facebook: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111393.svg',\r\n    website: 'https://www.flaticon.com/svg/static/icons/svg/2847/2847798.svg',\r\n    vk: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111712.svg',\r\n    twitter: 'https://www.flaticon.com/svg/static/icons/svg/733/733579.svg',\r\n    instagram: 'https://www.flaticon.com/svg/static/icons/svg/174/174855.svg',\r\n    youtube: 'https://www.flaticon.com/svg/static/icons/svg/1384/1384060.svg',\r\n    github: 'https://www.flaticon.com/svg/static/icons/svg/733/733553.svg',\r\n    mainLink: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111644.svg'\r\n\r\n};\r\n\r\n\r\nconst Contact = ({ property, value }) => {\r\n    let sIcon;\r\n   let socialChoosed = Object.keys(socialIcons).forEach(key => { if(key===property)  sIcon = socialIcons[key]});\r\n    return (<>\r\n        {value\r\n            && <span><a href={value}><img className={cl.socialIcon}\r\n                    src={sIcon} alt=\"\" /></a>\r\n                 </span>\r\n            \r\n            \r\n            }\r\n{/* <div>{property} : {value}</div> */}\r\n    </>)\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../../../common/InputChecker/InputChecker';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport checker from './../../../common/InputChecker/InputChecker.module.css';\r\nconst ProfileEditForm = (props) => {\r\n    let contactsArray = Object.keys(props.profileData.contacts).map(key => {\r\n        return <div key={key}>{fieldCreator('contacts.' + key , InputComp, 'text' )}</div>\r\n    })\r\n\r\n        return (<form onSubmit={props.handleSubmit} className={cl.editData}>\r\n            <div>{props.error\r\n            && <div className={checker.commonError}> {props.error} </div>}</div>\r\n        <div>Here is our form for editing</div>\r\n        <div> Your full name: {fieldCreator('fullName', InputComp, 'text')} </div>\r\n        <div> About me: {fieldCreator('aboutMe', InputComp, 'text' )} </div>\r\n\r\n        <div> {fieldCreator('lookingForAJob', 'input', 'checkbox')} Looking for a job?</div>\r\n        <div> Description: {fieldCreator('lookingForAJobDescription', InputComp, 'text' )} </div>\r\n        <div> Contacts: {contactsArray} </div>\r\n        <button>Save changes</button>\r\n        \r\n        </form>\r\n        );\r\n}\r\n\r\nlet fieldCreator = (name, component, type, validate = []) => {\r\n    return (<Field name={name} component={component} type={type} placeholder={name} validate={validate}></Field>)\r\n}\r\n\r\nexport default reduxForm({\r\n    form: 'editProfile',\r\n    enableReinitialize: true\r\n})(ProfileEditForm);","import React, { useState } from 'react';\r\nimport Contact from '../Contacts';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nimport sad from '../../../../assets/images/sad.png';\r\nimport happy from '../../../../assets/images/happy.png';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport { reset } from 'redux-form';\r\n\r\nconst ProfileInfoEdit = ({ owner, profileData, updateProfile }) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let onSubmit = (dataFlow, dispatch) => {\r\n        let promise = updateProfile(dataFlow);\r\n        promise.then(() => changeEditMode(false));\r\n        dispatch(reset('editProfile'));\r\n\r\n    }\r\n    return (<>\r\n        <div>\r\n            {\r\n                (editMode && owner)\r\n                    ? <ProfileEditForm\r\n                        initialValues={profileData}\r\n                        profileData={profileData}\r\n                        onSubmit={onSubmit} />\r\n                    : owner &&\r\n                    <div>\r\n                        <button className={cl.editButton} onClick={() => changeEditMode(true)}>Edit Profile</button>\r\n                        <div className={cl.fullname}>{profileData.fullName}</div>\r\n                        <div className={cl.aboutMe}>{profileData.aboutMe}</div>\r\n                        <div className={cl.contacts}>\r\n                            {Object.keys(profileData.contacts).map((key) => {\r\n                                return <Contact key={key} property={key} value={profileData.contacts[key]} />\r\n                            })\r\n                            }\r\n                        </div>\r\n\r\n                        <div>lookingForAJob:  <img src={profileData.lookingForAJob ? happy : sad} style={{ width: '50px', height: '50px' }} alt=\"\"></img> </div>\r\n                        <div>Description: {profileData.lookingForAJobDescription}</div>\r\n\r\n                    </div>\r\n            }\r\n        </div>\r\n    </>)\r\n}\r\nexport default ProfileInfoEdit;","import React from 'react';\r\nimport cl from './ProfileInfo.module.scss';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { useState } from 'react';\r\nimport avaDefault from './../../../assets/startPage/av.jpg';\r\nimport ProfileInfoEdit from './ProfileInfoEdit/ProfileInfoEdit';\r\n\r\n\r\n\r\n\r\nconst ProfileInfo = React.memo((props) => {\r\n  \r\n    const { checkedAuth, profileData, uploadPhoto, userId, updateProfile } = props;\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [photoFile, changePhotoFile] = useState('');\r\n    if (!props.profileData) {\r\n        return <Preloader />\r\n    }\r\n    let choosePhotoEdition = () => {\r\n        changeEditMode(true);\r\n    }\r\n    let choosedPhoto = (file) => {\r\n        changePhotoFile(file);\r\n    }\r\n    let uploadPhotoPreparation = () => {\r\n        uploadPhoto(photoFile);\r\n        changeEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <div className={cl.description}>\r\n\r\n                {(editMode && (checkedAuth === userId || !userId))\r\n                    ? (<div>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={(e) => choosedPhoto(e.target.files[0])} />\r\n                        <input onClick={uploadPhotoPreparation} type=\"button\" value='Upload' />\r\n                    </div>)\r\n                    :\r\n                    <img style={{ width: '100px', height: '100px' }} src={profileData.photos.small ? profileData.photos.small : avaDefault} alt=\"avatar\" onDoubleClick={choosePhotoEdition} />\r\n                }\r\n                <ProfileInfoEdit\r\n                    owner={checkedAuth === userId || !userId}\r\n                    profileData={profileData}\r\n                    updateProfile={updateProfile} />\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport cl from './ProfileStatus.module.css';\r\n\r\n\r\n let ProfileStatusHook = (props) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [status,setStatus] = useState(props.status);\r\n\r\n\r\n    let editStatus = () =>  changeEditMode(true);\r\n    let onChange = (event) => setStatus(event.target.value);\r\n    \r\n   useEffect(() => { setStatus(props.status)},[props.status]);\r\n\r\n    let readyStatus = () => {\r\n        changeEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n  \r\n        return (\r\n            <div className={cl.content}>\r\n                <span className={cl.status}>Status:</span>\r\n                { \r\n            \r\n                    editMode\r\n                    ? <div className={cl.editionVersion}>\r\n                        <input onBlur={readyStatus} autoFocus={true} type=\"text\" value={status} onChange={onChange} ></input>\r\n                    </div>\r\n                    : <div >\r\n                        <span className={cl.readyStatus} \r\n                        onDoubleClick={() => (!props.match.params.userId) \r\n                        ? editStatus() \r\n                        : false}>{props.status || '---------'}</span> \r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default ProfileStatusHook;\r\n","import React, { ChangeEvent } from 'react';\r\nimport cl from './ProfileStatus.module.css';\r\n\r\ntype PropsType ={\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype StateType = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\n\r\nclass ProfileStatus extends React.Component<PropsType & StateType> {\r\n    state = {\r\n            editMode: false,\r\n            status: this.props.status\r\n        }\r\n    editStatus = () => {\r\n        console.log(this.state.status)\r\n        this.setState({ editMode: true });\r\n    }\r\n    onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({status: event.target.value})\r\n    }\r\n    \r\n    componentDidUpdate(prevProps: PropsType, prevState: StateType) {\r\n        if(this.props.status !== prevProps.status){\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n    readyStatus = () => {\r\n        this.setState({ editMode: false });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={cl.content}>\r\n                <span className={cl.status}>Status:</span>\r\n                {this.state.editMode\r\n                    ? <div className={cl.editionVersion}>\r\n                        <input onBlur={this.readyStatus} autoFocus={true} type=\"text\" value={this.state.status} onChange={this.onChange} ></input>\r\n                    </div>\r\n                    : <div >\r\n                        <span className={cl.readyStatus} onDoubleClick={this.editStatus}>{this.props.status || '---------'}</span> \r\n                       \r\n                    </div>}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProfileStatus;\r\n","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport cl from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'; //class component\r\nimport ProfileStatusHook from './ProfileStatus/ProfileStatusHook';\r\n\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <ProfileInfo\r\n                profileData={props.profile}\r\n                userId={props.match.params.userId}\r\n                uploadPhoto={props.uploadPhoto}\r\n                checkedAuth={props.authorizedUser}\r\n                updateProfile={props.updateProfile} />\r\n\r\n            <ProfileStatusHook {...props} />\r\n            <MyPostsContainer store={props.store} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getStatusThunk, postForm, setProfileThunk, setStatusThunk, updateProfileThunk, uploadPhotoThunk } from '../../redux/profile-reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport Profile from './Profile';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile = () => {\r\n        let userID = this.props.match.params.userId;\r\n        if(!userID){\r\n            userID = this.props.authorizedUser;\r\n            if(!userID) return<Preloader/>\r\n        } \r\n        this.props.setProfile(userID);\r\n        this.props.getStatus(userID);\r\n  }\r\n    componentDidMount() {  \r\n        this.refreshProfile();\r\n    }\r\n componentDidUpdate(prevProps, prevState){\r\n        if (prevProps.match.params.userId != this.props.match.params.userId){\r\n        this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n        return <Profile {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToPropsRedirect = (state) => {\r\n    return { isAuthMe: state.authMe.isAuthMe }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUser: state.authMe.id,\r\n        authorized: state.authMe.isAuthMe\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        setProfile: setProfileThunk,\r\n        updateStatus: setStatusThunk,\r\n        getStatus: getStatusThunk,\r\n        postForm: postForm,\r\n        uploadPhoto: uploadPhotoThunk,\r\n        updateProfile: updateProfileThunk\r\n        \r\n    }),\r\n    withRouter,\r\n    connect(mapStateToPropsRedirect, {}),\r\n    withAuthMe\r\n)(ProfileContainer);\r\n\r\n","import { ResultCodeType } from './../api/api';\r\nimport { Dispatch } from 'react';\r\nimport { stopSubmit } from \"redux-form\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = 'SET-USER-DATA';\r\nconst IS_AUTH_ME = 'IS-AUTH-ME';\r\n\r\nconst CAPTCHA = 'CAPTCHA-SUCCESS';\r\n\r\ntype DataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuthMe?: boolean\r\n    captcha?: string | null\r\n} \r\nexport type setUserDataAType = {\r\n    type: typeof SET_USER_DATA\r\n    data: DataType \r\n}\r\nexport type setAuthMeAType = {\r\n    type: typeof IS_AUTH_ME\r\n    isAuthMe: boolean\r\n}\r\ntype setCaptchaAType = {\r\n    type: typeof CAPTCHA\r\n    captcha: string | null\r\n}\r\nexport let setUserData = ({ id, login, email, isAuthMe, captcha = null }: DataType): setUserDataAType => ({ type: SET_USER_DATA, data: { id, login, email, isAuthMe, captcha } });\r\nexport let setAuthMe = (isAuthMe:boolean):setAuthMeAType => ({ type: IS_AUTH_ME, isAuthMe });\r\nlet setCaptcha = (captcha: string):setCaptchaAType => ({type: CAPTCHA, captcha});\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuthMe: false,\r\n    checkbox: false,\r\n    captcha: null as string | null\r\n};\r\nexport type initialStateType = typeof initialState;\r\n\r\nlet authMe = (state = initialState, action:setUserDataAType | setAuthMeAType | setCaptchaAType):initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n               ...action.data\r\n            }\r\n        case IS_AUTH_ME:\r\n            return {\r\n                ...state,\r\n                isAuthMe: action.isAuthMe\r\n            }\r\n        case CAPTCHA: {\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport type dataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\n\r\ntype ActionsTypes = setUserDataAType | setAuthMeAType | setCaptchaAType;\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>;\r\n// : ThunkAction<Promise<void>, AppStateType, unknown, Action<STRING>>\r\nexport const authMeSuccessThunk = (): ThunkType => async(dispatch, getState: () => AppStateType) => {\r\n    let data = await authAPI.isAuthMe();\r\n    dispatch(setUserData({...data.data}));\r\n    (data.resultCode === ResultCodeType.Success) && dispatch(setAuthMe(true));\r\n}\r\n\r\n//I need to fix this shit\r\nexport const putLoginPasswordThunk = (data: dataIsLoginType ): ThunkType => async(dispatch: Function) => {\r\n    debugger;\r\n    let dataR = await authAPI.isLogin(data);\r\n    if (dataR.resultCode === 0) dispatch(authMeSuccessThunk());\r\n    else {\r\n        if(dataR.resultCode === 10) {dispatch(getCaptchaThunk())}\r\n        let catchError = dataR.messages.length > 0 ? dataR.messages[0] : 'Some errors';\r\n        dispatch(stopSubmit('login', { _error: catchError }));\r\n    }\r\n\r\n}\r\nexport const logoutThunk = (): ThunkType => async(dispatch) => {\r\n    let dataR = await authAPI.isLogout();\r\n    (dataR.resultCode === 0) &&\r\n    dispatch(setAuthMe(false));\r\n    dispatch(setUserData({...dataR.data}));\r\n}\r\nconst getCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n    debugger;\r\n    let data = await securityAPI.getCaptchaURL();\r\n    dispatch(setCaptcha(data.url))\r\n}\r\n\r\n\r\nexport default authMe;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport cl from './Header.module.css';\r\nimport logo from './../../assets/startPage/logo2.jpg';\r\nimport { initialStateType } from '../../redux/authMe';\r\n\r\ntype AllPropsType = initialStateType & {logout: () => void} ;\r\n\r\nconst Header = (props: AllPropsType) => {\r\n    return (<>\r\n        <header className={cl.header}>\r\n            <div className={cl.loginPhrase}>\r\n                {props.isAuthMe\r\n                    ? <div onClick={props.logout} className={cl.userLogin}>Click to logOut </div>\r\n                    : <div className={cl.logIn}><NavLink  to='login/'><div>Log In</div> </NavLink></div>\r\n                }\r\n            </div>\r\n            <div className={cl.name}>HellDream</div>\r\n            <div><img className={cl.logo} src={logo} alt=\"logo\" /></div>\r\n\r\n        </header>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { initialStateType, logoutThunk } from '../../redux/authMe';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Header from './Header';\r\n\r\nlet mapStateToProps = (state: AppStateType): initialStateType => {\r\n    return {...state.authMe}\r\n}\r\n\r\nlet HeaderContainer = connect<initialStateType>(mapStateToProps, {\r\n    logout: logoutThunk\r\n})(Header);\r\nexport default HeaderContainer;","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../common/Validators/Validators';\r\nimport checker from './../common/InputChecker/InputChecker.module.css';\r\nimport { dataIsLoginType } from '../../redux/authMe';\r\n\r\nconst maxLength30 = maxLengthC(30);\r\n\r\ntype PropsType = {\r\n    // handleSubmit: (event: React.FormEvent<HTMLFormElement>) => void\r\n    // error: any\r\n    // captcha: string\r\n    // handleSubmit: () => void\r\n}\r\n////////////////////////////any\r\nlet LoginForm: React.FC<PropsType> = (props: any) => { \r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name='login' component={InputComp} type=\"text\" placeholder={'login'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='password' component={InputComp} type=\"text\" placeholder={'password'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='checkbox' component='input' type=\"checkbox\" />Remember Me</div>\r\n            {props.error && <div className={checker.commonError}> {props.error} </div>}\r\n            {props.captcha && <div><img src={props.captcha} /> \r\n             <Field name='symbols' component={InputComp} type=\"text\" placeholder={'symbols'} /> </div> }\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default reduxForm<{ handleSubmit: () => void }, {}>({ form: 'login' })(LoginForm);\r\n","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  putLoginPasswordThunk } from '../../redux/authMe';\r\nimport LoginForm from './LoginForm';\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.isLogin(formData);\r\n    }\r\n    return <>\r\n    <div className={cl.starter}>LOGIN</div>\r\n    {props.authMe\r\n        ?<div >You are login successfully</div>\r\n        :<LoginForm onSubmit={onSubmit} captcha={props.captcha}/>\r\n    }   \r\n    </>\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return { \r\n        authMe: state.authMe.isAuthMe,\r\n        captcha: state.authMe.captcha \r\n    }\r\n}\r\n\r\nlet LoginFormContainer = connect(mapStateToProps, {\r\n    isLogin: putLoginPasswordThunk\r\n})(Login);\r\nexport default LoginFormContainer;","import { ThunkAction } from \"redux-thunk\";\r\nimport { authMeSuccessThunk, setUserDataAType } from \"./authMe\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst SET_INIT = 'SET-INITIALIZE';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\nexport type InitialStateType = typeof initialState;\r\nlet appInitialization = (state = initialState, action: setInitializeActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INIT:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype setInitializeActionType = { type: typeof SET_INIT };\r\n\r\nexport let setInitialize = (): setInitializeActionType => ({ type: SET_INIT });\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\ntype ActionsTypes = setInitializeActionType;\r\nexport const setInitializeThunk = (): ThunkType => async dispatch => {\r\n    await dispatch(authMeSuccessThunk());\r\n    dispatch(setInitialize());\r\n}\r\n\r\n\r\nexport default appInitialization;","import React from 'react';\r\nimport { BrowserRouter, Route, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport News from './components/News/News';\r\nimport Music from './components/Music/Music';\r\nimport Settings from './components/Settings/Settings';\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\r\nimport NavbarContainer from './components/Navbar/NavbarContainer';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport LoginFormContainer from './components/Login/Login';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { setInitializeThunk } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\n\r\n\r\nclass App extends React.Component {\r\n    \r\ncomponentDidMount(){\r\n        this.props.setInitialize();\r\n}\r\n    PostsComp = () => <ProfileContainer store={this.props.store} />;\r\n    DialogsMessagesComp = () => <DialogsContainer store={this.props.store} />;\r\n    UsersComp = () => <UsersContainer store={this.props.store} title='UsersContainer'/>;\r\n    LoginFormContainerCom = () => <LoginFormContainer store={this.props.store} />;\r\n    render() {\r\n        if(!this.props.initialized){ return <Preloader/>}\r\n        return (\r\n            \r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer />\r\n                    <NavbarContainer />\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/dialogs' render={this.DialogsMessagesComp} />\r\n                        <Route path='/profile/:userId?' render={this.PostsComp} />\r\n                        <Route path='/news' render={News} />\r\n                        <Route path='/music' render={Music} />\r\n                        <Route path='/settings' render={Settings} />\r\n                        <Route path='/users' render={this.UsersComp} />\r\n                        <Route path='/login' render={this.LoginFormContainerCom} />\r\n                    </div>\r\n\r\n                </div>\r\n           \r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        initialized: state.appInit.initialized\r\n    })\r\n}\r\n\r\nlet AppMain = compose(\r\n   withRouter,\r\n    connect(mapStateToProps,{ setInitialize: setInitializeThunk})    \r\n)(App);\r\nexport default AppMain;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type FriendsList = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet initialState = {\r\n    friendsList: [\r\n        { id: 1, name: 'Zorro' },\r\n        { id: 2, name: 'Lyubov' },\r\n        { id: 3, name: 'Kuscherenko' }\r\n    ] as Array<FriendsList>\r\n};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nlet sideBarReducer = (state = initialState, action: any):initialStateType => {\r\n    return state;\r\n}\r\nexport default sideBarReducer;","import authMe from \"./authMe\";\r\nimport messagesReducer from \"./messages-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sideBarReducer from \"./sideBar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appInitialization from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    authMe: authMe,\r\n    appInit: appInitialization,\r\n    form: formReducer\r\n});\r\n\r\n // (globalState: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<typeof rootReducers>;\r\n\r\nlet store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware))); //створили об'єкт store\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport store from './redux/redux-store';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport AppMain from './App';\r\n\r\n\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n            <AppMain />\r\n            </HashRouter>\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n\r\n// renderEntireTree(store.getState()); //вже викликаємо\r\n//redux не вертає state змінений, тож викликаємо анонімну функцію, яка отримає зміни і віддасть rerender\r\n// store.subscribe(() => {    переходить у власність виконання connect from  'react-redux'\r\n//     // let newState = store.getState();\r\n//     renderEntireTree();\r\n// });\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editionVersion\":\"ProfileStatus_editionVersion__34QJ5\",\"status\":\"ProfileStatus_status__PRDP4\",\"readyStatus\":\"ProfileStatus_readyStatus__1-qBM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"InputChecker_error__3bOFz\",\"messageError\":\"InputChecker_messageError__2L7eE\",\"commonError\":\"InputChecker_commonError__15Qry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3b1l2\",\"name\":\"Header_name__wsK4x\",\"header\":\"Header_header__10dxk\",\"loginPhrase\":\"Header_loginPhrase__3mCng\",\"userLogin\":\"Header_userLogin__230Sn\",\"logIn\":\"Header_logIn__IbfsR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2BwxY\",\"dialogsItems\":\"Dialogs_dialogsItems__5NlB3\",\"dialog\":\"Dialogs_dialog__39fd-\",\"message\":\"Dialogs_message__cuXq7\",\"active\":\"Dialogs_active__17luP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"Users_userPage__3pdtU\",\"butGET\":\"Users_butGET__3mBVF\",\"preloader\":\"Users_preloader__3ube4\",\"pagination\":\"Users_pagination__1ZtKZ\"};","module.exports = __webpack_public_path__ + \"static/media/zorro.097a33ad.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3izJD\",\"active\":\"Dialog_active__1j-Og\",\"avatar\":\"Dialog_avatar__1n0LU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Friends_avatar__2iBkW\",\"friend\":\"Friends_friend__1Hlqs\",\"name\":\"Friends_name__YkjbY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pagination_pages__3ksA0\",\"page\":\"Pagination_page__1iloC\",\"pageSelected\":\"Pagination_pageSelected__EFH4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__UMRl1\",\"divPreloader\":\"Preloader_divPreloader__3iYxB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPosts_addPost__1exZM\"};"],"sourceRoot":""}