{"version":3,"sources":["components/common/InputChecker/InputChecker.module.css","components/common/Pagination/Pagination.module.css","components/common/Preloader/Preloader.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.module.css","redux/profile-reducer.ts","components/hoc/hoc.tsx","components/common/Preloader/preloader.svg","components/Header/Header.module.css","components/Login/Login.module.css","assets/images/zorro.jpg","api/api.ts","redux/messages-selectors.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Form/SendMessageRedux.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Header/Header.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Music/Music.tsx","redux/sideBar-selectors.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","redux/users-reducer.ts","redux/users-selectors.ts","components/common/Pagination/Pagination.tsx","components/Users/FormType.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","redux/app-reducer.ts","App.tsx","redux/sideBar-reducer.ts","redux/redux-store.ts","serviceWorker.js","index.tsx","components/Users/User/User.module.css","redux/authMe-selectors.ts","redux/messages-reducer.ts","redux/authMe.ts","components/common/Preloader/Preloader.jsx","components/common/Validators/Validators.tsx","components/common/InputChecker/InputChecker.tsx","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css"],"names":["module","exports","SETPROF","POSTF","initialState","postsData","id","message","likes","profile","status","actions","setProfile","type","updateStatusAC","postForm","content","uploadPhoto","image","setProfileThunk","userID","dispatch","a","userProfile","showProfile","data","setStatusThunk","updateStatus","resultCode","ResultCodeType","Success","getStatusThunk","getStatus","uploadPhotoThunk","photos","updateProfileThunk","getState","updateProfile","authMe","messages","length","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","withAuthMe","Component","props","useSelector","getAuthMe","to","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","then","response","changeCurPage","page","unFollowDeleteRequest","delete","followPostRequest","post","authAPI","isAuthMe","isLogin","email","login","password","rememberMe","checkbox","captcha","symbols","isLogout","put","file","formData","FormData","append","securityAPI","getCaptchaURL","dialogsAPI","getAlldialogs","startChat","userId","selectChat","pageNumber","sendMessageToUser","body","deleteMessage","messageId","getDialogsData","messagesPage","getMessages","createSelector","dialogsPage","messagesData","getDialogs","dialogsUsersData","getUserId","selectedUserId","getIsFetching","isFetching","Dialog","user","useDispatch","history","useHistory","onClick","getSelectedChatThunk","push","pathname","className","cl","dialog","avatar","src","small","alt","userName","SendMessageRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","validate","required","component","InputComp","sendMessage","maxLengthC","Message","authUserId","getAuthID","cn","messageFromUser","recipientId","yourMessage","onMouseUp","e","button","deleteMessageThunk","chooseMessage","useEffect","dispatchR","getDialogsThunk","dialogsGenerate","messagesGenerate","messagesGenerateLength","receivedUserId","useState","setCurrentPage","prevCountMessages","setprevCountMessages","dialogsGenerateList","map","d","key","messagesGenerateList","m","Preloader","dialogs","dialogsItems","loadMoreMessagesThunk","sendMessageThunk","newMessageText","reset","Header","logout","useCallback","logoutThunk","Layout","Text","Typography","Title","span","maxLength30","getCaptcha","placeholder","error","checker","commonError","LoginPage","starter","putLoginPasswordThunk","Music","getFriends","sideBar","sideBarPage","friendsList","Navbar","Sider","collapsed","setCollapsed","SubMenu","Menu","collapsible","onCollapse","theme","defaultSelectedKeys","mode","Item","icon","PieChartOutlined","style","margin","UserOutlined","title","FileOutlined","ActionLink","href","console","log","News","FOLLOW","UNFOLLOW","DATA","CURPAGE","SET_FILTER","usersData","totalCount","followingInProgress","filter","followingTF","setUsersThunk","items","usersReducer","u","followed","state02","getUsersPage","usersPage","getUsersData","getCurrentPage","getTotalCount","getPageSize","getFollowingInProgress","getFilter","Pagination","pagesQuantity","Math","ceil","pA","i","currentPortion","setCurrentPortion","portionNumber","leftBorder","rightBorder","pages","pageSelected","SearchForm","enableReinitialize","initialValues","String","values","setSubmitting","valuesConverted","onFilterChange","isSubmitting","as","value","disabled","User","userItem","avaDefault","country","off","on","stars","lastMessage","some","statusFollow","Users","usersGenerate","usersItem","queryString","require","UsersPage","parsedFilter","parse","location","search","substr","filterPage","filterURL","Number","parsedForUrl","stringify","userPage","preloader","pagination","changeCurPageThunk","SET_INIT","initialized","appInitialization","ProfilePage","React","lazy","PublicChatPage","SettingsPage","NoMatch","useLocation","AppMain","withRouter","memo","appInit","catchAllUnhandledErrors","alert","authMeSuccessThunk","window","addEventListener","removeEventListener","Content","Footer","minHeight","padding","path","render","fallback","textAlign","sideBarReducer","createStore","combineReducers","applyMiddleware","store","profilePage","messagesReducer","formReducer","composeWithDevTools","thunkMiddleware","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","SETISFETCHING","DELETEMESSAGE","newMessage","users","startChatThunk","IS_AUTH_ME","CAPTCHA","setUserData","setAuthMe","dataR","getCaptchaThunk","catchError","setCaptcha","url","divPreloader","undefined","maxLen","input","meta","visited","active","messageError"],"mappings":"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","file":"static/js/main.e3e9c432.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"InputChecker_error__3bOFz\",\"messageError\":\"InputChecker_messageError__2L7eE\",\"commonError\":\"InputChecker_commonError__15Qry\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pagination_pages__3ksA0\",\"page\":\"Pagination_page__1iloC\",\"pageSelected\":\"Pagination_pageSelected__EFH4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divPreloader\":\"Preloader_divPreloader__3iYxB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3izJD\",\"active\":\"Dialog_active__1j-Og\",\"avatar\":\"Dialog_avatar__1n0LU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__xSb92\",\"messageFromUser\":\"Message_messageFromUser__1rJud\",\"yourMessage\":\"Message_yourMessage__675tD\"};","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ResultCodeType, userProfile } from \"../api/api\";\r\nimport { ProfileType } from \"../types/types\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SETPROF = 'SN/PROFILE/SET-PROFILE';\r\nconst UPDATESTATUS = 'SN/PROFILE/SET-STATUS';\r\nconst POSTF = 'SN/PROFILE/POST-FORM-newPostText';\r\nconst UPLOAD_PHOTO = 'SN/PROFILE/UPLOAD-PHOTO';\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        { id: 1, message: 'Hello', likes: 15 },\r\n        { id: 2, message: 'Bonjour', likes: 30 },\r\n        { id: 3, message: 'Привет', likes: 15000 },\r\n    ] as Array<PostsDataType>,\r\n    // newPostText: '',\r\n    profile: null as object | null,\r\n    status: 'no status' \r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POSTF:\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.content,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case SETPROF:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case UPLOAD_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.image }\r\n            }\r\n        case UPDATESTATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType) => ({ type: SETPROF, profile } as const),\r\n    updateStatusAC: (status: string) => ({ type: UPDATESTATUS, status } as const),\r\n    postForm: (content: string) => ({ type: POSTF, content } as const),\r\n    uploadPhoto: (image: string) => ({ type: UPLOAD_PHOTO, image } as const)\r\n}\r\n\r\nexport const setProfileThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.showProfile(userID);\r\n    dispatch(actions.setProfile(data));\r\n}\r\n\r\nexport const setStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n    //обработка ошибок\r\n    // try\r\n    // {\r\n        let data = await userProfile.updateStatus(status);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.updateStatusAC(status))\r\n    // }\r\n    // catch(error)\r\n    // {\r\n    //     alert(error)\r\n    // }\r\n    \r\n\r\n}\r\nexport const getStatusThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.getStatus(userID)\r\n    dispatch(actions.updateStatusAC(data));\r\n}\r\n\r\nexport const uploadPhotoThunk = (image: File): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.uploadPhoto(image);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.uploadPhoto(data.data.photos));\r\n}\r\n\r\nexport const updateProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await userProfile.updateProfile(profile);\r\n    if (data.resultCode === 0) dispatch(setProfileThunk(getState().authMe.id))\r\n    else {\r\n        if (data.messages.length > 0) {\r\n            dispatch(stopSubmit('editProfile', { _error: data.messages }))\r\n            return Promise.reject(data.messages)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n//types \r\nexport type PostsDataType = {\r\n    id: number\r\n    message: string\r\n    likes: number\r\n}\r\n\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>","import React, { Suspense } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getAuthMe } from '../../redux/authMe-selectors';\r\n\r\nexport const withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n    return (props: any) => {\r\n        const isAuthMe = useSelector(getAuthMe)\r\n        if (isAuthMe) return <Component {...props as P} />\r\n        else return <Redirect to='/login'></Redirect>\r\n    }\r\n}\r\n\r\nexport function withSuspense<WCP>(Component: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (<Suspense fallback={<h1>Still Loading…</h1>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n        )\r\n\r\n    }\r\n} \r\n\r\n//left behind)\r\n// export let withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n//     return class WrappedContainer extends React.Component<P & initialStateType> {\r\n//         render() {\r\n//             let {isAuthMe, ...restProps} = this.props;\r\n//             if (this.props.isAuthMe) return <Component {...restProps as P} />\r\n//             else return <Redirect to='/login'></Redirect>\r\n//         }\r\n//     }\r\n// }","module.exports = __webpack_public_path__ + \"static/media/preloader.c04e3ad7.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3b1l2\",\"name\":\"Header_name__wsK4x\",\"header\":\"Header_header__10dxk\",\"loginPhrase\":\"Header_loginPhrase__3mCng\",\"userLogin\":\"Header_userLogin__230Sn\",\"logIn\":\"Header_logIn__IbfsR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starter\":\"Login_starter__1tZcA\"};","module.exports = __webpack_public_path__ + \"static/media/zorro.097a33ad.jpg\";","import { ProfileType, UsersDataType, PhotosType } from './../types/types';\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        // \"API-KEY\": \"9c2e4d66-4ed0-4976-8ef0-e6d697c58441\"//noirkotyara\r\n        \"API-KEY\": \"30bffa88-490b-405c-83b6-e6b58d235873\"//MKdir\r\n    }\r\n});\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string , friend: null | boolean) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}${friend === null? '' : '&friend=' + friend}` )\r\n            .then(response => response.data);\r\n    },\r\n    changeCurPage(page: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    unFollowDeleteRequest(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data) as Promise<FollowUnfollowResponseType>\r\n    },\r\n    followPostRequest(id: number) {\r\n        return instance.post<FollowUnfollowResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    isAuthMe() {\r\n        return instance.get<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    isLogin(data: dataIsLoginType) {\r\n        return instance.post<AuthAPIResponseType<DataIsLoginType, ResultCodeType>>\r\n            (`auth/login`, {\r\n                email: data.login,\r\n                password: data.password,\r\n                rememberMe: data.checkbox,\r\n                captcha: data.symbols\r\n            })\r\n            .then(response => { return response.data })\r\n    },\r\n    isLogout() {\r\n        return instance.delete<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/login`)\r\n            .then(response => { return response.data })\r\n    }\r\n}\r\n\r\n\r\nexport const userProfile = {\r\n    showProfile(userID: number) {\r\n        return instance.get<ProfileType>(`profile/${userID}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile/status`, { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`/profile/status/${userID}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    uploadPhoto(file: File) {\r\n        let formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<AuthAPIResponseType<{photos: string}, ResultCodeType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    updateProfile(profile: ProfileType ) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile`, profile)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport const dialogsAPI = {\r\n    getAlldialogs(){\r\n        return instance.get(`/dialogs`)\r\n        .then(response => response.data)\r\n    },\r\n    startChat(userId: number){\r\n        return instance.put<getDialogsAPIResponseType<{}>>(`/dialogs/${userId}`)\r\n        .then(response => response.data)\r\n    },\r\n    selectChat(userId: number, pageNumber: number = 1){\r\n        return instance.get<getSelectedChatMessagesType>(`dialogs/${userId}/messages?count=20&page=${pageNumber}`)\r\n        .then(response => response.data)\r\n    },\r\n    sendMessageToUser(userId: number, message: string){\r\n        return instance.post<SendedMessageToUserType>(`dialogs/${userId}/messages`, {body: message })\r\n        .then(response => response.data)\r\n    },\r\n    deleteMessage(messageId: string){\r\n        return instance.delete<DeleteMessageType>(`dialogs/messages/${messageId}`)\r\n        .then(response => response.data)\r\n    },\r\n    \r\n}\r\n\r\nexport type DeleteMessageType = {\r\n    data: {} \r\n    fieldsErrors?: []\r\n    messages?: [] | Array<string>\r\n    resultCode?: ResultCodeType\r\n}\r\n// data: {}\r\n// fieldsErrors: []\r\n// messages: []\r\n// resultCode: 0\r\n\r\n\r\n//++ dialogs/{userId}\t\r\n//++ dialogs\r\n//++ post dialogs/{userId}/messages\r\n//++ get dialogs/{userId}/messages\r\n// dialogs/messages/{messageId}/viewed\r\n// dialogs/messages/{messageId}/spam\r\n//++ dialogs/messages/{messageId}\r\n// dialogs/messages/{messageId}/restore\r\n// dialogs/{userId}/messages/new?newerThen={date}\r\n// dialogs/messages/new/count\t\r\n\r\n//types\r\nexport type getSelectedChatMessagesType = {\r\n    items: Array<MessagesDataType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type SendedMessageToUserType = {\r\n    data:{message: MessagesDataType} \r\n    fieldsErrors?: []\r\n    messages?: [] | Array<string>\r\n    resultCode?: ResultCodeType\r\n}\r\nexport type MessagesDataType = {\r\n    id: string\r\n    body: string\r\n    translatedBody: null\r\n    addedAt: string\r\n    senderId: number\r\n    senderName: string\r\n    recipientId: number\r\n    viewed: boolean\r\n    deletedByRecipient?: boolean\r\n    distributionId?: null | number\r\n    recipientName?: string\r\n    isSpam?: boolean\r\n}\r\nexport type getDialogsAPIResponseType<D> = {\r\n    data: Array<D> \r\n    fieldsErrors?: []\r\n    messages?: [] | Array<string>\r\n    resultCode?: ResultCodeType\r\n}\r\n\r\nexport type DataType = {\r\n    id: number\r\n    userName: string\r\n    hasNewMessages: boolean\r\n    lastDialogActivityDate: string\r\n    lastUserActivityDate: string\r\n    newMessagesCount: number\r\n    photos: PhotosType\r\n}\r\n\r\nexport type UsersAPIResponseType = {\r\n    items: Array<UsersDataType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type FollowUnfollowResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\nexport type DataIsAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type DataIsLoginType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodeType {\r\n    Success = 0,\r\n    Error = 10\r\n}\r\n\r\nexport type AuthAPIResponseType<dataType, ResultCodeType> = {\r\n    data: dataType\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\ntype dataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst getDialogsData = (state: AppStateType) => { return state.messagesPage}\r\n\r\nexport const getMessages = createSelector(getDialogsData, (dialogsPage) => { return dialogsPage.messagesData })\r\nexport const getDialogs = createSelector(getDialogsData, (dialogsPage) => { return dialogsPage.dialogsUsersData })\r\nexport const getUserId = createSelector(getDialogsData, (dialogsPage) => { return dialogsPage.selectedUserId})\r\nexport const getIsFetching = createSelector(getDialogsData, (dialogsPage) => { return dialogsPage.isFetching})\r\n\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport { DataType } from '../../../api/api';\r\nimport { getSelectedChatThunk } from '../../../redux/messages-reducer';\r\nimport cl from './Dialog.module.css';\r\n\r\n\r\nconst Dialog: React.FC<{ user: DataType }> = ({ user }) => {\r\n    let path = '/dialogs/' + user.id\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const selectDialog = (userId: number) => {\r\n        dispatch(getSelectedChatThunk(userId))\r\n        history.push({\r\n            pathname: `/dialogs/${userId}/messages`\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div onClick={() => selectDialog(user.id)} className={cl.dialog}>\r\n            <span>\r\n                <img className={cl.avatar} src={user.photos.small ? user.photos.small : 'https://eitrawmaterials.eu/wp-content/uploads/2016/09/person-icon.png'} alt='ava' />\r\n            </span>\r\n            <div>\r\n                {user.userName}\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport { Field,  InjectedFormProps,  reduxForm } from 'redux-form';\r\nimport cl from './../Dialogs.module.css';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\nexport type SendMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\nlet SendMessage: React.FC<InjectedFormProps<SendMessageType, {}>> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newMessageText' type=\"text\" validate={[required]} component={InputComp} />\r\n            <button type=\"submit\" className={cl.sendMessage}>send</button>\r\n        </form>\r\n    </>;\r\n}\r\n\r\nexport const SendMessageRedux = reduxForm<SendMessageType>({ form: 'sendMessage' })(SendMessage);\r\n\r\nlet maxLength10 = maxLengthC(10);","import React, { ChangeEvent } from 'react';\r\nimport { MessagesDataType } from '../../../api/api';\r\nimport cl from './Message.module.css';\r\nimport cn from 'classnames'\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAuthID } from '../../../redux/authMe-selectors';\r\nimport { deleteMessageThunk } from '../../../redux/messages-reducer';\r\n//popconfirm for delete the message\r\n\r\nconst Message: React.FC<{message: MessagesDataType}> = ({message}) => {\r\n\r\n    const authUserId = useSelector<AppStateType, number>(getAuthID)\r\n    const dispatch = useDispatch()\r\n\r\n    const chooseMessage = (e: React.MouseEvent<HTMLDivElement, MouseEvent>, id: string) => {\r\n        if(e.button === 0){\r\n            // alert(`Hello darling ${id}`)\r\n             dispatch(deleteMessageThunk(id))\r\n        }\r\n       \r\n\r\n    }\r\n\r\n    return (\r\n    <div className={\r\n        cn({[cl.messageFromUser]: message.recipientId === authUserId,\r\n            [cl.yourMessage]: message.recipientId !== authUserId})\r\n        }\r\n        onMouseUp={(e) => chooseMessage(e, message.id)}\r\n        >\r\n        {message.body}\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Message;","import { Button, Divider } from 'antd';\r\nimport React, { Dispatch, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormAction, reset } from 'redux-form';\r\nimport { DataType, MessagesDataType } from '../../api/api';\r\nimport { actions, getDialogsThunk, loadMoreMessagesThunk, sendMessageThunk } from '../../redux/messages-reducer';\r\nimport { getDialogs, getIsFetching, getMessages, getUserId } from '../../redux/messages-selectors';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport Dialog from './Dialog/Dialog';\r\nimport cl from './Dialogs.module.css';\r\nimport { SendMessageRedux } from './Form/SendMessageRedux';\r\nimport Message from './Message/Message';\r\n\r\nconst Dialogs: React.FC<{}> = (props) => {\r\n\r\n    useEffect(() => {\r\n        dispatchR(getDialogsThunk())\r\n    },[])\r\n\r\n    const dialogsGenerate = useSelector<AppStateType,Array<DataType>>(getDialogs)\r\n    const messagesGenerate = useSelector<AppStateType,Array<MessagesDataType>>(getMessages)\r\n    let messagesGenerateLength = messagesGenerate.length\r\n    const receivedUserId = useSelector<AppStateType,number>(getUserId)\r\n    const isFetching = useSelector<AppStateType,boolean>(getIsFetching)\r\n    const dispatchR = useDispatch()\r\n\r\n    let [currentPage, setCurrentPage] = useState(1)\r\n    let [prevCountMessages, setprevCountMessages] = useState(messagesGenerateLength)     \r\n    const onSubmit = (formData: {newMessageText: string}, dispatch: Dispatch<FormAction> )=> {\r\n        // dispatchR(actions.sendMessage(formData.newMessageText))\r\n        dispatchR(sendMessageThunk(receivedUserId,formData.newMessageText))\r\n        dispatch(reset('sendMessage'))\r\n    }\r\n    \r\n    const loadMoreMessages = () => {\r\n        setprevCountMessages(messagesGenerateLength)\r\n        \r\n        dispatchR(loadMoreMessagesThunk(receivedUserId, currentPage + 1))\r\n        setCurrentPage(currentPage+1)\r\n    }\r\n\r\n    let dialogsGenerateList = dialogsGenerate.map(d => <Dialog key={d.id} user={d} />);\r\n    let messagesGenerateList = messagesGenerate.map(m => <Message key={m.id} message={m} />);\r\n\r\n    if (isFetching) {\r\n        // debugger\r\n        return <Preloader/>\r\n    }\r\n    else return (\r\n        <div className={cl.dialogs}>\r\n            {isFetching && <Preloader/>}\r\n            <div className={cl.dialogsItems}>\r\n                {dialogsGenerateList}\r\n            </div>\r\n            \r\n            <div className={cl.messages}>\r\n               {(receivedUserId !== 0 && messagesGenerateList.length !== 0) && <Button onClick={loadMoreMessages}>Load more</Button>}\r\n               { (receivedUserId !== 0 && messagesGenerateList.length !== 0 && messagesGenerateList.length === prevCountMessages) && <div>You don`t have more messages</div> } \r\n                { messagesGenerateList }\r\n            </div>\r\n            <SendMessageRedux onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\nexport default withAuthMe(Dialogs)\r\n\r\n\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { logoutThunk } from '../../redux/authMe';\r\nimport { getAuthMe } from '../../redux/authMe-selectors';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport logo from './../../assets/startPage/logo2.jpg';\r\nimport cl from './Header.module.css';\r\nimport { Layout, Row, Col, Button } from 'antd';\r\nimport { Typography } from 'antd';\r\n\r\n\r\n\r\n\r\nexport const Header: React.FC<{}> = () => {\r\n\r\n    const isAuthMe = useSelector<AppStateType, boolean>(getAuthMe)\r\n    const dispatch = useDispatch();\r\n\r\n    const logout = useCallback(\r\n        () => dispatch(logoutThunk()),\r\n        [dispatch])\r\n    const { Header } = Layout;\r\n    const { Title, Text } = Typography;\r\n    return (<>\r\n        <Header className=\"site-layout-background\" >\r\n            <Row>\r\n                \r\n                <Col span={20}><Text type=\"warning\" className={cl.name} >HellDream</Text></Col>\r\n                <Col span={4}  >\r\n                    {isAuthMe\r\n                        ? <Button onClick={logout}>Log Out</Button>\r\n                        : <Button><Link to='login/'>Log In</Link></Button>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n\r\n\r\n        {/* <header className={cl.header}>\r\n            <div className={cl.loginPhrase}>\r\n                {isAuthMe\r\n                    ? <div onClick={logout} className={cl.userLogin}>Click to logOut </div>\r\n                    : <div className={cl.logIn}><NavLink to='login/'><div>Log In</div> </NavLink></div>\r\n                }\r\n            </div>\r\n            <div className={cl.name}>HellDream</div>\r\n            <div><img className={cl.logo} src={logo} alt=\"logo\" /></div>\r\n\r\n        </header> */}\r\n    </>\r\n    );\r\n}\r\n","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../common/Validators/Validators';\r\nimport checker from './../common/InputChecker/InputChecker.module.css';\r\nimport { DataIsLoginType } from '../../redux/authMe';\r\nimport { useSelector } from 'react-redux';\r\nimport { getCaptcha } from '../../redux/authMe-selectors';\r\n\r\nconst maxLength30 = maxLengthC(30);\r\n\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<DataIsLoginType, {}>> = (props) => { \r\n\r\n    const captcha = useSelector(getCaptcha)\r\n    \r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name='login' component={InputComp} type=\"text\" placeholder={'login'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='password' component={InputComp} type=\"text\" placeholder={'password'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='checkbox' component='input' type=\"checkbox\" />Remember Me</div>\r\n            {props.error && <div className={checker.commonError}> {props.error} </div>}\r\n            {captcha && <div><img src={captcha} /> \r\n             <Field name='symbols' component={InputComp} type=\"text\" placeholder={'symbols'} /> </div> }\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default reduxForm<DataIsLoginType, {}>({ form: 'login' })(LoginForm);\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DataIsLoginType, putLoginPasswordThunk } from '../../redux/authMe';\r\nimport { getAuthMe } from '../../redux/authMe-selectors';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport cl from '../Login/Login.module.css';\r\nimport LoginForm from './LoginForm';\r\n\r\n\r\nexport const LoginPage: React.FC<{}> = () => {\r\n    \r\n    const authMe = useSelector(getAuthMe)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: DataIsLoginType) => {\r\n        dispatch(putLoginPasswordThunk(formData))\r\n    }\r\n    return <>\r\n        <div className={cl.starter}>LOGIN</div>\r\n        {authMe\r\n            ? <div >You are login successfully</div>\r\n            : <LoginForm onSubmit={onSubmit} />\r\n        }\r\n    </>\r\n}\r\n\r\n","import React from 'react';\r\nimport cl from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst getNavbarData = (state: AppStateType) => { return state.sideBar}\r\n\r\nexport const getFriends = createSelector(getNavbarData, (sideBarPage) => { return sideBarPage.friendsList })\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { FriendsList } from '../../redux/sideBar-reducer';\r\nimport { getFriends } from '../../redux/sideBar-selectors';\r\nimport Friends from './Friends/Friends';\r\nimport cl from './Navbar.module.css';\r\nimport {\r\n    PieChartOutlined,\r\n    FileOutlined,\r\n    UserOutlined,\r\n} from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\n\r\nexport const Navbar: React.FC<{}> = () => {\r\n\r\n    const { Sider } = Layout;\r\n    const [collapsed, setCollapsed] = useState(false)\r\n    let onCollapse = (collapsed: boolean) => {\r\n        setCollapsed(collapsed)\r\n    };\r\n    const { SubMenu } = Menu;\r\n    const friendsList = useSelector<AppStateType, Array<FriendsList>>(getFriends)\r\n\r\n    // let friendsListComp = friendsList.map(fff => <Friends key={fff.id} id={fff.id} name={fff.name} />);\r\n    return (\r\n        \r\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}  >\r\n            <div className=\"logo\" />\r\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<PieChartOutlined />} style={{margin: '0'}}>\r\n                    Starter Page\r\n            </Menu.Item>\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"Profile\">\r\n                    <Menu.Item key=\"2\"><Link to='/profile'>My Profile</Link></Menu.Item>\r\n                    <Menu.Item key=\"3\"><Link to='/music'>Music</Link></Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<UserOutlined />} title=\"Chats\">\r\n                <Menu.Item key=\"4\" icon={<PieChartOutlined />}>\r\n                    <Link to='/dialogs'>Personal Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<PieChartOutlined />}>\r\n                    <Link to='/publicchat'>Public Chat</Link>\r\n                </Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"6\" icon={<PieChartOutlined />}>\r\n                    <Link to='/users'>Users</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" icon={<FileOutlined />}>\r\n                    <Link to='/news'>News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"8\" icon={<FileOutlined />}>\r\n                    <Link to='/settings'>Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n        //     <div className={cl.friendsList}> <h3 className={cl.friendsNav}>FRIENDS</h3> {friendsListComp} </div>\r\n\r\n\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\nimport cl from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n          <ActionLink/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ActionLink() {\r\n  function handleClick() {\r\n    // e.preventDefault();\r\n    console.log('По ссылке кликнули.');\r\n  }\r\n\r\n  return (\r\n    <a href=\"#\" onClick={handleClick}>\r\n      Нажми на меня\r\n    </a>\r\n  );\r\n}\r\n\r\n\r\nexport default News;","import { usersAPI } from \"../api/api\";\r\nimport { UsersDataType } from './../types/types';\r\nimport { BasicThunkType, InferActionsType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst DATA = 'SN/USERS/SETUSERS';\r\nconst CURPAGE = 'SN/USERS/CURPAGE';\r\nconst TOTALCOUNT = 'SN/USERS/TOTALCOUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLEIF';\r\nconst FOL_IS_FETCHING = 'SN/USERS/FOLISFETCH';\r\nconst SET_FILTER = 'SN/USERS/SET-FILTER-FOR-USERS';\r\n\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UsersDataType>,\r\n    currentPage: 1,\r\n    pageSize: 90,\r\n    totalCount: 10,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case DATA:\r\n            return {\r\n                ...state,\r\n                usersData: [...action.usersData]\r\n            };\r\n        case CURPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case TOTALCOUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            };\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.filter\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case FOL_IS_FETCHING:\r\n\r\n            let state02 = {\r\n                ...state,\r\n                followingInProgress: [...state.followingInProgress]\r\n            };\r\n\r\n            action.followingTF ?\r\n                state02.followingInProgress.push(action.userId) :\r\n                state02.followingInProgress = state02.followingInProgress.filter(userId => userId !== action.userId);\r\n\r\n            return state02;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    doUnfollow: (id: number) => ({ type: UNFOLLOW, id } as const),\r\n    doFollow: (id: number) => ({ type: FOLLOW, id } as const),\r\n    setUsers: (usersData: Array< UsersDataType >) => ({ type: DATA, usersData } as const),\r\n    setCurPage: (currentPage: number) => ({ type: CURPAGE, currentPage } as const),\r\n    setTotalCount: (totalCount: number) => ({ type: TOTALCOUNT, totalCount } as const),\r\n    setFilter: (filter: FilterType) => ({ type: SET_FILTER, filter } as const),\r\n    toggleFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const),\r\n    toggleFollowing: (followingTF: boolean, userId: number) => ({ type: FOL_IS_FETCHING, followingTF, userId } as const)\r\n}\r\n\r\n\r\nexport const setUsersThunk = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFetching(true));\r\n    dispatch(actions.setFilter(filter))\r\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalCount(data.totalCount));\r\n}\r\nexport const changeCurPageThunk = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCurPage(page));\r\n    dispatch(actions.toggleFetching(true));\r\n    let data = await usersAPI.changeCurPage(page, pageSize)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n}\r\n\r\nexport const unFollowThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.unFollowDeleteRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doUnfollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.followPostRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doFollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\nexport default usersReducer;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsType>","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersPage = (state: AppStateType) => { return state.usersPage };\r\n\r\nexport const getUsersData = createSelector(getUsersPage, (usersPage) => { return usersPage.usersData; });\r\nexport const getCurrentPage = createSelector(getUsersPage, (usersPage) => { return usersPage.currentPage });\r\nexport const getTotalCount = createSelector(getUsersPage, (usersPage) => { return usersPage.totalCount });\r\nexport const getPageSize = createSelector(getUsersPage, (usersPage) => { return usersPage.pageSize });\r\nexport const getIsFetching = createSelector(getUsersPage, (usersPage) => { return usersPage.isFetching });\r\nexport const getFollowingInProgress = createSelector(getUsersPage, (usersPage) => { return usersPage.followingInProgress });\r\nexport const getFilter = createSelector(getUsersPage, (usersPage) => { return usersPage.filter });","import React, { useState } from 'react';\r\nimport cl from './Pagination.module.css';\r\nimport cn from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { getTotalCount } from '../../../redux/users-selectors';\r\n\r\n\r\n\r\nlet Pagination: React.FC<PropsType> = (props) => {\r\n\r\n    const totalCount = useSelector<AppStateType, number>(getTotalCount)\r\n\r\n\r\n    let portionSize = 5;\r\n    let pagesQuantity = Math.ceil(totalCount / props.pageSize);\r\n    let pA = [];\r\n    for (let i = 1; i <= pagesQuantity; i++) {\r\n        pA.push(i);\r\n    }\r\n\r\n\r\n    const [ currentPortion, setCurrentPortion ] = useState(1);\r\n    let portionNumber = Math.ceil(pagesQuantity / portionSize);\r\n    let leftBorder = ((currentPortion - 1) * portionSize) + 1;\r\n    let rightBorder = portionSize * currentPortion;\r\n \r\n    return (\r\n        <>\r\n            <div className={cn(cl.pages)}>\r\n                {currentPortion > 1 && <button onClick={() => setCurrentPortion(currentPortion-1)}>minus</button> }\r\n                {pA\r\n                .filter(page => page >= leftBorder && page <= rightBorder)\r\n                .map(page => {\r\n                    return (\r\n                        <span onClick={() => { props.changeCurPage(page) }} className={cn({[cl.pageSelected || cl.page]: props.currentPage === page}) } key={page}>{page} </span>\r\n                    );\r\n                })\r\n                }\r\n                {portionNumber > currentPortion && <button onClick={() => setCurrentPortion(currentPortion+1)}>plus</button> }\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Pagination;\r\n\r\n\r\n// types \r\ntype PropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    changeCurPage: (page: number) => void\r\n}\r\n","import { Field, Form, Formik, FormikHelpers } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getFilter } from '../../redux/users-selectors';\r\n\r\nconst SearchForm: React.FC<FormPropsType> = (props) => {\r\n\r\n    const filter = useSelector<AppStateType, FilterType>(getFilter)\r\n\r\n    const onSubmit = (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n        const valuesConverted = {\r\n            ...values,\r\n            friend: values.friend === 'null'\r\n                ? null\r\n                : values.friend === 'true'\r\n                    ? true\r\n                    : values.friend === 'false'\r\n                    && false\r\n        };\r\n        props.onFilterChange(valuesConverted)\r\n        // todo: async setSubmitting\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (<div>\r\n        Search for your friends)\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={\r\n                    {\r\n                        term: filter.term,\r\n                        friend: String(filter.friend) as FriendFormType\r\n                    }\r\n                }\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n               </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default SearchForm\r\n\r\n\r\n\r\n//types\r\ntype FriendFormType = 'null' | 'true' | 'false'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\ntype FormPropsType = {\r\n    onFilterChange: (filter: FilterType) => void\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport avaDefault from '../../../assets/images/zorro.jpg';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { followThunk, unFollowThunk } from '../../../redux/users-reducer';\r\nimport { getFollowingInProgress } from '../../../redux/users-selectors';\r\nimport { UsersDataType } from '../../../types/types';\r\nimport cl from './User.module.css';\r\n\r\n\r\nexport const User: React.FC<PropsType> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const followingInProgress = useSelector<AppStateType ,Array<number>>(getFollowingInProgress)\r\n\r\n    return (<>\r\n        <div className={cl.userItem}>\r\n            <NavLink to={'profile/' + props.user.id}><img className={cl.avatar}\r\n                src={props.user.photos.small != null ? props.user.photos.small : avaDefault}\r\n                alt='ava'></img>\r\n            </NavLink>\r\n\r\n            <div className={cl.country}>{\r\n                props.user.id % 3 === 0\r\n                    ? <div className={cl.off}>offline</div> : <div className={cl.on}>online</div>}</div>\r\n\r\n            <div className={cl.name}>{props.user.name}</div>\r\n            <div className={cl.stars}></div>\r\n            <div className={cl.lastMessage}>{props.user.status ? 'status: ' + props.user.status : '----'}</div>\r\n\r\n            <div>\r\n                {\r\n                    props.user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            dispatch(unFollowThunk(props.user.id))\r\n\r\n                        }} className={cl.statusFollow}>UNFOLLOW</button>\r\n                        : <button disabled={followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            dispatch(followThunk(props.user.id))\r\n\r\n                        }} className={cl.statusFollow}>FOLLOW</button>}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n    );\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    key: number\r\n    user: UsersDataType\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getUsersData } from '../../redux/users-selectors';\r\nimport { UsersDataType } from '../../types/types';\r\nimport { User } from './User/User';\r\nimport cl from './Users.module.css';\r\n\r\n\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n\r\n    const usersGenerate = useSelector<AppStateType, Array<UsersDataType>>(getUsersData)\r\n\r\n    return (\r\n        <>\r\n            <div className={cl.usersItem}>\r\n                {usersGenerate.map((user) =>\r\n                    <User\r\n                        key={user.id}\r\n                        user={user}\r\n                    />)}\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Users;\r\n\r\n//types\r\nexport type PropsType = {\r\n    filter: FilterType\r\n    onFilterChange: (filter: FilterType) => void\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeCurPageThunk, FilterType, setUsersThunk } from '../../redux/users-reducer';\r\nimport { getCurrentPage, getFilter, getIsFetching, getPageSize } from '../../redux/users-selectors';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport cl from './../Users/Users.module.css';\r\nimport SearchForm from './FormType';\r\nimport Users from './Users';\r\nimport { useHistory } from 'react-router-dom';\r\nconst queryString = require('query-string');\r\n\r\n\r\n\r\nexport const UsersPage: React.FC<{}> = (props) => {\r\n\r\n    const isFetching = useSelector<AppStateType, boolean>(getIsFetching)\r\n    const filter = useSelector<AppStateType, FilterType>(getFilter)\r\n    const pageSize = useSelector<AppStateType, number>(getPageSize)\r\n    const currentPage = useSelector<AppStateType, number>(getCurrentPage)\r\n    const dispatch = useDispatch()\r\n\r\n    const history = useHistory()\r\n\r\n    const changeCurPage = (page: number) => {\r\n        dispatch(changeCurPageThunk(page, pageSize))\r\n    }\r\n    const onFilterChange = (filter: FilterType) => {\r\n        dispatch(setUsersThunk(currentPage, pageSize, filter))\r\n    }\r\n    \r\n    useEffect(() => {\r\n    \r\n        const parsedFilter = queryString.parse(history.location.search.substr(1))\r\n        let filterPage = currentPage;\r\n        let filterURL = {term: '', friend: null} as filterURLType\r\n        // !!''~false \r\n        // !!'2'~true\r\n        if(!!parsedFilter.page) filterPage = Number(parsedFilter.page)\r\n        if(!!parsedFilter.term) filterURL = {...filterURL, term: parsedFilter.term as string}\r\n        switch (parsedFilter.friend) {\r\n            case 'null':\r\n                filterURL = { ...filterURL, friend: null }\r\n                break\r\n            case 'true':\r\n                filterURL = { ...filterURL, friend: true }\r\n                break\r\n            case 'false':\r\n                filterURL = { ...filterURL, friend: false }\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        dispatch(setUsersThunk(\r\n            filterPage,\r\n            pageSize, \r\n            filterURL\r\n        ))\r\n    }, [])\r\n    useEffect(() => {\r\n        const parsedForUrl: ForUrlType = {}\r\n        if(!!filter.term) parsedForUrl.term = filter.term\r\n        if(filter.friend !== null ) parsedForUrl.friend = String(filter.friend)\r\n        if(currentPage !== 1) parsedForUrl.page = String(currentPage)\r\n        \r\n        history.push({\r\n            pathname: '/users',\r\n            // search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n            search: queryString.stringify(parsedForUrl)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    return (<>\r\n        <div className={cl.userPage}>\r\n            Choose your friends{isFetching && <span className={cl.preloader}>\r\n                <Preloader />\r\n            </span>}\r\n        </div>\r\n        <div>\r\n            <SearchForm onFilterChange={onFilterChange} />\r\n        </div>\r\n        <div className={cl.pagination}>\r\n            <Pagination\r\n                changeCurPage={changeCurPage}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n            /> </div>\r\n        {!isFetching\r\n            && <Users\r\n                onFilterChange={onFilterChange}\r\n                filter={filter}\r\n            />}\r\n    </>\r\n\r\n    )\r\n}\r\n\r\n\r\n// types\r\ntype ForUrlType = {\r\n    term?: string \r\n    friend?: string \r\n    page?: string\r\n}\r\ntype filterURLType = {\r\n    term: string\r\n    friend: boolean | null\r\n    page: number\r\n}\r\n\r\n","import { authMeSuccessThunk } from \"./authMe\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_INIT = 'SN/APP/SET-INITIALIZE';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nlet appInitialization = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INIT:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setInitialize: () => ({ type: SET_INIT } as const)\r\n}\r\n\r\nexport const setInitializeThunk = (): ThunkType => async dispatch => {\r\n    await dispatch(authMeSuccessThunk());\r\n    dispatch(actions.setInitialize());\r\n}\r\n\r\n\r\nexport default appInitialization;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsType>\r\ntype ActionsType = InferActionsType<typeof actions>","import React, { Suspense, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Route, RouteComponentProps, Switch, useLocation, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport DialogsPage from './components/Dialogs/Dialogs';\r\nimport { Header } from './components/Header/Header';\r\nimport { LoginPage } from './components/Login/Login';\r\nimport Music from './components/Music/Music';\r\nimport { Navbar } from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport { UsersPage } from './components/Users/UsersPage';\r\nimport { setInitializeThunk } from './redux/app-reducer';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport 'antd/dist/antd.css';\r\nimport { Layout, Breadcrumb } from 'antd';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ProfilePage = React.lazy(() => import('./components/Profile/ProfilePage') as Promise<any>);\r\nconst PublicChatPage = React.lazy(() => import('./components/CommonPages/ChatPage'));\r\nconst SettingsPage = React.lazy(() => import('./components/Settings/Settings'));\r\n\r\n\r\nconst AppF: React.FC<RouteComponentProps> = (props) => {\r\n\r\n    const initialized = useSelector((state: AppStateType) => state.appInit.initialized)\r\n    const dispatch = useDispatch()\r\n\r\n   \r\n\r\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occured')\r\n        //for dispatch a function for fix the global error\r\n        //handle error global\r\n    }\r\n   \r\n    useEffect(() => {\r\n        dispatch(setInitializeThunk())\r\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors)\r\n        return window.removeEventListener('unhandledrejection', catchAllUnhandledErrors)\r\n    }, [])\r\n\r\n    const { Content, Footer } = Layout;\r\n    \r\n\r\n    if (!initialized) { return <Preloader /> }\r\n    return (\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n            <Header/>\r\n            <Layout className=\"site-layout\">\r\n                <Navbar/>\r\n                <Content style={{ margin: '0 16px' }}>\r\n                    {/* <Breadcrumb style={{ margin: '16px 0' }}>\r\n                        <Breadcrumb.Item>SocialNetwork</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>by Rembo</Breadcrumb.Item>\r\n                    </Breadcrumb> */}\r\n                    <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                        <Switch>\r\n                            <Route path='/dialogs' render={() => <DialogsPage />} />\r\n                            <Route path='/profile/:userId?' render={() => <Suspense fallback={<h1>Still Loading…</h1>}> <ProfilePage /> </Suspense>} />\r\n                            <Route path='/news' render={News} />\r\n                            <Route path='/music' render={Music} />\r\n                            <Route path='/publicchat' render={() => <Suspense fallback={<h1>Still Loading…</h1>}><PublicChatPage/></Suspense> } />\r\n                            <Route path='/settings' render={() => <Suspense fallback={<h1>Still Loading…</h1>}><SettingsPage/></Suspense> } />\r\n                            {/* <Route path='/settings' render={Settings} /> */}\r\n                            <Route path='/users' render={() =>  <UsersPage />} />\r\n                            <Route path='/login' render={() => <LoginPage />} />\r\n                            <Route path='*' render={() => <NoMatch />} />\r\n                        </Switch>\r\n                    </div>\r\n                </Content>\r\n           </Layout>     \r\n           <Footer style={{ textAlign: 'center' }}>Hell dream ©2020 Created by noirkotyara</Footer>\r\n            \r\n        </Layout>\r\n    )\r\n}\r\n\r\nlet NoMatch = () => {\r\n    let location = useLocation()\r\n    return (\r\n        <div>\r\n            {(location.pathname === '/') ? <div>StarterPage</div> : <div>No match</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet AppMain = withRouter(React.memo(AppF))\r\n\r\nexport default AppMain","\r\nlet initialState = {\r\n    friendsList: [\r\n        { id: 1, name: 'Zorro' },\r\n        { id: 2, name: 'Lyubov' },\r\n        { id: 3, name: 'Kuscherenko' }\r\n    ] as Array<FriendsList>\r\n};\r\n\r\n\r\nconst sideBarReducer = (state = initialState, action: any):initialStateType => {\r\n    return state;\r\n}\r\nexport default sideBarReducer;\r\n\r\n//types\r\nexport type FriendsList = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateType = typeof initialState","import authMe from \"./authMe\";\r\nimport messagesReducer from \"./messages-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sideBarReducer from \"./sideBar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appInitialization from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Action } from \"redux\";\r\n\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    authMe: authMe,\r\n    appInit: appInitialization,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\ntype InferValueType<T> = T extends {[key:string]: infer U}? U : never\r\nexport type InferActionsType<T extends {[key:string]: (...args: any) => any}> = ReturnType<InferValueType<T>>\r\nexport type BasicThunkType<A extends Action,R = Promise<void> > = ThunkAction<R, AppStateType, unknown, A>\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\n\r\nexport type BasicComponentType = React.ComponentType<{store: AppStateType}>//for compose\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport AppMain from './App';\r\n\r\nimport './index.css';\r\nimport store from './redux/redux-store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n           <AppMain/>\r\n         </HashRouter>\r\n     </Provider>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// renderEntireTree(store.getState()); //вже викликаємо\r\n//redux не вертає state змінений, тож викликаємо анонімну функцію, яка отримає зміни і віддасть rerender\r\n// store.subscribe(() => {    переходить у власність виконання connect from  'react-redux'\r\n//     // let newState = store.getState();\r\n//     renderEntireTree();\r\n// });\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"User_userItem__4zQnk\",\"avatar\":\"User_avatar__39gSA\",\"lastMessage\":\"User_lastMessage__1hlgj\",\"name\":\"User_name__2R3Cl\",\"off\":\"User_off__XjvUl\",\"on\":\"User_on__1XQfw\",\"country\":\"User_country__2T7Tr\",\"stars\":\"User_stars__3aZm4\"};","import { AppStateType } from \"./redux-store\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => { return state.authMe.captcha }\r\nexport const getAuthMe = (state: AppStateType) => { return state.authMe.isAuthMe }\r\nexport const getAuthID = (state: AppStateType) => { return state.authMe.id }","import { getIsFetching } from './users-selectors';\r\nimport { dialogsAPI, MessagesDataType, ResultCodeType } from '../api/api';\r\nimport { DataType } from './../api/api';\r\nimport { BasicThunkType, InferActionsType } from './redux-store';\r\nimport ActionButton from 'antd/lib/modal/ActionButton';\r\n\r\nconst ADDMESSAGESTATE = 'SN/MESSAGES/ADD-MESSAGE-STATE'\r\nconst ADDDIALOGSUSERS = 'SN/MESSAGES/ADD-DIALOGS-USERS'\r\nconst STARTCHAT = 'SN/MESSAGES/START-CHAT'\r\nconst SETSELECTEDMESSAGES = 'SN/MESSAGES/SET-SELECTED-MESSAGES'\r\nconst SETISFETCHING = 'SN/MESSAGES/SET-IS-FETCHING'\r\nconst SETMOREMESSAGES = 'SN/MESSAGES/SET-MORE-MESSAGES'\r\nconst DELETEMESSAGE = 'SN/MESSAGES/DELETE-MESSAGES'\r\n\r\nlet initialState = {\r\n    messagesData: [] as Array<MessagesDataType>,\r\n    dialogsUsersData: [] as Array<DataType>,\r\n    selectedUserId: 0,\r\n    isFetching: false\r\n};\r\n\r\n\r\nlet messagesReducer = (state = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case ADDMESSAGESTATE:{\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, action.newMessage]\r\n        }}\r\n        case SETSELECTEDMESSAGES: {\r\n            return {\r\n                ...state,\r\n                messagesData: action.messagesData,\r\n                selectedUserId: action.userId\r\n            }\r\n        }\r\n        case ADDDIALOGSUSERS: {\r\n            return{\r\n                ...state,\r\n                dialogsUsersData: action.users\r\n            }\r\n        }\r\n        case SETISFETCHING: {\r\n            return{\r\n                ...state,\r\n                isFetching: !state.isFetching\r\n            }\r\n        }\r\n        case SETMOREMESSAGES: {\r\n            return{\r\n                ...state,\r\n                messagesData: [...action.messagesData, ...state.messagesData]\r\n            }\r\n        }\r\n        case DELETEMESSAGE: {\r\n            return {\r\n                ...state,\r\n                messagesData: state.messagesData.filter(message => message.id !== action.id)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessage: MessagesDataType) => ({ type: ADDMESSAGESTATE, newMessage } as const),\r\n    getDialogs: (users: Array<DataType>) => ({type: ADDDIALOGSUSERS, users} as const),\r\n    startChat: (userId: number) => ({type: STARTCHAT, userId} as const),\r\n    setSelectedMessages: (messagesData: Array<MessagesDataType>, userId: number) => ({type: SETSELECTEDMESSAGES, messagesData, userId } as const),\r\n    setFetching: () => ({type: SETISFETCHING} as const),\r\n    setMoreMessages: (messagesData: Array<MessagesDataType>) => ({type: SETMOREMESSAGES, messagesData} as const),\r\n    deleteMessage: (id: string) => ({type: DELETEMESSAGE , id} as const)\r\n}\r\n\r\nexport const getDialogsThunk = (): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching())\r\n    let data = await dialogsAPI.getAlldialogs();\r\n    dispatch(actions.getDialogs(data))\r\n    dispatch(actions.setFetching())\r\n}\r\n\r\nexport const startChatThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await dialogsAPI.startChat(userId);\r\n    \r\n    // (data.resultCode === ResultCodeType.Success) && dispatch(getDialogsThunk())\r\n}\r\n\r\nexport const getSelectedChatThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching())\r\n    let response = await dialogsAPI.selectChat(userId);\r\n    if(response.error == null){\r\n        dispatch(actions.setSelectedMessages(response.items, userId))\r\n        dispatch(actions.setFetching())\r\n    }\r\n}\r\n\r\nexport const sendMessageThunk = (userId: number, message: string): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching())\r\n    let response = await dialogsAPI.sendMessageToUser(userId, message);\r\n    \r\n    if(response.resultCode === ResultCodeType.Success) {\r\n        dispatch(actions.sendMessage(response.data.message))\r\n        dispatch(actions.setFetching())\r\n    }\r\n}\r\n\r\nexport const loadMoreMessagesThunk = (userId: number, pageNumber: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching())\r\n    let response = await dialogsAPI.selectChat(userId, pageNumber);\r\n    debugger\r\n   \r\n    if(response.error === null) {\r\n        dispatch(actions.setMoreMessages(response.items))\r\n        dispatch(actions.setFetching())\r\n    }\r\n}\r\n// \"id\": \"b3a553a2-971c-4ccb-8a3d-f0cefbf2e069\",\r\n\r\nexport const deleteMessageThunk = (messageId: string): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setFetching())\r\n    let response = await dialogsAPI.deleteMessage(messageId);\r\n    debugger\r\n    if(response.resultCode === ResultCodeType.Success) {\r\n        dispatch(actions.deleteMessage(messageId))\r\n        dispatch(actions.setFetching())\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default messagesReducer;\r\n\r\n//types\r\n\r\nexport type DialogsUsersDataType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\nexport type initialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsType>\r\n","import { ResultCodeType } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = 'SN/AUTHME/SET-USER-DATA';\r\nconst IS_AUTH_ME = 'SN/AUTHME/IS-AUTH-ME';\r\nconst CAPTCHA = 'SN/AUTHME/CAPTCHA-SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuthMe: false as boolean | undefined,\r\n    checkbox: false,\r\n    captcha: null as string | null\r\n};\r\n\r\n\r\nconst authMe = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case IS_AUTH_ME:\r\n            return {\r\n                ...state,\r\n                isAuthMe: action.isAuthMe\r\n            }\r\n        case CAPTCHA: {\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMeSuccessThunk = (): ThunkType => async dispatch => {\r\n    let data = await authAPI.isAuthMe()\r\n    dispatch(actions.setUserData({ ...data.data }));\r\n    (data.resultCode === ResultCodeType.Success) && dispatch(actions.setAuthMe(true));\r\n}\r\n\r\n\r\nexport const putLoginPasswordThunk = (data: DataIsLoginType): ThunkType => async dispatch => {\r\n    let dataR = await authAPI.isLogin(data);\r\n    if (dataR.resultCode === 0) dispatch(authMeSuccessThunk());\r\n    else {\r\n        if (dataR.resultCode === 10) { dispatch(getCaptchaThunk()) }\r\n        let catchError = dataR.messages.length > 0 ? dataR.messages[0] : 'Some errors';\r\n        dispatch(stopSubmit('login', { _error: catchError }));\r\n    }\r\n\r\n}\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n    let dataR = await authAPI.isLogout();\r\n    (dataR.resultCode === 0) &&\r\n        dispatch(actions.setAuthMe(false));\r\n    dispatch(actions.setUserData({ ...dataR.data }));\r\n}\r\nconst getCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaURL();\r\n    dispatch(actions.setCaptcha(data.url))\r\n}\r\n\r\n\r\nexport default authMe;\r\n\r\n//types\r\ntype DataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuthMe?: boolean | undefined\r\n    captcha?: string | null\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\nexport type initialStateType = typeof initialState;\r\nexport const actions = {\r\n    setUserData: ({ id, login, email, isAuthMe, captcha = null }: DataType) => ({ type: SET_USER_DATA, data: { id, login, email, isAuthMe, captcha } } as const),\r\n    setAuthMe: (isAuthMe: boolean) => ({ type: IS_AUTH_ME, isAuthMe } as const),\r\n    setCaptcha: (captcha: string) => ({ type: CAPTCHA, captcha } as const)\r\n\r\n}\r\nexport type DataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\n\r\n","import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport cl from './Preloader.module.css';\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={cl.divPreloader}>\r\n            <img className={cl.preloader} src={preloader} alt=\"preloader\" />\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","\r\ntype ValidatorsType = (value: null | string) => undefined | string\r\n\r\nexport const required: ValidatorsType = (value) => {\r\n   return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport let maxLengthC = (maxLen: number): ValidatorsType => (value) => {\r\n   return value && value.length < maxLen ? undefined : `${maxLen} is reached`} ","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\nimport cl from './InputChecker.module.css';\r\n\r\ntype PropsType = {\r\n    placeholder: string\r\n}\r\n\r\nexport const InputComp: React.FC<WrappedFieldProps & PropsType>  = ({ input, meta, placeholder }) => {\r\n    return <>\r\n            <div className={(meta.error && meta.visited && !meta.active) && cl.error}>\r\n            <input  {...input} placeholder={placeholder}></input>\r\n        </div>\r\n        <span className={cl.messageError}>{(meta.visited && !meta.active) && meta.error}</span>\r\n    </>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2BwxY\",\"dialogsItems\":\"Dialogs_dialogsItems__5NlB3\",\"dialog\":\"Dialogs_dialog__39fd-\",\"message\":\"Dialogs_message__cuXq7\",\"active\":\"Dialogs_active__17luP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"Users_userPage__3pdtU\",\"butGET\":\"Users_butGET__3mBVF\",\"preloader\":\"Users_preloader__3ube4\",\"pagination\":\"Users_pagination__1ZtKZ\"};"],"sourceRoot":""}