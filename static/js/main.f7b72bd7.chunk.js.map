{"version":3,"sources":["components/common/Preloader/Preloader.jsx","assets/images/zorro.jpg","components/Dialogs/Dialog/Dialog.module.css","components/common/Pagination/Pagination.module.css","components/common/Preloader/Preloader.module.css","redux/profile-reducer.ts","components/hoc/hoc.tsx","components/common/Preloader/preloader.svg","assets/images/kuscherenko.jpg","assets/images/lyubov.jpg","components/Dialogs/Message/Message.module.css","components/Header/Header.module.css","components/Login/Login.module.css","api/api.ts","redux/messages-reducer.ts","redux/messages-selectors.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Form/SendMessageRedux.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","redux/authMe.ts","components/Header/Header.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Music/Music.tsx","redux/sideBar-selectors.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Settings/Settings.tsx","redux/users-reducer.ts","components/common/Pagination/Pagination.tsx","components/Users/FormType.tsx","components/Users/User/User.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","redux/app-reducer.ts","App.tsx","redux/sideBar-reducer.ts","redux/redux-store.ts","serviceWorker.js","index.tsx","redux/users-selectors.ts","components/Users/User/User.module.css","redux/authMe-selectors.ts","components/common/Validators/Validators.tsx","components/common/InputChecker/InputChecker.tsx","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","components/common/InputChecker/InputChecker.module.css"],"names":["Preloader","className","cl","divPreloader","preloader","src","alt","module","exports","SETPROF","POSTF","initialState","postsData","id","message","likes","profile","status","actions","setProfile","type","updateStatusAC","postForm","content","uploadPhoto","image","setProfileThunk","userID","dispatch","a","userProfile","showProfile","data","setStatusThunk","updateStatus","resultCode","ResultCodeType","Success","getStatusThunk","getStatus","uploadPhotoThunk","photos","updateProfileThunk","getState","updateProfile","authMe","messages","length","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","withAuthMe","Component","props","useSelector","getAuthMe","to","instance","axios","create","baseURL","withCredentials","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","then","response","changeCurPage","page","unFollowDeleteRequest","delete","followPostRequest","post","authAPI","isAuthMe","isLogin","email","login","password","rememberMe","checkbox","captcha","symbols","isLogout","put","file","formData","FormData","append","securityAPI","getCaptchaURL","messagesData","dialogsUsersData","name","ava","zorroAva","lyubovAva","kuscherenkoAva","idNum","newMessageText","messagesReducer","getDialogsData","messagesPage","getMessages","createSelector","dialogsPage","getDialogs","Dialog","path","dialog","avatar","activeClassName","active","SendMessageRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","maxLength10","component","InputComp","sendMessage","maxLengthC","Message","dialogsGenerate","messagesGenerate","dispatchR","useDispatch","dialogsGenerateList","map","d","key","messagesGenerateList","m","dialogs","dialogsItems","reset","IS_AUTH_ME","CAPTCHA","authMeSuccessThunk","setUserData","setAuthMe","getCaptchaThunk","setCaptcha","url","Header","logout","useCallback","dataR","Layout","Text","Typography","Title","span","onClick","maxLength30","getCaptcha","placeholder","error","checker","commonError","LoginPage","starter","catchError","Music","getFriends","sideBar","sideBarPage","friendsList","Navbar","Sider","useState","collapsed","setCollapsed","SubMenu","Menu","collapsible","onCollapse","theme","defaultSelectedKeys","mode","Item","icon","PieChartOutlined","style","margin","UserOutlined","title","FileOutlined","ActionLink","href","console","log","News","Settings","FOLLOW","UNFOLLOW","DATA","CURPAGE","SET_FILTER","usersData","totalCount","isFetching","followingInProgress","filter","followingTF","userId","setUsersThunk","items","usersReducer","u","followed","state02","push","Pagination","getTotalCount","pagesQuantity","Math","ceil","pA","i","currentPortion","setCurrentPortion","portionNumber","leftBorder","rightBorder","cn","pages","pageSelected","SearchForm","getFilter","enableReinitialize","initialValues","String","values","setSubmitting","valuesConverted","onFilterChange","isSubmitting","as","value","disabled","User","getFollowingInProgress","userItem","user","small","avaDefault","country","off","on","stars","lastMessage","some","statusFollow","Users","usersGenerate","getUsersData","usersItem","queryString","require","UsersPage","getIsFetching","getPageSize","getCurrentPage","history","useHistory","useEffect","parsedFilter","parse","location","search","substr","filterPage","filterURL","Number","parsedForUrl","pathname","stringify","userPage","pagination","changeCurPageThunk","SET_INIT","initialized","appInitialization","ProfilePage","React","lazy","PublicChatPage","NoMatch","useLocation","AppMain","withRouter","memo","appInit","catchAllUnhandledErrors","e","alert","window","addEventListener","removeEventListener","Content","Footer","minHeight","padding","render","fallback","textAlign","sideBarReducer","createStore","combineReducers","applyMiddleware","store","profilePage","usersPage","formReducer","composeWithDevTools","thunkMiddleware","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","getUsersPage","getAuthID","undefined","maxLen","input","meta","visited","messageError"],"mappings":"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","file":"static/js/main.f7b72bd7.chunk.js","sourcesContent":["import React from 'react';\r\nimport preloader from './preloader.svg';\r\nimport cl from './Preloader.module.css';\r\n\r\nlet Preloader = () => {\r\n    return (\r\n        <div className={cl.divPreloader}>\r\n            <img className={cl.preloader} src={preloader} alt=\"preloader\" />\r\n        </div>\r\n    );\r\n}\r\nexport default Preloader;","module.exports = __webpack_public_path__ + \"static/media/zorro.097a33ad.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3izJD\",\"active\":\"Dialog_active__1j-Og\",\"avatar\":\"Dialog_avatar__1n0LU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pages\":\"Pagination_pages__3ksA0\",\"page\":\"Pagination_page__1iloC\",\"pageSelected\":\"Pagination_pageSelected__EFH4Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__UMRl1\",\"divPreloader\":\"Preloader_divPreloader__3iYxB\"};","import { FormAction, stopSubmit } from \"redux-form\";\r\nimport { ResultCodeType, userProfile } from \"../api/api\";\r\nimport { ProfileType } from \"../types/types\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SETPROF = 'SN/PROFILE/SET-PROFILE';\r\nconst UPDATESTATUS = 'SN/PROFILE/SET-STATUS';\r\nconst POSTF = 'SN/PROFILE/POST-FORM-newPostText';\r\nconst UPLOAD_PHOTO = 'SN/PROFILE/UPLOAD-PHOTO';\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        { id: 1, message: 'Hello', likes: 15 },\r\n        { id: 2, message: 'Bonjour', likes: 30 },\r\n        { id: 3, message: 'Привет', likes: 15000 },\r\n    ] as Array<PostsDataType>,\r\n    // newPostText: '',\r\n    profile: null as object | null,\r\n    status: 'no status' \r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case POSTF:\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.content,\r\n                likes: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost]\r\n            }\r\n        case SETPROF:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case UPLOAD_PHOTO:\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.image }\r\n            }\r\n        case UPDATESTATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    setProfile: (profile: ProfileType) => ({ type: SETPROF, profile } as const),\r\n    updateStatusAC: (status: string) => ({ type: UPDATESTATUS, status } as const),\r\n    postForm: (content: string) => ({ type: POSTF, content } as const),\r\n    uploadPhoto: (image: string) => ({ type: UPLOAD_PHOTO, image } as const)\r\n}\r\n\r\nexport const setProfileThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.showProfile(userID);\r\n    dispatch(actions.setProfile(data));\r\n}\r\n\r\nexport const setStatusThunk = (status: string): ThunkType => async (dispatch) => {\r\n    //обработка ошибок\r\n    // try\r\n    // {\r\n        let data = await userProfile.updateStatus(status);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.updateStatusAC(status))\r\n    // }\r\n    // catch(error)\r\n    // {\r\n    //     alert(error)\r\n    // }\r\n    \r\n\r\n}\r\nexport const getStatusThunk = (userID: number): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.getStatus(userID)\r\n    dispatch(actions.updateStatusAC(data));\r\n}\r\n\r\nexport const uploadPhotoThunk = (image: File): ThunkType => async (dispatch) => {\r\n    let data = await userProfile.uploadPhoto(image);\r\n    (data.resultCode === ResultCodeType.Success) &&\r\n        dispatch(actions.uploadPhoto(data.data.photos));\r\n}\r\n\r\nexport const updateProfileThunk = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    let data = await userProfile.updateProfile(profile);\r\n    if (data.resultCode === 0) dispatch(setProfileThunk(getState().authMe.id))\r\n    else {\r\n        if (data.messages.length > 0) {\r\n            dispatch(stopSubmit('editProfile', { _error: data.messages }))\r\n            return Promise.reject(data.messages)\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default profileReducer;\r\n\r\n//types \r\nexport type PostsDataType = {\r\n    id: number\r\n    message: string\r\n    likes: number\r\n}\r\n\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>","import React, { Suspense } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getAuthMe } from '../../redux/authMe-selectors';\r\n\r\nexport const withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n    return (props: any) => {\r\n        const isAuthMe = useSelector(getAuthMe)\r\n        if (isAuthMe) return <Component {...props as P} />\r\n        else return <Redirect to='/login'></Redirect>\r\n    }\r\n}\r\n\r\nexport function withSuspense<WCP>(Component: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return (<Suspense fallback={<h1>Still Loading…</h1>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n        )\r\n\r\n    }\r\n} \r\n\r\n//left behind)\r\n// export let withAuthMe = <P extends object>(Component: React.ComponentType<P>) => {\r\n//     return class WrappedContainer extends React.Component<P & initialStateType> {\r\n//         render() {\r\n//             let {isAuthMe, ...restProps} = this.props;\r\n//             if (this.props.isAuthMe) return <Component {...restProps as P} />\r\n//             else return <Redirect to='/login'></Redirect>\r\n//         }\r\n//     }\r\n// }","module.exports = __webpack_public_path__ + \"static/media/preloader.c04e3ad7.svg\";","module.exports = __webpack_public_path__ + \"static/media/kuscherenko.7bc7e317.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lyubov.fc2a1a49.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__xSb92\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__3b1l2\",\"name\":\"Header_name__wsK4x\",\"header\":\"Header_header__10dxk\",\"loginPhrase\":\"Header_loginPhrase__3mCng\",\"userLogin\":\"Header_userLogin__230Sn\",\"logIn\":\"Header_logIn__IbfsR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"starter\":\"Login_starter__1tZcA\"};","import { ProfileType, UsersDataType } from './../types/types';\r\nimport axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"30bffa88-490b-405c-83b6-e6b58d235873\"\r\n    }\r\n});\r\n\r\nexport type UsersAPIResponseType = {\r\n    items: Array<UsersDataType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\nexport type FollowUnfollowResponseType = {\r\n    data: {}\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term: string , friend: null | boolean) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${currentPage}&count=${pageSize}&term=${term}${friend === null? '' : '&friend=' + friend}` )\r\n            .then(response => response.data);\r\n    },\r\n    changeCurPage(page: number, pageSize: number) {\r\n        return instance.get<UsersAPIResponseType>(`users?page=${page}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    unFollowDeleteRequest(id: number) {\r\n        return instance.delete(`follow/${id}`)\r\n            .then(response => response.data) as Promise<FollowUnfollowResponseType>\r\n    },\r\n    followPostRequest(id: number) {\r\n        return instance.post<FollowUnfollowResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    }\r\n};\r\n\r\nexport type DataIsAuthMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type DataIsLoginType = {\r\n    userId: number\r\n}\r\n\r\nexport enum ResultCodeType {\r\n    Success = 0,\r\n    Error = 10\r\n}\r\n\r\nexport type AuthAPIResponseType<dataType, ResultCodeType> = {\r\n    data: dataType\r\n    resultCode: ResultCodeType\r\n    messages: [] | string\r\n}\r\ntype dataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\n\r\nexport const authAPI = {\r\n    isAuthMe() {\r\n        return instance.get<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/me`)\r\n            .then(response => response.data)\r\n    },\r\n    isLogin(data: dataIsLoginType) {\r\n        return instance.post<AuthAPIResponseType<DataIsLoginType, ResultCodeType>>\r\n            (`auth/login`, {\r\n                email: data.login,\r\n                password: data.password,\r\n                rememberMe: data.checkbox,\r\n                captcha: data.symbols\r\n            })\r\n            .then(response => { return response.data })\r\n    },\r\n    isLogout() {\r\n        return instance.delete<AuthAPIResponseType<DataIsAuthMeType, ResultCodeType>>(`auth/login`)\r\n            .then(response => { return response.data })\r\n    }\r\n}\r\n\r\n\r\nexport const userProfile = {\r\n    showProfile(userID: number) {\r\n        return instance.get<ProfileType>(`profile/${userID}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile/status`, { status: status })\r\n            .then(response => response.data)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get<string>(`/profile/status/${userID}`)\r\n            .then(response => response.data)\r\n\r\n    },\r\n    uploadPhoto(file: File) {\r\n        let formData = new FormData();\r\n        formData.append('image', file);\r\n        return instance.put<AuthAPIResponseType<{photos: string}, ResultCodeType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        })\r\n            .then(response => response.data)\r\n    },\r\n    updateProfile(profile: ProfileType ) {\r\n        return instance.put<AuthAPIResponseType<{}, ResultCodeType>>(`/profile`, profile)\r\n            .then(response => response.data);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaURL() {\r\n        return instance.get<{url: string}>(`/security/get-captcha-url`)\r\n            .then(response => response.data);\r\n    }\r\n}","import zorroAva from './../assets/images/zorro.jpg';\r\nimport kuscherenkoAva from './../assets/images/kuscherenko.jpg';\r\nimport lyubovAva from './../assets/images/lyubov.jpg';\r\nimport { InferActionsType } from './redux-store';\r\n\r\nconst ADDMESSAGESTATE = 'SN/MESSAGES/ADD-MESSAGE-STATE';\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        { id: 1, message: 'злтщототолиолиг' },\r\n        { id: 2, message: 'Hello' },\r\n        { id: 3, message: 'Privet' },\r\n        { id: 4, message: 'Au revoir' }\r\n    ] as Array<MessagesDataType>,\r\n    dialogsUsersData: [\r\n        { id: 1, name: 'Zorro', ava: zorroAva },\r\n        { id: 2, name: 'Lyubov', ava: lyubovAva },\r\n        { id: 3, name: 'Kuscherenko', ava: kuscherenkoAva }\r\n    ] as Array<DialogsUsersDataType>\r\n};\r\n\r\nlet idNum = 5;\r\nlet messagesReducer = (state = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case ADDMESSAGESTATE:\r\n            idNum++;\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {\r\n                    id: idNum,\r\n                    message: action.newMessageText\r\n                }]\r\n    }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageText: string) => ({ type: ADDMESSAGESTATE, newMessageText })\r\n}\r\n\r\nexport default messagesReducer;\r\n\r\n//types\r\nexport type MessagesDataType = {\r\n    id?: number\r\n    message: string\r\n};\r\nexport type DialogsUsersDataType = {\r\n    id: number\r\n    name: string\r\n    ava: string\r\n}\r\nexport type initialStateType = typeof initialState\r\n\r\ntype ActionsType = InferActionsType<typeof actions>\r\n","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst getDialogsData = (state: AppStateType) => { return state.messagesPage}\r\n\r\nexport const getMessages = createSelector(getDialogsData, (dialogsPage) => { return dialogsPage.messagesData })\r\nexport const getDialogs = createSelector(getDialogsData, (dialogsPage) => { return dialogsPage.dialogsUsersData })\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DialogsUsersDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Dialog.module.css';\r\n\r\n\r\nconst Dialog: React.FC<DialogsUsersDataType> = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={cl.dialog}>\r\n            <span> <img className={cl.avatar} src={props.ava} alt='ava' /> </span>\r\n            <NavLink to={path} activeClassName={cl.active}>  {props.name} </NavLink></div>);\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport { Field,  InjectedFormProps,  reduxForm } from 'redux-form';\r\nimport cl from './../Dialogs.module.css';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\nexport type SendMessageType = {\r\n    newMessageText: string\r\n}\r\n\r\nlet SendMessage: React.FC<InjectedFormProps<SendMessageType, {}>> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name='newMessageText' type=\"text\" validate={[required, maxLength10]} component={InputComp} />\r\n            <button type=\"submit\" className={cl.sendMessage}>send</button>\r\n        </form>\r\n    </>;\r\n}\r\n\r\nexport const SendMessageRedux = reduxForm<SendMessageType>({ form: 'sendMessage' })(SendMessage);\r\n\r\nlet maxLength10 = maxLengthC(10);","import React from 'react';\r\nimport { MessagesDataType } from '../../../redux/messages-reducer';\r\nimport cl from './Message.module.css';\r\n\r\n\r\n\r\nconst Message = (props: MessagesDataType) => {\r\n    return (<div className={cl.message}>{props.message}</div>);\r\n}\r\n\r\n\r\nexport default Message;","import React, { Dispatch } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { FormAction, reset } from 'redux-form';\r\nimport { actions, DialogsUsersDataType, MessagesDataType } from '../../redux/messages-reducer';\r\nimport { getDialogs, getMessages } from '../../redux/messages-selectors';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport Dialog from './Dialog/Dialog';\r\nimport cl from './Dialogs.module.css';\r\nimport { SendMessageRedux } from './Form/SendMessageRedux';\r\nimport Message from './Message/Message';\r\n\r\nconst Dialogs: React.FC<{}> = (props) => {\r\n\r\n    const dialogsGenerate = useSelector<AppStateType,Array<DialogsUsersDataType>>(getDialogs)\r\n    const messagesGenerate = useSelector<AppStateType,Array<MessagesDataType>>(getMessages)\r\n    const dispatchR = useDispatch()\r\n            \r\n    let onSubmit = (formData: {newMessageText: string}, dispatch: Dispatch<FormAction> )=> {\r\n        dispatchR(actions.sendMessage(formData.newMessageText))\r\n        dispatch(reset('sendMessage'))\r\n    }\r\n\r\n    let dialogsGenerateList = dialogsGenerate.map(d => <Dialog key={d.id} name={d.name} id={d.id} ava={d.ava} />);\r\n    let messagesGenerateList = messagesGenerate.map(m => <Message key={m.id} message={m.message} />);\r\n\r\n    return (\r\n        <div className={cl.dialogs}>\r\n            <div className={cl.dialogsItems}>\r\n                {dialogsGenerateList}\r\n            </div>\r\n            <div className={cl.messages}>\r\n                {messagesGenerateList}\r\n            </div>\r\n            <SendMessageRedux onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n}\r\nexport default withAuthMe(Dialogs)\r\n\r\n\r\n","import { ResultCodeType } from './../api/api';\r\nimport { FormAction, stopSubmit } from \"redux-form\";\r\nimport { authAPI, securityAPI } from \"../api/api\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = 'SN/AUTHME/SET-USER-DATA';\r\nconst IS_AUTH_ME = 'SN/AUTHME/IS-AUTH-ME';\r\nconst CAPTCHA = 'SN/AUTHME/CAPTCHA-SUCCESS';\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuthMe: false as boolean | undefined,\r\n    checkbox: false,\r\n    captcha: null as string | null\r\n};\r\n\r\n\r\nconst authMe = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case IS_AUTH_ME:\r\n            return {\r\n                ...state,\r\n                isAuthMe: action.isAuthMe\r\n            }\r\n        case CAPTCHA: {\r\n            return {\r\n                ...state,\r\n                captcha: action.captcha\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const authMeSuccessThunk = (): ThunkType => async dispatch => {\r\n    let data = await authAPI.isAuthMe()\r\n    dispatch(actions.setUserData({ ...data.data }));\r\n    (data.resultCode === ResultCodeType.Success) && dispatch(actions.setAuthMe(true));\r\n}\r\n\r\n\r\nexport const putLoginPasswordThunk = (data: DataIsLoginType): ThunkType => async dispatch => {\r\n    let dataR = await authAPI.isLogin(data);\r\n    if (dataR.resultCode === 0) dispatch(authMeSuccessThunk());\r\n    else {\r\n        if (dataR.resultCode === 10) { dispatch(getCaptchaThunk()) }\r\n        let catchError = dataR.messages.length > 0 ? dataR.messages[0] : 'Some errors';\r\n        dispatch(stopSubmit('login', { _error: catchError }));\r\n    }\r\n\r\n}\r\nexport const logoutThunk = (): ThunkType => async (dispatch) => {\r\n    let dataR = await authAPI.isLogout();\r\n    (dataR.resultCode === 0) &&\r\n        dispatch(actions.setAuthMe(false));\r\n    dispatch(actions.setUserData({ ...dataR.data }));\r\n}\r\nconst getCaptchaThunk = (): ThunkType => async (dispatch) => {\r\n    let data = await securityAPI.getCaptchaURL();\r\n    dispatch(actions.setCaptcha(data.url))\r\n}\r\n\r\n\r\nexport default authMe;\r\n\r\n//types\r\ntype DataType = {\r\n    id: number | null\r\n    login: string | null\r\n    email: string | null\r\n    isAuthMe?: boolean | undefined\r\n    captcha?: string | null\r\n}\r\ntype ActionsType = InferActionsType<typeof actions>\r\nexport type initialStateType = typeof initialState;\r\nexport const actions = {\r\n    setUserData: ({ id, login, email, isAuthMe, captcha = null }: DataType) => ({ type: SET_USER_DATA, data: { id, login, email, isAuthMe, captcha } } as const),\r\n    setAuthMe: (isAuthMe: boolean) => ({ type: IS_AUTH_ME, isAuthMe } as const),\r\n    setCaptcha: (captcha: string) => ({ type: CAPTCHA, captcha } as const)\r\n\r\n}\r\nexport type DataIsLoginType = {\r\n    checkbox: boolean\r\n    symbols: string\r\n    password: string\r\n    login: string\r\n}\r\ntype ThunkType = BasicThunkType<ActionsType | FormAction>\r\n\r\n","import React, { useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { logoutThunk } from '../../redux/authMe';\r\nimport { getAuthMe } from '../../redux/authMe-selectors';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport logo from './../../assets/startPage/logo2.jpg';\r\nimport cl from './Header.module.css';\r\nimport { Layout, Row, Col, Button } from 'antd';\r\nimport { Typography } from 'antd';\r\n\r\n\r\n\r\n\r\nexport const Header: React.FC<{}> = () => {\r\n\r\n    const isAuthMe = useSelector<AppStateType, boolean>(getAuthMe)\r\n    const dispatch = useDispatch();\r\n\r\n    const logout = useCallback(\r\n        () => dispatch(logoutThunk()),\r\n        [dispatch])\r\n    const { Header } = Layout;\r\n    const { Title, Text } = Typography;\r\n    return (<>\r\n        <Header className=\"site-layout-background\" >\r\n            <Row>\r\n                \r\n                <Col span={20}><Text type=\"warning\" className={cl.name} >HellDream</Text></Col>\r\n                <Col span={4}  >\r\n                    {isAuthMe\r\n                        ? <Button onClick={logout}>Log Out</Button>\r\n                        : <Button><Link to='login/'>Log In</Link></Button>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Header>\r\n\r\n\r\n        {/* <header className={cl.header}>\r\n            <div className={cl.loginPhrase}>\r\n                {isAuthMe\r\n                    ? <div onClick={logout} className={cl.userLogin}>Click to logOut </div>\r\n                    : <div className={cl.logIn}><NavLink to='login/'><div>Log In</div> </NavLink></div>\r\n                }\r\n            </div>\r\n            <div className={cl.name}>HellDream</div>\r\n            <div><img className={cl.logo} src={logo} alt=\"logo\" /></div>\r\n\r\n        </header> */}\r\n    </>\r\n    );\r\n}\r\n","import cl from '../Login/Login.module.css';\r\nimport React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../common/Validators/Validators';\r\nimport checker from './../common/InputChecker/InputChecker.module.css';\r\nimport { DataIsLoginType } from '../../redux/authMe';\r\nimport { useSelector } from 'react-redux';\r\nimport { getCaptcha } from '../../redux/authMe-selectors';\r\n\r\nconst maxLength30 = maxLengthC(30);\r\n\r\n\r\nlet LoginForm: React.FC<InjectedFormProps<DataIsLoginType, {}>> = (props) => { \r\n\r\n    const captcha = useSelector(getCaptcha)\r\n    \r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name='login' component={InputComp} type=\"text\" placeholder={'login'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='password' component={InputComp} type=\"text\" placeholder={'password'} validate={[required, maxLength30]} /></div>\r\n            <div><Field name='checkbox' component='input' type=\"checkbox\" />Remember Me</div>\r\n            {props.error && <div className={checker.commonError}> {props.error} </div>}\r\n            {captcha && <div><img src={captcha} /> \r\n             <Field name='symbols' component={InputComp} type=\"text\" placeholder={'symbols'} /> </div> }\r\n            <div><button>Login</button></div>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport default reduxForm<DataIsLoginType, {}>({ form: 'login' })(LoginForm);\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DataIsLoginType, putLoginPasswordThunk } from '../../redux/authMe';\r\nimport { getAuthMe } from '../../redux/authMe-selectors';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport cl from '../Login/Login.module.css';\r\nimport LoginForm from './LoginForm';\r\n\r\n\r\nexport const LoginPage: React.FC<{}> = () => {\r\n    \r\n    const authMe = useSelector(getAuthMe)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: DataIsLoginType) => {\r\n        dispatch(putLoginPasswordThunk(formData))\r\n    }\r\n    return <>\r\n        <div className={cl.starter}>LOGIN</div>\r\n        {authMe\r\n            ? <div >You are login successfully</div>\r\n            : <LoginForm onSubmit={onSubmit} />\r\n        }\r\n    </>\r\n}\r\n\r\n","import React from 'react';\r\nimport cl from './Music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import { createSelector } from \"reselect\"\r\nimport { AppStateType } from \"./redux-store\"\r\n\r\nconst getNavbarData = (state: AppStateType) => { return state.sideBar}\r\n\r\nexport const getFriends = createSelector(getNavbarData, (sideBarPage) => { return sideBarPage.friendsList })\r\n","import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { FriendsList } from '../../redux/sideBar-reducer';\r\nimport { getFriends } from '../../redux/sideBar-selectors';\r\nimport Friends from './Friends/Friends';\r\nimport cl from './Navbar.module.css';\r\nimport {\r\n    PieChartOutlined,\r\n    FileOutlined,\r\n    UserOutlined,\r\n} from '@ant-design/icons';\r\nimport { Layout, Menu } from 'antd';\r\n\r\nexport const Navbar: React.FC<{}> = () => {\r\n\r\n    const { Sider } = Layout;\r\n    const [collapsed, setCollapsed] = useState(false)\r\n    let onCollapse = (collapsed: boolean) => {\r\n        setCollapsed(collapsed)\r\n    };\r\n    const { SubMenu } = Menu;\r\n    const friendsList = useSelector<AppStateType, Array<FriendsList>>(getFriends)\r\n\r\n    // let friendsListComp = friendsList.map(fff => <Friends key={fff.id} id={fff.id} name={fff.name} />);\r\n    return (\r\n        \r\n        <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}  >\r\n            <div className=\"logo\" />\r\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                <Menu.Item key=\"1\" icon={<PieChartOutlined />} style={{margin: '0'}}>\r\n                    Starter Page\r\n            </Menu.Item>\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"Profile\">\r\n                    <Menu.Item key=\"2\"><Link to='/profile'>My Profile</Link></Menu.Item>\r\n                    <Menu.Item key=\"3\"><Link to='/music'>Music</Link></Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<UserOutlined />} title=\"Chats\">\r\n                <Menu.Item key=\"4\" icon={<PieChartOutlined />}>\r\n                    <Link to='/dialogs'>Personal Messages</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"5\" icon={<PieChartOutlined />}>\r\n                    <Link to='/publicchat'>Public Chat</Link>\r\n                </Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"6\" icon={<PieChartOutlined />}>\r\n                    <Link to='/users'>Users</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"7\" icon={<FileOutlined />}>\r\n                    <Link to='/news'>News</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"8\" icon={<FileOutlined />}>\r\n                    <Link to='/settings'>Settings</Link>\r\n                </Menu.Item>\r\n            </Menu>\r\n        </Sider>\r\n        //     <div className={cl.friendsList}> <h3 className={cl.friendsNav}>FRIENDS</h3> {friendsListComp} </div>\r\n\r\n\r\n    );\r\n\r\n}\r\n","import React from 'react';\r\nimport cl from './News.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n          <ActionLink/>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ActionLink() {\r\n  function handleClick() {\r\n    // e.preventDefault();\r\n    console.log('По ссылке кликнули.');\r\n  }\r\n\r\n  return (\r\n    <a href=\"#\" onClick={handleClick}>\r\n      Нажми на меня\r\n    </a>\r\n  );\r\n}\r\n\r\n\r\nexport default News;","import React from 'react';\r\nimport cl from './Settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import { usersAPI } from \"../api/api\";\r\nimport { UsersDataType } from './../types/types';\r\nimport { BasicThunkType, InferActionsType } from './redux-store';\r\n\r\nconst FOLLOW = 'SN/USERS/FOLLOW';\r\nconst UNFOLLOW = 'SN/USERS/UNFOLLOW';\r\nconst DATA = 'SN/USERS/SETUSERS';\r\nconst CURPAGE = 'SN/USERS/CURPAGE';\r\nconst TOTALCOUNT = 'SN/USERS/TOTALCOUNT';\r\nconst TOGGLE_IS_FETCHING = 'SN/USERS/TOGGLEIF';\r\nconst FOL_IS_FETCHING = 'SN/USERS/FOLISFETCH';\r\nconst SET_FILTER = 'SN/USERS/SET-FILTER-FOR-USERS';\r\n\r\n\r\nlet initialState = {\r\n    usersData: [] as Array<UsersDataType>,\r\n    currentPage: 1,\r\n    pageSize: 90,\r\n    totalCount: 10,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: true }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                usersData: state.usersData.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return { ...u, followed: false }\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        case DATA:\r\n            return {\r\n                ...state,\r\n                usersData: [...action.usersData]\r\n            };\r\n        case CURPAGE:\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        case TOTALCOUNT:\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount\r\n            };\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filter: action.filter\r\n            };\r\n        case TOGGLE_IS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        case FOL_IS_FETCHING:\r\n\r\n            let state02 = {\r\n                ...state,\r\n                followingInProgress: [...state.followingInProgress]\r\n            };\r\n\r\n            action.followingTF ?\r\n                state02.followingInProgress.push(action.userId) :\r\n                state02.followingInProgress = state02.followingInProgress.filter(userId => userId !== action.userId);\r\n\r\n            return state02;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    doUnfollow: (id: number) => ({ type: UNFOLLOW, id } as const),\r\n    doFollow: (id: number) => ({ type: FOLLOW, id } as const),\r\n    setUsers: (usersData: Array< UsersDataType >) => ({ type: DATA, usersData } as const),\r\n    setCurPage: (currentPage: number) => ({ type: CURPAGE, currentPage } as const),\r\n    setTotalCount: (totalCount: number) => ({ type: TOTALCOUNT, totalCount } as const),\r\n    setFilter: (filter: FilterType) => ({ type: SET_FILTER, filter } as const),\r\n    toggleFetching: (isFetching: boolean) => ({ type: TOGGLE_IS_FETCHING, isFetching } as const),\r\n    toggleFollowing: (followingTF: boolean, userId: number) => ({ type: FOL_IS_FETCHING, followingTF, userId } as const)\r\n}\r\n\r\n\r\nexport const setUsersThunk = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFetching(true));\r\n    dispatch(actions.setFilter(filter))\r\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n    dispatch(actions.setTotalCount(data.totalCount));\r\n}\r\nexport const changeCurPageThunk = (page: number, pageSize: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.setCurPage(page));\r\n    dispatch(actions.toggleFetching(true));\r\n    let data = await usersAPI.changeCurPage(page, pageSize)\r\n    dispatch(actions.toggleFetching(false));\r\n    dispatch(actions.setUsers(data.items));\r\n}\r\n\r\nexport const unFollowThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.unFollowDeleteRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doUnfollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\n\r\nexport const followThunk = (userId: number): ThunkType => async (dispatch) => {\r\n    dispatch(actions.toggleFollowing(true, userId));\r\n    let data = await usersAPI.followPostRequest(userId);\r\n    data.resultCode === 0 && dispatch(actions.doFollow(userId));\r\n    dispatch(actions.toggleFollowing(false, userId));\r\n}\r\nexport default usersReducer;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsType>","import React, { useState } from 'react';\r\nimport cl from './Pagination.module.css';\r\nimport cn from 'classnames';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { getTotalCount } from '../../../redux/users-selectors';\r\n\r\n\r\n\r\nlet Pagination: React.FC<PropsType> = (props) => {\r\n\r\n    const totalCount = useSelector<AppStateType, number>(getTotalCount)\r\n\r\n\r\n    let portionSize = 5;\r\n    let pagesQuantity = Math.ceil(totalCount / props.pageSize);\r\n    let pA = [];\r\n    for (let i = 1; i <= pagesQuantity; i++) {\r\n        pA.push(i);\r\n    }\r\n\r\n\r\n    const [ currentPortion, setCurrentPortion ] = useState(1);\r\n    let portionNumber = Math.ceil(pagesQuantity / portionSize);\r\n    let leftBorder = ((currentPortion - 1) * portionSize) + 1;\r\n    let rightBorder = portionSize * currentPortion;\r\n \r\n    return (\r\n        <>\r\n            <div className={cn(cl.pages)}>\r\n                {currentPortion > 1 && <button onClick={() => setCurrentPortion(currentPortion-1)}>minus</button> }\r\n                {pA\r\n                .filter(page => page >= leftBorder && page <= rightBorder)\r\n                .map(page => {\r\n                    return (\r\n                        <span onClick={() => { props.changeCurPage(page) }} className={cn({[cl.pageSelected || cl.page]: props.currentPage === page}) } key={page}>{page} </span>\r\n                    );\r\n                })\r\n                }\r\n                {portionNumber > currentPortion && <button onClick={() => setCurrentPortion(currentPortion+1)}>plus</button> }\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Pagination;\r\n\r\n\r\n// types \r\ntype PropsType = {\r\n    pageSize: number\r\n    currentPage: number\r\n    changeCurPage: (page: number) => void\r\n}\r\n","import { Field, Form, Formik, FormikHelpers } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getFilter } from '../../redux/users-selectors';\r\n\r\nconst SearchForm: React.FC<FormPropsType> = (props) => {\r\n\r\n    const filter = useSelector<AppStateType, FilterType>(getFilter)\r\n\r\n    const onSubmit = (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n        const valuesConverted = {\r\n            ...values,\r\n            friend: values.friend === 'null'\r\n                ? null\r\n                : values.friend === 'true'\r\n                    ? true\r\n                    : values.friend === 'false'\r\n                    && false\r\n        };\r\n        props.onFilterChange(valuesConverted)\r\n        // todo: async setSubmitting\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return (<div>\r\n        Search for your friends)\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={\r\n                    {\r\n                        term: filter.term,\r\n                        friend: String(filter.friend) as FriendFormType\r\n                    }\r\n                }\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" />\r\n                        <Field name=\"friend\" as=\"select\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>\r\n                            Find\r\n               </button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\nexport default SearchForm\r\n\r\n\r\n\r\n//types\r\ntype FriendFormType = 'null' | 'true' | 'false'\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n}\r\ntype FormPropsType = {\r\n    onFilterChange: (filter: FilterType) => void\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport avaDefault from '../../../assets/images/zorro.jpg';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { followThunk, unFollowThunk } from '../../../redux/users-reducer';\r\nimport { getFollowingInProgress } from '../../../redux/users-selectors';\r\nimport { UsersDataType } from '../../../types/types';\r\nimport cl from './User.module.css';\r\n\r\n\r\nexport const User: React.FC<PropsType> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const followingInProgress = useSelector<AppStateType ,Array<number>>(getFollowingInProgress)\r\n\r\n    return (<>\r\n        <div className={cl.userItem}>\r\n            <NavLink to={'profile/' + props.user.id}><img className={cl.avatar}\r\n                src={props.user.photos.small != null ? props.user.photos.small : avaDefault}\r\n                alt='ava'></img>\r\n            </NavLink>\r\n\r\n            <div className={cl.country}>{\r\n                props.user.id % 3 === 0\r\n                    ? <div className={cl.off}>offline</div> : <div className={cl.on}>online</div>}</div>\r\n\r\n            <div className={cl.name}>{props.user.name}</div>\r\n            <div className={cl.stars}></div>\r\n            <div className={cl.lastMessage}>{props.user.status ? 'status: ' + props.user.status : '----'}</div>\r\n\r\n            <div>\r\n                {\r\n                    props.user.followed\r\n                        ? <button disabled={followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            dispatch(unFollowThunk(props.user.id))\r\n\r\n                        }} className={cl.statusFollow}>UNFOLLOW</button>\r\n                        : <button disabled={followingInProgress.some(id => id === props.user.id)} onClick={() => {\r\n                            dispatch(followThunk(props.user.id))\r\n\r\n                        }} className={cl.statusFollow}>FOLLOW</button>}\r\n\r\n            </div>\r\n\r\n        </div>\r\n    </>\r\n    );\r\n}\r\n\r\n\r\n//types\r\ntype PropsType = {\r\n    key: number\r\n    user: UsersDataType\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getUsersData } from '../../redux/users-selectors';\r\nimport { UsersDataType } from '../../types/types';\r\nimport { User } from './User/User';\r\nimport cl from './Users.module.css';\r\n\r\n\r\n\r\nlet Users: React.FC<PropsType> = (props) => {\r\n\r\n    const usersGenerate = useSelector<AppStateType, Array<UsersDataType>>(getUsersData)\r\n\r\n    return (\r\n        <>\r\n            <div className={cl.usersItem}>\r\n                {usersGenerate.map((user) =>\r\n                    <User\r\n                        key={user.id}\r\n                        user={user}\r\n                    />)}\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Users;\r\n\r\n//types\r\nexport type PropsType = {\r\n    filter: FilterType\r\n    onFilterChange: (filter: FilterType) => void\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeCurPageThunk, FilterType, setUsersThunk } from '../../redux/users-reducer';\r\nimport { getCurrentPage, getFilter, getIsFetching, getPageSize } from '../../redux/users-selectors';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport cl from './../Users/Users.module.css';\r\nimport SearchForm from './FormType';\r\nimport Users from './Users';\r\nimport { useHistory } from 'react-router-dom';\r\nconst queryString = require('query-string');\r\n\r\n\r\n\r\nexport const UsersPage: React.FC<{}> = (props) => {\r\n\r\n    const isFetching = useSelector<AppStateType, boolean>(getIsFetching)\r\n    const filter = useSelector<AppStateType, FilterType>(getFilter)\r\n    const pageSize = useSelector<AppStateType, number>(getPageSize)\r\n    const currentPage = useSelector<AppStateType, number>(getCurrentPage)\r\n    const dispatch = useDispatch()\r\n\r\n    const history = useHistory()\r\n\r\n    const changeCurPage = (page: number) => {\r\n        dispatch(changeCurPageThunk(page, pageSize))\r\n    }\r\n    const onFilterChange = (filter: FilterType) => {\r\n        dispatch(setUsersThunk(currentPage, pageSize, filter))\r\n    }\r\n    \r\n    useEffect(() => {\r\n    \r\n        const parsedFilter = queryString.parse(history.location.search.substr(1))\r\n        let filterPage = currentPage;\r\n        let filterURL = {term: '', friend: null} as filterURLType\r\n        // !!''~false \r\n        // !!'2'~true\r\n        if(!!parsedFilter.page) filterPage = Number(parsedFilter.page)\r\n        if(!!parsedFilter.term) filterURL = {...filterURL, term: parsedFilter.term as string}\r\n        switch (parsedFilter.friend) {\r\n            case 'null':\r\n                filterURL = { ...filterURL, friend: null }\r\n                break\r\n            case 'true':\r\n                filterURL = { ...filterURL, friend: true }\r\n                break\r\n            case 'false':\r\n                filterURL = { ...filterURL, friend: false }\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        dispatch(setUsersThunk(\r\n            filterPage,\r\n            pageSize, \r\n            filterURL\r\n        ))\r\n    }, [])\r\n    useEffect(() => {\r\n        const parsedForUrl: ForUrlType = {}\r\n        if(!!filter.term) parsedForUrl.term = filter.term\r\n        if(filter.friend !== null ) parsedForUrl.friend = String(filter.friend)\r\n        if(currentPage !== 1) parsedForUrl.page = String(currentPage)\r\n        \r\n        history.push({\r\n            pathname: '/users',\r\n            // search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n            search: queryString.stringify(parsedForUrl)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    return (<>\r\n        <div className={cl.userPage}>\r\n            Choose your friends{isFetching && <span className={cl.preloader}>\r\n                <Preloader />\r\n            </span>}\r\n        </div>\r\n        <div>\r\n            <SearchForm onFilterChange={onFilterChange} />\r\n        </div>\r\n        <div className={cl.pagination}>\r\n            <Pagination\r\n                changeCurPage={changeCurPage}\r\n                pageSize={pageSize}\r\n                currentPage={currentPage}\r\n            /> </div>\r\n        {!isFetching\r\n            && <Users\r\n                onFilterChange={onFilterChange}\r\n                filter={filter}\r\n            />}\r\n    </>\r\n\r\n    )\r\n}\r\n\r\n\r\n// types\r\ntype ForUrlType = {\r\n    term?: string \r\n    friend?: string \r\n    page?: string\r\n}\r\ntype filterURLType = {\r\n    term: string\r\n    friend: boolean | null\r\n    page: number\r\n}\r\n\r\n","import { authMeSuccessThunk } from \"./authMe\";\r\nimport { BasicThunkType, InferActionsType } from \"./redux-store\";\r\n\r\nconst SET_INIT = 'SN/APP/SET-INITIALIZE';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nlet appInitialization = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_INIT:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setInitialize: () => ({ type: SET_INIT } as const)\r\n}\r\n\r\nexport const setInitializeThunk = (): ThunkType => async dispatch => {\r\n    await dispatch(authMeSuccessThunk());\r\n    dispatch(actions.setInitialize());\r\n}\r\n\r\n\r\nexport default appInitialization;\r\n\r\n//types\r\nexport type InitialStateType = typeof initialState\r\ntype ThunkType = BasicThunkType<ActionsType>\r\ntype ActionsType = InferActionsType<typeof actions>","import React, { Suspense, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Route, RouteComponentProps, Switch, useLocation, withRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport DialogsPage from './components/Dialogs/Dialogs';\r\nimport { Header } from './components/Header/Header';\r\nimport { LoginPage } from './components/Login/Login';\r\nimport Music from './components/Music/Music';\r\nimport { Navbar } from './components/Navbar/Navbar';\r\nimport News from './components/News/News';\r\nimport Settings from './components/Settings/Settings';\r\nimport { UsersPage } from './components/Users/UsersPage';\r\nimport { setInitializeThunk } from './redux/app-reducer';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport 'antd/dist/antd.css';\r\nimport { Layout, Breadcrumb } from 'antd';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ProfilePage = React.lazy(() => import('./components/Profile/ProfilePage') as Promise<any>);\r\nconst PublicChatPage = React.lazy(() => import('./components/CommonPages/ChatPage'));\r\n\r\nconst AppF: React.FC<RouteComponentProps> = (props) => {\r\n\r\n    const initialized = useSelector((state: AppStateType) => state.appInit.initialized)\r\n    const dispatch = useDispatch()\r\n\r\n   \r\n\r\n    const catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occured')\r\n        //for dispatch a function for fix the global error\r\n        //handle error global\r\n    }\r\n   \r\n    useEffect(() => {\r\n        dispatch(setInitializeThunk())\r\n        window.addEventListener('unhandledrejection', catchAllUnhandledErrors)\r\n        return window.removeEventListener('unhandledrejection', catchAllUnhandledErrors)\r\n    }, [])\r\n\r\n    const { Content, Footer } = Layout;\r\n    \r\n\r\n    if (!initialized) { return <Preloader /> }\r\n    return (\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n            <Header/>\r\n            <Layout className=\"site-layout\">\r\n                <Navbar/>\r\n                <Content style={{ margin: '0 16px' }}>\r\n                    {/* <Breadcrumb style={{ margin: '16px 0' }}>\r\n                        <Breadcrumb.Item>SocialNetwork</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>by Rembo</Breadcrumb.Item>\r\n                    </Breadcrumb> */}\r\n                    <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n                        <Switch>\r\n                            <Route path='/dialogs' render={() => <DialogsPage />} />\r\n                            <Route path='/profile/:userId?' render={() => <Suspense fallback={<h1>Still Loading…</h1>}> <ProfilePage /> </Suspense>} />\r\n                            <Route path='/news' render={News} />\r\n                            <Route path='/music' render={Music} />\r\n                            <Route path='/publicchat' render={() => <Suspense fallback={<h1>Still Loading…</h1>}><PublicChatPage/></Suspense> } />\r\n                            <Route path='/settings' render={Settings} />\r\n                            <Route path='/users' render={() =>  <UsersPage />} />\r\n                            <Route path='/login' render={() => <LoginPage />} />\r\n                            <Route path='*' render={() => <NoMatch />} />\r\n                        </Switch>\r\n                    </div>\r\n                </Content>\r\n           </Layout>     \r\n           <Footer style={{ textAlign: 'center' }}>Hell dream ©2020 Created by noirkotyara</Footer>\r\n            \r\n        </Layout>\r\n    )\r\n}\r\n\r\nlet NoMatch = () => {\r\n    let location = useLocation()\r\n    return (\r\n        <div>\r\n            {(location.pathname === '/') ? <div>StarterPage</div> : <div>No match</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nlet AppMain = withRouter(React.memo(AppF))\r\n\r\nexport default AppMain","\r\nlet initialState = {\r\n    friendsList: [\r\n        { id: 1, name: 'Zorro' },\r\n        { id: 2, name: 'Lyubov' },\r\n        { id: 3, name: 'Kuscherenko' }\r\n    ] as Array<FriendsList>\r\n};\r\n\r\n\r\nconst sideBarReducer = (state = initialState, action: any):initialStateType => {\r\n    return state;\r\n}\r\nexport default sideBarReducer;\r\n\r\n//types\r\nexport type FriendsList = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type initialStateType = typeof initialState","import authMe from \"./authMe\";\r\nimport messagesReducer from \"./messages-reducer\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sideBarReducer from \"./sideBar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport appInitialization from \"./app-reducer\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { Action } from \"redux\";\r\n\r\n\r\nconst { createStore, combineReducers, applyMiddleware } = require(\"redux\");\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: messagesReducer,\r\n    sideBar: sideBarReducer,\r\n    usersPage: usersReducer,\r\n    authMe: authMe,\r\n    appInit: appInitialization,\r\n    form: formReducer\r\n});\r\n\r\nlet store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n\r\ntype InferValueType<T> = T extends {[key:string]: infer U}? U : never\r\nexport type InferActionsType<T extends {[key:string]: (...args: any) => any}> = ReturnType<InferValueType<T>>\r\nexport type BasicThunkType<A extends Action,R = Promise<void> > = ThunkAction<R, AppStateType, unknown, A>\r\nexport type AppStateType = ReturnType<typeof rootReducers>\r\n\r\nexport type BasicComponentType = React.ComponentType<{store: AppStateType}>//for compose\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport AppMain from './App';\r\n\r\nimport './index.css';\r\nimport store from './redux/redux-store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n           <AppMain/>\r\n         </HashRouter>\r\n     </Provider>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// renderEntireTree(store.getState()); //вже викликаємо\r\n//redux не вертає state змінений, тож викликаємо анонімну функцію, яка отримає зміни і віддасть rerender\r\n// store.subscribe(() => {    переходить у власність виконання connect from  'react-redux'\r\n//     // let newState = store.getState();\r\n//     renderEntireTree();\r\n// });\r\n\r\nserviceWorker.unregister();\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersPage = (state: AppStateType) => { return state.usersPage };\r\n\r\nexport const getUsersData = createSelector(getUsersPage, (usersPage) => { return usersPage.usersData; });\r\nexport const getCurrentPage = createSelector(getUsersPage, (usersPage) => { return usersPage.currentPage });\r\nexport const getTotalCount = createSelector(getUsersPage, (usersPage) => { return usersPage.totalCount });\r\nexport const getPageSize = createSelector(getUsersPage, (usersPage) => { return usersPage.pageSize });\r\nexport const getIsFetching = createSelector(getUsersPage, (usersPage) => { return usersPage.isFetching });\r\nexport const getFollowingInProgress = createSelector(getUsersPage, (usersPage) => { return usersPage.followingInProgress });\r\nexport const getFilter = createSelector(getUsersPage, (usersPage) => { return usersPage.filter });","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userItem\":\"User_userItem__4zQnk\",\"avatar\":\"User_avatar__39gSA\",\"lastMessage\":\"User_lastMessage__1hlgj\",\"name\":\"User_name__2R3Cl\",\"off\":\"User_off__XjvUl\",\"on\":\"User_on__1XQfw\",\"country\":\"User_country__2T7Tr\",\"stars\":\"User_stars__3aZm4\"};","import { AppStateType } from \"./redux-store\";\r\n\r\nexport const getCaptcha = (state: AppStateType) => { return state.authMe.captcha }\r\nexport const getAuthMe = (state: AppStateType) => { return state.authMe.isAuthMe }\r\nexport const getAuthID = (state: AppStateType) => { return state.authMe.id }","\r\ntype ValidatorsType = (value: null | string) => undefined | string\r\n\r\nexport const required: ValidatorsType = (value) => {\r\n   return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport let maxLengthC = (maxLen: number): ValidatorsType => (value) => {\r\n   return value && value.length < maxLen ? undefined : `${maxLen} is reached`} ","import React from 'react';\r\nimport { WrappedFieldProps } from 'redux-form';\r\nimport cl from './InputChecker.module.css';\r\n\r\ntype PropsType = {\r\n    placeholder: string\r\n}\r\n\r\nexport const InputComp: React.FC<WrappedFieldProps & PropsType>  = ({ input, meta, placeholder }) => {\r\n    return <>\r\n            <div className={(meta.error && meta.visited && !meta.active) && cl.error}>\r\n            <input  {...input} placeholder={placeholder}></input>\r\n        </div>\r\n        <span className={cl.messageError}>{(meta.visited && !meta.active) && meta.error}</span>\r\n    </>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2BwxY\",\"dialogsItems\":\"Dialogs_dialogsItems__5NlB3\",\"dialog\":\"Dialogs_dialog__39fd-\",\"message\":\"Dialogs_message__cuXq7\",\"active\":\"Dialogs_active__17luP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPage\":\"Users_userPage__3pdtU\",\"butGET\":\"Users_butGET__3mBVF\",\"preloader\":\"Users_preloader__3ube4\",\"pagination\":\"Users_pagination__1ZtKZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"InputChecker_error__3bOFz\",\"messageError\":\"InputChecker_messageError__2L7eE\",\"commonError\":\"InputChecker_commonError__15Qry\"};"],"sourceRoot":""}