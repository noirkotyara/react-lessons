{"version":3,"sources":["components/CommonPages/Message.tsx","components/CommonPages/ChatWindow.tsx","components/CommonPages/ChatForm.tsx","components/CommonPages/ChatPage.tsx"],"names":["Message","user","src","photo","alt","style","height","width","userName","float","message","ChatWindow","ws","useState","messagesData","setMessagesData","showMessages","event","newMessagesData","JSON","parse","data","useEffect","addEventListener","removeEventListener","close","messages","overflow","map","index","key","ChatForm","isOpen","setIsOpen","connectionIsStable","initialValues","onSubmit","values","setSubmitting","resetForm","console","log","send","isSubmitting","type","name","disabled","ChatPage","createdChannel","setNewChannel","reconnectWS","setTimeout","createChannel","WebSocket"],"mappings":"yKAIaA,EAA2C,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvD,OAAQ,6BACJ,yBAAKC,IAAKD,EAAKE,MAAOC,IAAI,SAASC,MAAO,CAAEC,OAAQ,MAAOC,MAAO,SAClE,8BAAON,EAAKO,UACZ,yBAAKH,MAAO,CAAEI,MAAO,UAAYR,EAAKS,WCHjCC,EAA+C,SAAC,GAAU,IAATC,EAAQ,EAARA,GAAQ,EAE5BC,mBAA6B,IAFD,mBAE7DC,EAF6D,KAE/CC,EAF+C,KAK5DC,EAAe,SAACC,GAClB,IAAIC,EAAkBC,KAAKC,MAAMH,EAAMI,MACvCN,GAAgB,SAACD,GAAD,4BAAsBA,GAAtB,YAAuCI,QAG3DI,qBAAU,WAKN,OAJU,OAAPV,GACCA,EAAGW,iBAAiB,UAAWP,GAG5B,WACO,OAAPJ,IACCA,EAAGY,oBAAoB,UAAWR,GAClCJ,EAAGa,YAGZ,CAACb,IAEJ,IAAMc,EAA+BZ,EACrC,OACI,kBAAC,IAAD,CAAQT,MAAO,CACXsB,SAAU,OAAQrB,OAAQ,SAEzBoB,EAASE,KAAI,SAAClB,EAASmB,GAAV,OAAoB,kBAAC,EAAD,CAASC,IAAKD,EAAO5B,KAAMS,S,SC1B5DqB,EAA6C,SAAC,GAAU,IAATnB,EAAQ,EAARA,GAAQ,EAEtCC,mBAA8B,WAFQ,mBAE3DmB,EAF2D,KAEnDC,EAFmD,KAe1DC,EAAqB,WACvBD,EAAU,UAUd,OARAX,qBAAU,WAIN,OAHU,OAAPV,GACCA,EAAGW,iBAAiB,OAAQW,GAEzB,WACI,OAAPtB,GAAeA,EAAGY,oBAAoB,OAAQU,MACnD,CAACtB,IAEI,6BACJ,6BACI,kBAAC,IAAD,CAAQuB,cAAe,CAAEzB,QAAS,IAAO0B,SAxBhC,SAACC,EAAD,GAA+E,IAAzDC,EAAwD,EAAxDA,cAAeC,EAAyC,EAAzCA,UAElDC,QAAQC,IAAIJ,GACRA,EAAO3B,UACD,OAAPE,GACCA,EAAG8B,KAAKL,EAAO3B,SAGnB6B,IACAD,GAAc,OAgBL,gBAAGK,EAAH,EAAGA,aAAH,OACG,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,OAAOC,KAAK,YACxB,4BAAQD,KAAK,SAASE,SAAUH,GAA4B,UAAXX,GAAjD,eCMTe,UAxCE,WAAO,IAAD,EACmBlC,mBAA2B,MAD9C,mBACdmC,EADc,KACEC,EADF,KA+BnB,OA3BA3B,qBAAU,WACV,IAAIV,EACKsC,EAAc,WACfV,QAAQC,IAAI,YACZU,WAAWC,EAAe,MAGxBA,EAAgB,WACI,OAAnBJ,IACCA,EAAexB,oBAAoB,QAAS0B,GAC5CF,EAAevB,UAEfb,EAAK,IAAIyC,UAAU,iEAChB9B,iBAAiB,QAAS2B,GAC5BD,EAAcrC,IAKvB,OAHAwC,IAGO,WACHxC,EAAGY,oBAAoB,QAAS0B,GAChCtC,EAAGa,WAGR,IAGK,oCACJ,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAYb,GAAIoC,IAChB,kBAAC,EAAD,CAAUpC,GAAIoC","file":"static/js/6.475e5518.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\n\r\nexport const Message: React.FC<{ user: MessageType }> = ({ user }) => {\r\n    return (<div>\r\n        <img src={user.photo} alt=\"avatar\" style={{ height: '5vh', width: '5vh' }} />\r\n        <span>{user.userName}</span>\r\n        <div style={{ float: 'right' }}>{user.message}</div>\r\n    </div>);\r\n};\r\n\r\n//types\r\nexport type MessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n  }\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Layout from \"antd/lib/layout/layout\";\r\nimport { MessageType } from \"./Message\";\r\nimport { Message } from \"./Message\";\r\n\r\nexport const ChatWindow: React.FC<{ws: WebSocket | null}> = ({ws}) => {\r\n\r\n    let [messagesData, setMessagesData] = useState<Array<MessageType>>([])\r\n    \r\n    \r\n    const showMessages = (event: MessageEvent<any>): void => {\r\n        let newMessagesData = JSON.parse(event.data);\r\n        setMessagesData((messagesData) => [...messagesData, ...newMessagesData]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(ws !== null){\r\n            ws.addEventListener('message', showMessages ) \r\n            \r\n        }\r\n        return () => {\r\n            if(ws !== null){\r\n                ws.removeEventListener('message', showMessages)\r\n                ws.close()\r\n            }\r\n            }\r\n    }, [ws])\r\n\r\n    const messages: Array<MessageType> = messagesData\r\n    return (\r\n        <Layout style={{\r\n            overflow: 'auto', height: '50vh',\r\n        }}>\r\n            {messages.map((message, index) => <Message key={index} user={message} />)}\r\n        </Layout>\r\n    );\r\n};\r\n","import { Field, Form, Formik, FormikHelpers } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ntype FormType = {\r\n    message: string\r\n}\r\n\r\nexport const ChatForm: React.FC<{ws: WebSocket | null}> = ({ws}) => {\r\n\r\n    let [isOpen, setIsOpen] = useState<'pending' | 'ready'>('pending')\r\n   \r\n    const onSubmit = (values: FormType , { setSubmitting, resetForm }: FormikHelpers<FormType>) => {\r\n        // todo: async setSubmitting\r\n        console.log(values)\r\n        if(!values.message) return;\r\n        if(ws !== null){\r\n            ws.send(values.message)\r\n        }\r\n        \r\n        resetForm()\r\n        setSubmitting(false);\r\n    }\r\n    const connectionIsStable = () => {\r\n        setIsOpen('ready');\r\n    };\r\n    useEffect(() => {\r\n        if(ws !== null) {\r\n            ws.addEventListener('open', connectionIsStable)\r\n        }\r\n        return () => {\r\n            ws !== null && ws.removeEventListener('open', connectionIsStable) }\r\n    }, [ws])\r\n\r\n    return (<div> \r\n        <div>\r\n            <Formik initialValues={{ message: '' }}  onSubmit={onSubmit}>\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"message\" />\r\n                        <button type=\"submit\" disabled={isSubmitting || (isOpen !== 'ready')}>Send</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    </div>);\r\n};\r\n\r\n\r\n","import React, { useEffect, useState } from \"react\"\r\nimport Layout from \"antd/lib/layout/layout\";\r\nimport { ChatWindow } from \"./ChatWindow\";\r\nimport { ChatForm } from \"./ChatForm\";\r\n\r\nconst ChatPage = () => {\r\n    let [createdChannel, setNewChannel] = useState<WebSocket | null>(null) \r\n       \r\n\r\n    useEffect(() => {\r\n    let ws: WebSocket\r\n       const reconnectWS = () => {\r\n            console.log('CLOSE WS');\r\n            setTimeout(createChannel, 3000);\r\n        }\r\n        \r\n        const createChannel = () => {\r\n            if(createdChannel !== null){\r\n                createdChannel.removeEventListener('close', reconnectWS)\r\n                createdChannel.close()\r\n            }\r\n                ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n                ws.addEventListener('close', reconnectWS)\r\n                 setNewChannel(ws)\r\n        }\r\n        createChannel()\r\n        \r\n        \r\n        return () => {\r\n            ws.removeEventListener('close', reconnectWS)\r\n            ws.close()\r\n        }\r\n        \r\n    } ,[])\r\n\r\n\r\n    return (<>\r\n        <Layout>\r\n            <ChatWindow ws={createdChannel} />\r\n            <ChatForm ws={createdChannel} />\r\n        </Layout>\r\n    </>)\r\n}\r\n\r\n\r\nexport default ChatPage"],"sourceRoot":""}