{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","assets/startPage/av.jpg","assets/images/sad.png","assets/images/happy.png","components/Profile/ProfileStatus/ProfileStatus.module.css","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileEditForm.tsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileInfoEdit.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileStatus/ProfileStatusHook.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Post","props","className","cl","item","src","alt","message","likes","maxLength20","maxLengthC","FormMyPostR","reduxForm","form","onSubmit","handleSubmit","Field","component","InputComp","name","type","validate","required","placeholder","addPost","MyPosts","postsGenerate","map","p","key","id","formData","postForm","newPostText","posts","MyPostsContainer","connect","state","profilePage","postsData","actions","socialIcons","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Contact","sIcon","property","value","Object","keys","forEach","href","socialIcon","fieldCreator","enableReinitialize","contactsArray","profileData","contacts","editData","error","checker","commonError","ProfileInfoEdit","owner","updateProfile","useState","editMode","changeEditMode","initialValues","dataFlow","dispatch","then","reset","editButton","onClick","fullname","fullName","aboutMe","lookingForAJob","happy","sad","style","width","height","lookingForAJobDescription","ProfileInfoMemoized","React","memo","checkedAuth","uploadPhoto","userId","photoFile","changePhotoFile","Preloader","content","description","photos","small","avaDefault","onDoubleClick","accept","onChange","e","target","files","length","choosedPhoto","ProfileStatusHook","status","setStatus","useEffect","editionVersion","onBlur","updateStatus","autoFocus","event","readyStatus","match","params","Profile","profile","authorizedUser","ProfileContainer","refreshProfile","userID","setProfile","getStatus","this","prevProps","Component","compose","withRouter","authMe","authorized","isAuthMe","setProfileThunk","setStatusThunk","getStatusThunk","uploadPhotoThunk","updateProfileThunk","withAuthMe"],"mappings":"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","file":"static/js/3.59e04d4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__3GDnK\",\"contacts\":\"ProfileInfo_contacts__37vHF\",\"socialIcon\":\"ProfileInfo_socialIcon__GBk5o\",\"editData\":\"ProfileInfo_editData__3bG9g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPosts_addPost__1exZM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2DfE4\"};","module.exports = __webpack_public_path__ + \"static/media/av.3322ac59.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sad.f356e41d.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.ed41fce9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editionVersion\":\"ProfileStatus_editionVersion__34QJ5\",\"status\":\"ProfileStatus_status__PRDP4\",\"readyStatus\":\"ProfileStatus_readyStatus__1-qBM\"};","import React from 'react';\r\nimport cl from './Post.module.css';\r\nimport {PostsDataType} from './../../../../redux/profile-reducer'\r\n\r\nconst Post: React.FC<PostsDataType> = (props) => {\r\n    return (\r\n        <div className={cl.item}>\r\n\r\n            <img src=\"https://static.tildacdn.com/tild3538-3762-4936-b162-656163363764/Icon.png\" alt=\"avatar\" />\r\n            <span>{props.message}</span>\r\n            <div>\r\n    <div>Likes --&gt; {props.likes}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport cl from './MyPosts.module.css';\r\nimport { MapDispatchToPropsType, MapStateToPropsType } from './MyPostsContainer';\r\nimport Post from './Post/Post';\r\nlet maxLength20 = maxLengthC(20);\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n\r\n    let postsGenerate = props.postsGenerate.map(p => <Post key={p.id} message={p.message} likes={p.likes} />);\r\n    let onSubmit = (formData: FormPostType) => {\r\n        props.postForm(formData.newPostText);\r\n    }\r\n    return (\r\n        <div>\r\n            <FormMyPostR {...props} onSubmit={onSubmit} />\r\n            <div className={cl.posts}>\r\n                {postsGenerate}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\nlet FormMyPost: React.FC<InjectedFormProps<FormPostType, OwnPropsType> & OwnPropsType> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={InputComp} name='newPostText' type=\"text\" validate={[required, maxLength20]} placeholder={'Write your post here...'} />\r\n            <button type=\"submit\" className={cl.addPost}>Add post</button>\r\n        </form>\r\n    </>\r\n}\r\n\r\nlet FormMyPostR = reduxForm<FormPostType, OwnPropsType>({\r\n    form: 'post'\r\n})(FormMyPost);\r\n\r\nexport default MyPosts;\r\n\r\n//types \r\ntype FormPostType = {\r\n    newPostText: string\r\n}\r\ntype OwnPropsType = {}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","\r\nimport { connect } from 'react-redux';\r\nimport { actions, PostsDataType } from '../../../redux/profile-reducer';\r\nimport { AppStateType, BasicComponentType } from '../../../redux/redux-store';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsGenerate: state.profilePage.postsData,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\n\r\nlet MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    { postForm: actions.postForm }\r\n)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n//types\r\nexport type MapStateToPropsType = {\r\n    postsGenerate: Array<PostsDataType>\r\n}\r\nexport type MapDispatchToPropsType = {\r\n    postForm: (newPostText: string) => void\r\n}","import React from 'react';\r\nimport { ContactsType } from '../../../types/types';\r\nimport cl from './ProfileInfo.module.scss';\r\n\r\nconst socialIcons = {\r\n    facebook: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111393.svg',\r\n    website: 'https://www.flaticon.com/svg/static/icons/svg/2847/2847798.svg',\r\n    vk: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111712.svg',\r\n    twitter: 'https://www.flaticon.com/svg/static/icons/svg/733/733579.svg',\r\n    instagram: 'https://www.flaticon.com/svg/static/icons/svg/174/174855.svg',\r\n    youtube: 'https://www.flaticon.com/svg/static/icons/svg/1384/1384060.svg',\r\n    github: 'https://www.flaticon.com/svg/static/icons/svg/733/733553.svg',\r\n    mainLink: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111644.svg'\r\n\r\n};\r\n\r\ntype OwnPropsType = {\r\n    property: string\r\n    value: string\r\n}\r\n\r\nconst Contact: React.FC<OwnPropsType> = ({ property, value }) => {\r\n    let sIcon;\r\n    Object\r\n    .keys(socialIcons)\r\n    .forEach(key => { \r\n        if(key===property)  \r\n        sIcon = socialIcons[key as keyof ContactsType]});\r\n    return (<>\r\n        {value\r\n            && <span><a href={value}><img className={cl.socialIcon}\r\n                    src={sIcon} alt=\"\" /></a>\r\n                 </span>\r\n            }\r\n    </>)\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Field, InjectedFormProps, reduxForm, WrappedFieldProps } from 'redux-form';\r\nimport { InputComp } from '../../../common/InputChecker/InputChecker';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport checker from './../../../common/InputChecker/InputChecker.module.css';\r\nimport { ProfileType } from '../../../../types/types';\r\n\r\n\r\nconst ProfileEditForm: React.FC<InjectedFormProps<FormProfileType, OwnPropsType> & FormProfileType> = (props) => {\r\n    let contactsArray = Object.keys(props.profileData.contacts).map(key => {\r\n        return <div key={key}>{fieldCreator('contacts.' + key, InputComp, 'text')}</div>\r\n    })\r\n\r\n    return (<form onSubmit={props.handleSubmit} className={cl.editData}>\r\n        <div>{props.error\r\n            && <div className={checker.commonError}> {props.error} </div>}</div>\r\n        <div>Here is our form for editing</div>\r\n        <div> Your full name: {fieldCreator('fullName', InputComp, 'text')} </div>\r\n        <div> About me: {fieldCreator('aboutMe', InputComp, 'text')} </div>\r\n\r\n        <div> {fieldCreator('lookingForAJob', 'input', 'checkbox')} Looking for a job?</div>\r\n        <div> Description: {fieldCreator('lookingForAJobDescription', InputComp, 'text')} </div>\r\n        <div> Contacts: {contactsArray} </div>\r\n        <button>Save changes</button>\r\n\r\n    </form>\r\n    );\r\n}\r\n\r\n\r\nlet fieldCreator = (name: string,\r\n    component: React.FC<WrappedFieldProps & {placeholder: string}> | string,\r\n    type: string,\r\n    validate = []) => {\r\n    return (<Field name={name} component={component} type={type} placeholder={name} validate={validate}></Field>)\r\n}\r\n\r\nexport default reduxForm<FormProfileType, OwnPropsType>({\r\n    form: 'editProfile',\r\n    enableReinitialize: true\r\n})(ProfileEditForm);\r\n\r\nexport type FormProfileType = {\r\n    profileData: ProfileType\r\n}\r\nexport type OwnPropsType = {\r\n    profileData: ProfileType\r\n}","import React, { Dispatch, useState } from 'react';\r\nimport Contact from '../Contacts';\r\nimport ProfileEditForm, { FormProfileType } from './ProfileEditForm';\r\nimport sad from '../../../../assets/images/sad.png';\r\nimport happy from '../../../../assets/images/happy.png';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport { FormAction, reset } from 'redux-form';\r\nimport { ContactsType, ProfileType } from '../../../../types/types';\r\n\r\ntype OwnPropsType = {\r\n    owner: boolean\r\n    profileData: ProfileType \r\n    updateProfile: (dataFlow: FormProfileType) => Promise<void>\r\n}\r\n\r\nconst ProfileInfoEdit: React.FC<OwnPropsType> = ({ owner, profileData, updateProfile }) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n    \r\n    let onSubmit = (dataFlow: FormProfileType, dispatch: Dispatch<FormAction>) => {\r\n        let promise = updateProfile(dataFlow);\r\n        promise.then(() => changeEditMode(false));\r\n        dispatch(reset('editProfile'));\r\n\r\n    }\r\n    return (<>\r\n        <div>\r\n            {\r\n                (editMode && owner)\r\n                    ? <ProfileEditForm\r\n                        //@ts-ignore I need to fix this shit\r\n                        initialValues={profileData}\r\n                        profileData={profileData}\r\n                        onSubmit={onSubmit} />\r\n                    : owner &&\r\n                    <div>\r\n                        <button className={cl.editButton} onClick={() => changeEditMode(true)}>Edit Profile</button>\r\n                        <div className={cl.fullname}>{profileData.fullName}</div>\r\n                        <div className={cl.aboutMe}>{profileData.aboutMe}</div>\r\n                        <div className={cl.contacts}>\r\n                            {Object\r\n                            .keys(profileData.contacts)\r\n                            .map((key) => {\r\n                                return <Contact key={key} property={key} value={profileData.contacts[key as keyof ContactsType]  } />\r\n                            })\r\n                            }\r\n                        </div>\r\n\r\n                        <div>lookingForAJob:  <img src={profileData.lookingForAJob ? happy : sad} style={{ width: '50px', height: '50px' }} alt=\"\"></img> </div>\r\n                        <div>Description: {profileData.lookingForAJobDescription}</div>\r\n\r\n                    </div>\r\n            }\r\n        </div>\r\n    </>)\r\n}\r\nexport default ProfileInfoEdit;","import React, { ChangeEvent } from 'react';\r\nimport cl from './ProfileInfo.module.scss';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { useState } from 'react';\r\nimport avaDefault from './../../../assets/startPage/av.jpg';\r\nimport ProfileInfoEdit from './ProfileInfoEdit/ProfileInfoEdit';\r\nimport { ProfileType } from '../../../types/types';\r\nimport { MapDispatchToPropsType } from '../ProfileContainer';\r\n\r\ntype OwnPropsType = {\r\n    checkedAuth: number\r\n    profileData: ProfileType\r\n    userId: number\r\n}\r\n\r\nconst ProfileInfo: React.FC<OwnPropsType & MapDispatchToPropsType> = ({ checkedAuth, profileData, uploadPhoto, userId, updateProfile }) => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [photoFile, changePhotoFile] = useState<File | string>('');\r\n    if (!profileData) {\r\n        return <Preloader />\r\n    }\r\n    let choosePhotoEdition = () => {\r\n        changeEditMode(true);\r\n    }\r\n    let choosedPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            changePhotoFile(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let uploadPhotoPreparation = () => {\r\n        uploadPhoto(photoFile);\r\n        changeEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <div className={cl.description}>\r\n\r\n                {(editMode && (checkedAuth === userId || !userId))\r\n                    ? (<div>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={(e) => choosedPhoto(e)} />\r\n                        <input onClick={uploadPhotoPreparation} type=\"button\" value='Upload' />\r\n                    </div>)\r\n                    :\r\n                    <img\r\n                        style={{ width: '100px', height: '100px' }}\r\n                        src={profileData.photos.small ? profileData.photos.small : avaDefault}\r\n                        alt=\"avatar\"\r\n                        onDoubleClick={choosePhotoEdition} />\r\n                }\r\n                <ProfileInfoEdit\r\n                    owner={checkedAuth === userId || !userId}\r\n                    profileData={profileData}\r\n                    updateProfile={updateProfile} />\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileInfoMemoized = React.memo(ProfileInfo);\r\n\r\nexport default ProfileInfoMemoized;","import React, { ChangeEvent } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { MapStateToPropsType, PathParamsType, PropsType } from '../ProfileContainer';\r\nimport cl from './ProfileStatus.module.css';\r\n\r\n\r\n\r\n let ProfileStatusHook: React.FC<MapStateToPropsType & RouteComponentProps<PathParamsType> & OwnPropsType> = (props) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [status,setStatus] = useState(props.status);\r\n\r\n\r\n    let editStatus = () =>  changeEditMode(true);\r\n    let onChange = (event: ChangeEvent<HTMLInputElement>) => setStatus(event.target.value);\r\n    \r\n   useEffect(() => { setStatus(props.status)},[props.status]);\r\n\r\n    let readyStatus = () => {\r\n        changeEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n  \r\n        return (\r\n            <div className={cl.content}>\r\n                <span className={cl.status}>Status:</span>\r\n                { \r\n            \r\n                    editMode\r\n                    ? <div className={cl.editionVersion}>\r\n                        <input onBlur={readyStatus} autoFocus={true} type=\"text\" value={status} onChange={onChange} ></input>\r\n                    </div>\r\n                    : <div >\r\n                        <span className={cl.readyStatus} \r\n                        onDoubleClick={() => (!props.match.params.userId) \r\n                        ? editStatus() \r\n                        : false}>{props.status || '---------'}</span> \r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default ProfileStatusHook;\r\n\r\n//types \r\ntype OwnPropsType = {\r\n    updateStatus: (status: string) => void\r\n}\r\n","import React from 'react';\r\nimport { PropsType } from './ProfileContainer';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport cl from './Profile.module.css';\r\nimport ProfileInfoMemoized from './ProfileInfo/ProfileInfo';\r\nimport ProfileStatus from './ProfileStatus/ProfileStatus'; //class component\r\nimport ProfileStatusHook from './ProfileStatus/ProfileStatusHook';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { OwnPropsType } from './ProfileInfo/ProfileInfoEdit/ProfileEditForm';\r\n\r\n\r\nconst Profile: React.FC<PropsType & {store: AppStateType}> = (props) => {\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <ProfileInfoMemoized\r\n                profileData={props.profile}\r\n                userId={+props.match.params.userId}\r\n                checkedAuth={props.authorizedUser}\r\n                {...props} \r\n            />\r\n            <ProfileStatusHook {...props} />\r\n            <MyPostsContainer {...props} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getStatusThunk, actions, setProfileThunk, setStatusThunk, updateProfileThunk, uploadPhotoThunk } from '../../redux/profile-reducer';\r\nimport { AppStateType, BasicComponentType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport Profile from './Profile';\r\n\r\nclass ProfileContainer extends React.Component<PropsType & {store: AppStateType}, StateType> {\r\n  refreshProfile = () => {\r\n    // : number | null\r\n        let userID = +this.props.match.params.userId;\r\n        if(!userID){\r\n            userID = this.props.authorizedUser;\r\n            if(!userID) return<Preloader/>\r\n        } \r\n        this.props.setProfile(userID);\r\n        this.props.getStatus(userID);\r\n  }\r\n    componentDidMount() {  \r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps: PropsType){\r\n        if (prevProps.match.params.userId != this.props.match.params.userId){\r\n        this.refreshProfile();\r\n        }\r\n    }\r\n    render() {\r\n        return <Profile {...this.props} />\r\n    }\r\n}\r\n\r\nlet mapStateToPropsRedirect = (state: AppStateType): MapStateToPropsRedirectType => {\r\n    return { isAuthMe: state.authMe.isAuthMe }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUser: state.authMe.id,\r\n        authorized: state.authMe.isAuthMe\r\n    }\r\n}\r\n//todo: connect is not typized\r\nexport default compose<BasicComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        setProfile: setProfileThunk,\r\n        updateStatus: setStatusThunk,\r\n        getStatus: getStatusThunk,\r\n        postForm: actions.postForm,\r\n        uploadPhoto: uploadPhotoThunk,\r\n        updateProfile: updateProfileThunk\r\n    }),\r\n    connect<MapStateToPropsRedirectType, {}, {}, AppStateType>(mapStateToPropsRedirect, {}),\r\n    withAuthMe\r\n)(ProfileContainer);\r\n\r\n//types\r\n\r\nexport type MapStateToPropsRedirectType = {\r\n    isAuthMe: boolean\r\n}\r\n\r\nexport type MapStateToPropsType =  {\r\n       profile: ProfileType\r\n       status: string\r\n       authorizedUser: number\r\n       authorized: boolean\r\n}\r\n// <P extends RouteComponentProps<any>, C extends React.ComponentType<P>>\r\nexport type MapDispatchToPropsType = {\r\n    updateStatus: (status: string) => void \r\n    postForm?: () => void\r\n    uploadPhoto: (file: File | string) => void\r\n    updateProfile: (dataFlow: FormProfileType) => Promise<any>\r\n}\r\ntype StateType = {}\r\nexport type PathParamsType = {\r\n   userId: string\r\n}\r\ntype FormProfileType = {\r\n    profileData: ProfileType\r\n}\r\n\r\ntype OwnPropsType = {\r\n    setProfile: (userID: number) => void\r\n    getStatus: (userID: number) => void\r\n}\r\nexport type PropsType = OwnPropsType & MapStateToPropsRedirectType & MapStateToPropsType & MapDispatchToPropsType & RouteComponentProps<PathParamsType>\r\n\r\n"],"sourceRoot":""}