{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","assets/startPage/av.jpg","assets/images/sad.png","assets/images/happy.png","components/Profile/ProfileStatus/ProfileStatus.module.css","redux/profile-selectors.ts","components/Profile/MyPosts/FormMyPost.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/Contacts.tsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileEditForm.tsx","components/Profile/ProfileInfo/ProfileInfoEdit/ProfileInfoEdit.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/ProfileStatus/ProfileStatusHook.tsx","components/Profile/Profile.tsx","components/Profile/ProfilePage.tsx"],"names":["module","exports","getProfileData","state","profilePage","getPostsData","createSelector","postsData","getProfileObjectData","profile","getStatus","status","maxLength20","maxLengthC","FormMyPostR","reduxForm","form","props","onSubmit","handleSubmit","Field","component","InputComp","name","type","validate","required","placeholder","className","cl","addPost","Post","item","src","alt","message","likes","MyPosts","useSelector","dispatchR","useDispatch","postsGenerate","map","p","key","id","formData","actions","postForm","newPostText","posts","socialIcons","facebook","website","vk","twitter","instagram","youtube","github","mainLink","Contact","sIcon","property","value","Object","keys","forEach","href","socialIcon","fieldCreator","enableReinitialize","profileData","contactsArray","contacts","editData","error","checker","commonError","ProfileInfoEdit","owner","useState","editMode","changeEditMode","initialValues","dataFlow","dispatch","updateProfileThunk","then","reset","editButton","onClick","fullname","fullName","aboutMe","lookingForAJob","happy","sad","style","width","height","lookingForAJobDescription","ProfileInfoMemoized","React","memo","userId","authID","getAuthID","photoFile","changePhotoFile","Preloader","content","description","photos","small","avaDefault","onDoubleClick","accept","onChange","e","target","files","length","choosedPhoto","uploadPhotoThunk","ProfileStatusWithHook","statusState","setStatus","useEffect","editionVersion","onBlur","setStatusThunk","autoFocus","event","readyStatus","isUserAuth","Profile","match","params","compose","withRouter","withAuthMe","authorizedUser","refreshProfile","userID","setProfileThunk","getStatusThunk"],"mappings":"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","file":"static/js/4.5dc29fe1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__3GDnK\",\"contacts\":\"ProfileInfo_contacts__37vHF\",\"socialIcon\":\"ProfileInfo_socialIcon__GBk5o\",\"editData\":\"ProfileInfo_editData__3bG9g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPost\":\"MyPosts_addPost__1exZM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2DfE4\"};","module.exports = __webpack_public_path__ + \"static/media/av.3322ac59.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sad.f356e41d.png\";","module.exports = __webpack_public_path__ + \"static/media/happy.ed41fce9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editionVersion\":\"ProfileStatus_editionVersion__34QJ5\",\"status\":\"ProfileStatus_status__PRDP4\",\"readyStatus\":\"ProfileStatus_readyStatus__1-qBM\"};","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getProfileData = (state: AppStateType) => { return state.profilePage };\r\n\r\nexport const getPostsData = createSelector(getProfileData, (profilePage) => { return profilePage.postsData });\r\nexport const getProfileObjectData = createSelector(getProfileData, (profilePage) => { return profilePage.profile });\r\nexport const getStatus = createSelector(getProfileData, (profilePage) => { return profilePage.status });\r\n","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InputComp } from '../../common/InputChecker/InputChecker';\r\nimport { maxLengthC, required } from '../../common/Validators/Validators';\r\nimport cl from './MyPosts.module.css';\r\nimport { FormPostType } from './MyPosts';\r\n\r\nlet maxLength20 = maxLengthC(20);\r\n//<InjectedFormProps<FormPostType, OwnProps> & OwnProps>\r\nlet FormMyPost: React.FC<InjectedFormProps<FormPostType>> = (props) => {\r\n    return <>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={InputComp} name='newPostText' type=\"text\" validate={[required, maxLength20]} placeholder={'Write your post here...'} />\r\n            <button type=\"submit\" className={cl.addPost}>Add post</button>\r\n        </form>\r\n    </>\r\n}\r\n\r\nexport let FormMyPostR = reduxForm<FormPostType>({\r\n    form: 'post'\r\n})(FormMyPost)\r\n","import React from 'react';\r\nimport cl from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    key: number\r\n    message: string\r\n    likes: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={cl.item}>\r\n\r\n            <img src=\"https://static.tildacdn.com/tild3538-3762-4936-b162-656163363764/Icon.png\" alt=\"avatar\" />\r\n            <span>{props.message}</span>\r\n            <div>\r\n    <div>Likes --&gt; {props.likes}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions, PostsDataType } from '../../../redux/profile-reducer';\r\nimport { getPostsData } from '../../../redux/profile-selectors';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { FormMyPostR } from './FormMyPost';\r\nimport cl from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\n\r\nexport const MyPosts: React.FC<{}> = () => {\r\n\r\n    const postsData = useSelector<AppStateType, Array<PostsDataType>>(getPostsData)\r\n    const dispatchR = useDispatch() \r\n    let postsGenerate = postsData.map(p => <Post key={p.id} message={p.message} likes={p.likes} />);\r\n    let onSubmit = (formData: FormPostType) => {\r\n        dispatchR(actions.postForm(formData.newPostText))\r\n    }\r\n    return (\r\n        <div>\r\n            <FormMyPostR onSubmit={onSubmit} />\r\n            <div className={cl.posts}>\r\n                {postsGenerate}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n//types \r\nexport type FormPostType = {\r\n    newPostText: string\r\n}\r\n","import React from 'react';\r\nimport { ContactsType } from '../../../types/types';\r\nimport cl from './ProfileInfo.module.scss';\r\n\r\nconst socialIcons = {\r\n    facebook: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111393.svg',\r\n    website: 'https://www.flaticon.com/svg/static/icons/svg/2847/2847798.svg',\r\n    vk: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111712.svg',\r\n    twitter: 'https://www.flaticon.com/svg/static/icons/svg/733/733579.svg',\r\n    instagram: 'https://www.flaticon.com/svg/static/icons/svg/174/174855.svg',\r\n    youtube: 'https://www.flaticon.com/svg/static/icons/svg/1384/1384060.svg',\r\n    github: 'https://www.flaticon.com/svg/static/icons/svg/733/733553.svg',\r\n    mainLink: 'https://www.flaticon.com/svg/static/icons/svg/2111/2111644.svg'\r\n\r\n};\r\n\r\ntype OwnPropsType = {\r\n    property: string\r\n    value: string\r\n}\r\n\r\nconst Contact: React.FC<OwnPropsType> = ({ property, value }) => {\r\n    let sIcon;\r\n    Object\r\n    .keys(socialIcons)\r\n    .forEach(key => { \r\n        if(key===property)  \r\n        sIcon = socialIcons[key as keyof ContactsType]});\r\n    return (<>\r\n        {value\r\n            && <span><a href={value}><img className={cl.socialIcon}\r\n                    src={sIcon} alt=\"\" /></a>\r\n                 </span>\r\n            }\r\n    </>)\r\n}\r\n\r\nexport default Contact;","import React from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Field, InjectedFormProps, reduxForm, WrappedFieldProps } from 'redux-form';\r\nimport { InputComp } from '../../../common/InputChecker/InputChecker';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport checker from './../../../common/InputChecker/InputChecker.module.css';\r\nimport { ProfileType } from '../../../../types/types';\r\nimport { getProfileObjectData } from '../../../../redux/profile-selectors';\r\nimport { AppStateType } from '../../../../redux/redux-store';\r\n\r\n\r\nconst ProfileEditForm: React.FC<InjectedFormProps<FormProfileType>> = (props) => {\r\n    \r\n    const profileData = useSelector<AppStateType, ProfileType>(getProfileObjectData)\r\n    \r\n    let contactsArray = Object.keys(profileData.contacts).map(key => {\r\n        return <div key={key}>{fieldCreator('contacts.' + key, InputComp, 'text')}</div>\r\n    })\r\n\r\n    return (<form onSubmit={props.handleSubmit} className={cl.editData}>\r\n        <div>{props.error\r\n            && <div className={checker.commonError}> {props.error} </div>}</div>\r\n        <div>Here is our form for editing</div>\r\n        <div> Your full name: {fieldCreator('fullName', InputComp, 'text')} </div>\r\n        <div> About me: {fieldCreator('aboutMe', InputComp, 'text')} </div>\r\n\r\n        <div> {fieldCreator('lookingForAJob', 'input', 'checkbox')} Looking for a job?</div>\r\n        <div> Description: {fieldCreator('lookingForAJobDescription', InputComp, 'text')} </div>\r\n        <div> Contacts: {contactsArray} </div>\r\n        <button>Save changes</button>\r\n\r\n    </form>\r\n    );\r\n}\r\n\r\n\r\nlet fieldCreator = (name: string,\r\n    component: React.FC<WrappedFieldProps & {placeholder: string}> | string,\r\n    type: string,\r\n    validate = []) => {\r\n    return (<Field name={name} component={component} type={type} placeholder={name} validate={validate}></Field>)\r\n}\r\n\r\nexport default reduxForm<FormProfileType>({\r\n    form: 'editProfile',\r\n    enableReinitialize: true\r\n})(ProfileEditForm);\r\n\r\nexport type FormProfileType = ProfileType\r\n","import React, { Dispatch, useState } from 'react';\r\nimport Contact from '../Contacts';\r\nimport ProfileEditForm, { FormProfileType } from './ProfileEditForm';\r\nimport sad from '../../../../assets/images/sad.png';\r\nimport happy from '../../../../assets/images/happy.png';\r\nimport cl from './../ProfileInfo.module.scss';\r\nimport { FormAction, reset } from 'redux-form';\r\nimport { ContactsType, ProfileType } from '../../../../types/types';\r\nimport { getProfileObjectData } from '../../../../redux/profile-selectors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../../redux/redux-store';\r\nimport { updateProfileThunk } from '../../../../redux/profile-reducer';\r\n\r\ntype PropsType = {\r\n    owner: boolean\r\n}\r\n\r\nexport const ProfileInfoEdit: React.FC<PropsType> = ({ owner }) => {\r\n    let [editMode, changeEditMode] = useState(false);\r\n\r\n    const profileData = useSelector<AppStateType, ProfileType>(getProfileObjectData)\r\n    const dispatchR = useDispatch()\r\n\r\n    let onSubmit = (dataFlow: FormProfileType, dispatch: Dispatch<FormAction>) => {\r\n        // typeScript is annoying that`s why there is an <any>\r\n        let promise: any = dispatchR(updateProfileThunk(dataFlow))\r\n        promise.then(() => changeEditMode(false))\r\n        dispatch(reset('editProfile'));\r\n\r\n    }\r\n    return (<>\r\n        <div>\r\n            {\r\n                (editMode && owner)\r\n                    ? <ProfileEditForm\r\n                        //@ts-ignore I need to fix this shit\r\n                        initialValues={profileData}\r\n                        onSubmit={onSubmit} />\r\n                    : owner &&\r\n                    <div>\r\n                        <button className={cl.editButton} onClick={() => changeEditMode(true)}>Edit Profile</button>\r\n                        <div className={cl.fullname}>{profileData.fullName}</div>\r\n                        <div className={cl.aboutMe}>{profileData.aboutMe}</div>\r\n                        <div className={cl.contacts}>\r\n                            {Object\r\n                            .keys(profileData.contacts)\r\n                            .map((key) => {\r\n                                return <Contact key={key} property={key} value={profileData.contacts[key as keyof ContactsType]  } />\r\n                            })\r\n                            }\r\n                        </div>\r\n                        <div>lookingForAJob:  <img src={profileData.lookingForAJob ? happy : sad} style={{ width: '50px', height: '50px' }} alt=\"\"></img> </div>\r\n                        <div>Description: {profileData.lookingForAJobDescription}</div>\r\n\r\n                    </div>\r\n            }\r\n        </div>\r\n    </>)\r\n}\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAuthID } from '../../../redux/authMe-selectors';\r\nimport { uploadPhotoThunk } from '../../../redux/profile-reducer';\r\nimport { getProfileObjectData } from '../../../redux/profile-selectors';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { ProfileType } from '../../../types/types';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport avaDefault from './../../../assets/startPage/av.jpg';\r\nimport cl from './ProfileInfo.module.scss';\r\nimport { ProfileInfoEdit } from './ProfileInfoEdit/ProfileInfoEdit';\r\n\r\ntype PropsType = {\r\n    userId: number\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ userId }) => {\r\n\r\n    const authID = useSelector(getAuthID)\r\n    const profileData = useSelector<AppStateType, ProfileType>(getProfileObjectData)\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    //that`s why here is <any>\r\n    let [photoFile, changePhotoFile] = useState<any>('');\r\n    if (!profileData) {\r\n        return <Preloader />\r\n    }\r\n    let choosePhotoEdition = () => {\r\n        changeEditMode(true);\r\n    }\r\n    let choosedPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            changePhotoFile(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    let uploadPhotoPreparation = () => {\r\n        //photoFile typeScript is annoying \r\n        dispatch(uploadPhotoThunk(photoFile))\r\n        changeEditMode(false);\r\n    }\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <div className={cl.description}>\r\n\r\n                {(editMode && (authID === userId || !userId))\r\n                    ? (<div>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={(e) => choosedPhoto(e)} />\r\n                        <input onClick={uploadPhotoPreparation} type=\"button\" value='Upload' />\r\n                    </div>)\r\n                    :\r\n                    <img\r\n                        style={{ width: '100px', height: '100px' }}\r\n                        src={profileData.photos.small ? profileData.photos.small : avaDefault}\r\n                        alt=\"avatar\"\r\n                        onDoubleClick={choosePhotoEdition} />\r\n                }\r\n                <ProfileInfoEdit owner={authID === userId || !userId} />\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ProfileInfoMemoized = React.memo(ProfileInfo)\r\n\r\nexport default ProfileInfoMemoized;","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setStatusThunk } from '../../../redux/profile-reducer';\r\nimport { getStatus } from '../../../redux/profile-selectors';\r\nimport cl from './ProfileStatus.module.css';\r\n\r\ntype PropsType = {\r\n    isUserAuth: number\r\n}\r\n\r\n export const ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n    \r\n    const status = useSelector(getStatus)\r\n    const dispatch = useDispatch()\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [statusState,setStatus] = useState(status);\r\n\r\n\r\n    let editStatus = () =>  changeEditMode(true);\r\n    let onChange = (event: ChangeEvent<HTMLInputElement>) => setStatus(event.target.value);\r\n    \r\n   useEffect(() => { setStatus(status)},[status]);\r\n\r\n    let readyStatus = () => {\r\n        changeEditMode(false);\r\n        dispatch(setStatusThunk(statusState))\r\n    }\r\n  \r\n        return (\r\n            <div className={cl.content}>\r\n                <span className={cl.status}>Status:</span>\r\n                { \r\n            \r\n                    editMode\r\n                    ? <div className={cl.editionVersion}>\r\n                        <input onBlur={readyStatus} autoFocus={true} type=\"text\" value={statusState} onChange={onChange} ></input>\r\n                    </div>\r\n                    : <div >\r\n                        <span className={cl.readyStatus} \r\n                        onDoubleClick={() => (!props.isUserAuth) \r\n                        ? editStatus() \r\n                        : false}>{status || '---------'}</span> \r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport cl from './Profile.module.css';\r\nimport { WithRouteProps } from './ProfilePage';\r\nimport ProfileInfoMemoized from './ProfileInfo/ProfileInfo';\r\nimport { ProfileStatusWithHook } from './ProfileStatus/ProfileStatusHook';\r\n\r\n\r\n\r\nconst Profile: React.FC<WithRouteProps> = (props) => {\r\n\r\n    return (\r\n        <div className={cl.content}>\r\n            <ProfileInfoMemoized\r\n                userId={+props.match.params.userId}\r\n            />\r\n            <ProfileStatusWithHook\r\n                isUserAuth={+props.match.params.userId}\r\n            />\r\n            <MyPosts />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { getAuthID } from '../../redux/authMe-selectors';\r\nimport { getStatusThunk, setProfileThunk } from '../../redux/profile-reducer';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { withAuthMe } from '../hoc/hoc';\r\nimport Profile from './Profile';\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n }\r\nexport type WithRouteProps = RouteComponentProps<PathParamsType>\r\n\r\nconst ProfilePage: React.FC<WithRouteProps> = (props) => {\r\n    const authorizedUser = useSelector(getAuthID)\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    const refreshProfile = () => {\r\n        // : number | null\r\n            let userID = +props.match.params.userId;\r\n            if(!userID){\r\n                userID = authorizedUser;\r\n                if(!userID) return<Preloader/>\r\n            } \r\n            dispatch(setProfileThunk(userID))\r\n            dispatch(getStatusThunk(userID))\r\n      }\r\n      \r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [])\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [props.match.params.userId])\r\n\r\n    return <Profile {...props} />\r\n}\r\n\r\n\r\nexport default  compose(\r\n    withRouter,  \r\n    withAuthMe\r\n)(ProfilePage)\r\n\r\n"],"sourceRoot":""}